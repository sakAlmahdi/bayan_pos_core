// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/model/customer/adderss.dart';
import 'data/model/customer/customer.dart';
import 'data/model/delivery/delivery_company.dart';
import 'data/model/delivery/delivery_zones.dart';
import 'data/model/department/category.dart';
import 'data/model/department/department1.dart';
import 'data/model/department/exract_categoty.dart';
import 'data/model/department/extract_department.dart';
import 'data/model/device/activation_info.dart';
import 'data/model/device/device.dart';
import 'data/model/discount/coupon.dart';
import 'data/model/discount/discount.dart';
import 'data/model/discount/promotion.dart';
import 'data/model/discount/time_event.dart';
import 'data/model/menu/menu.dart';
import 'data/model/menu/menu_category.dart';
import 'data/model/menu/menu_department.dart';
import 'data/model/menu/menu_gift_card.dart';
import 'data/model/menu/menu_product.dart';
import 'data/model/order/applied_modifer.dart';
import 'data/model/order/extract_product.dart';
import 'data/model/order/fee.dart';
import 'data/model/order/free_options.dart';
import 'data/model/order/group.dart';
import 'data/model/order/option.dart';
import 'data/model/order/order.dart';
import 'data/model/order/payment_method.dart';
import 'data/model/order/price_list.dart';
import 'data/model/order/price_list_value.dart';
import 'data/model/order/unit.dart';
import 'data/model/order/unit_modifer.dart';
import 'data/model/product/Ingredients.dart';
import 'data/model/product/modifier.dart';
import 'data/model/product/product1.dart';
import 'data/model/product/product_price_list.dart';
import 'data/model/resturant_sections/resturant_sections.dart';
import 'data/model/resturant_sections/table.dart';
import 'data/model/setting/bill_copy_history.dart';
import 'data/model/setting/bill_counter.dart';
import 'data/model/setting/bill_setting.dart';
import 'data/model/setting/branch.dart';
import 'data/model/setting/cashier_setting.dart';
import 'data/model/setting/currency.dart';
import 'data/model/setting/login_history.dart';
import 'data/model/setting/loyalty.dart';
import 'data/model/setting/policy_setting.dart';
import 'data/model/setting/pos_user.dart';
import 'data/model/setting/pos_user1.dart';
import 'data/model/setting/printer.dart';
import 'data/model/setting/printer_setting.dart';
import 'data/model/setting/reasons_canceling.dart';
import 'data/model/setting/reasons_drawer_open.dart';
import 'data/model/setting/tax_setting.dart';
import 'data/model/setting/view_settings.dart';
import 'data/model/shift.dart';
import 'data/model/tax/tax_c.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 53279071107237575),
      name: 'ActivationInfo',
      lastPropertyId: const IdUid(21, 4753557966694265485),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3833306106052052965),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6831373045691368447),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6551953573399156862),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8824417119698099896),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6285855183276573530),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3922856888827401135),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3626390998197597625),
            name: 'taxRegName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7633945665398314209),
            name: 'fTaxRegName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3487050998675320448),
            name: 'taxCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4420959710963086335),
            name: 'onlineOrderStartTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3564342836882772214),
            name: 'onlineOrderEndTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 326843119683083807),
            name: 'branchPrefix',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2394811545965978918),
            name: 'customerService',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7612049963821472642),
            name: 'countryId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6073036382792569262),
            name: 'cityId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 8092759734917413383),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2818187187965589261),
            name: 'latitude',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 8560145222074802584),
            name: 'longitude',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 1379929705285825477),
            name: 'headerInvoiceMsg',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 4193620026115802283),
            name: 'footerInvoiceMsg',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4753557966694265485),
            name: 'receiveOnlineOrders',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'allDevices', srcEntity: 'Device', srcField: 'info')
      ]),
  ModelEntity(
      id: const IdUid(2, 8451008168503218067),
      name: 'Address',
      lastPropertyId: const IdUid(17, 8532905745124867868),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8460253699909817695),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6613394592875304258),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3112223925601191971),
            name: 'addressTypeId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3837025299929696148),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1010999016979230047),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1191075517501603589),
            name: 'latitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7376742708124842016),
            name: 'longitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4977555829015360977),
            name: 'deliveryZoneId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1190144858779779779),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5064475434395471671),
            name: 'mainStreet',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6509353225818518637),
            name: 'byStreet',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2844717136490185420),
            name: 'buildingNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5056317180935436070),
            name: 'floor',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2275527651041413605),
            name: 'apartmentNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 7486543833481119762),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 375598896948828562),
            name: 'popularPlace',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 8532905745124867868),
            name: 'zipCode',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 500421116682346545),
      name: 'AppliedModifer',
      lastPropertyId: const IdUid(2, 4756975231016227584),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3613176113280210532),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4756975231016227584),
            name: 'modifierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 5776010951959969322),
            relationTarget: 'UnitModifer')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 7631082218964518116),
            name: 'options',
            targetId: const IdUid(4, 8454244093927912319))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 8454244093927912319),
      name: 'AppliedOption',
      lastPropertyId: const IdUid(6, 5538368520520972451),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5506696461159850101),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1572032744018276938),
            name: 'quntity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6300835888858641998),
            name: 'freeQuntity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7432447863151456393),
            name: 'priceWithTax',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4147028859018911236),
            name: 'optionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 2464915579840167068),
            relationTarget: 'Option'),
        ModelProperty(
            id: const IdUid(6, 5538368520520972451),
            name: 'taxInfoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 1002513898452891975),
            relationTarget: 'TaxInfo')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 5486472520890604273),
      name: 'AppliedProduct',
      lastPropertyId: const IdUid(22, 6356387120224814137),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3955243973077278156),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5427149747131696330),
            name: 'productId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 4722854081091245808),
            relationTarget: 'ExtractProduct'),
        ModelProperty(
            id: const IdUid(3, 2197228958460688304),
            name: 'unitId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 3444105559680674790),
            relationTarget: 'Unit'),
        ModelProperty(
            id: const IdUid(4, 4120030136655443351),
            name: 'quantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2067678429424937872),
            name: 'prodRef',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8366175992275187071),
            name: 'priceWithTax',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6957536254169924201),
            name: 'isCansel',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6305660266107383694),
            name: 'msgCansel',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8657280126983033549),
            name: 'priceLevel',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3943252929919796825),
            name: 'eventId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 4296982262874338051),
            relationTarget: 'TimeEvent'),
        ModelProperty(
            id: const IdUid(11, 7557173511999345414),
            name: 'discountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 1592442611163269834),
            relationTarget: 'Discount'),
        ModelProperty(
            id: const IdUid(12, 6071991548574829420),
            name: 'promotionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 3765482651863192541),
            relationTarget: 'Promotion'),
        ModelProperty(
            id: const IdUid(13, 5261425538644988182),
            name: 'taxInfoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 1657120618616258553),
            relationTarget: 'TaxInfo'),
        ModelProperty(
            id: const IdUid(14, 5499166782226564681),
            name: 'throwbackInfoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 4526771120742692604),
            relationTarget: 'ThrowbackInfo'),
        ModelProperty(
            id: const IdUid(15, 4709452951923561888),
            name: 'giftCardCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 6715805773248355912),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 4892188365586748541),
            name: 'optionPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 5878486480223655724),
            name: 'priceDiscount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 5783121656157401095),
            name: 'pricePromotion',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 2939235449165370706),
            name: 'taxPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 741546057447678211),
            name: 'freeQuntity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 6356387120224814137),
            name: 'note',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 3478781303689142113),
            name: 'appliedModifer',
            targetId: const IdUid(3, 500421116682346545))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 3291089578327825000),
      name: 'BillCopyHistory',
      lastPropertyId: const IdUid(4, 3283001437164103689),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6538108937507214554),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1826234508978954116),
            name: 'billRef',
            type: 9,
            flags: 2048,
            indexId: const IdUid(11, 8647877274254297566)),
        ModelProperty(
            id: const IdUid(3, 1664038612230394524),
            name: 'billNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3283001437164103689),
            name: 'billeDate',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 1244347725548486164),
      name: 'BillCounter',
      lastPropertyId: const IdUid(6, 2172037298919586929),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3716147460809206903),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 644272681943511005),
            name: 'dateTimeOpenOn',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5167293703918933871),
            name: 'dateTimeCloseOn',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2942808007079852120),
            name: 'isClosed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5039265700054051452),
            name: 'curentCounter',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2172037298919586929),
            name: 'billPerfex',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 8384044229292435029),
            name: 'billCopyHistory',
            targetId: const IdUid(6, 3291089578327825000))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 1828886545212770588),
      name: 'BillSetting',
      lastPropertyId: const IdUid(41, 4774594537529151928),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 792878869677150805),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6677252360307729670),
            name: 'logoUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6139306772328952958),
            name: 'companyName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8760776943972947110),
            name: 'fCompanyName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8544396551454412262),
            name: 'taxNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 173764894405541404),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5962712989710537261),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 269152897086075559),
            name: 'fAddress',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7910153317474981494),
            name: 'headerInvoiceMessage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4153880189060060462),
            name: 'fHeaderInvoiceMessage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7922205774205905325),
            name: 'footerInvoiceMessage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7379272018938070900),
            name: 'fFooterInvoiceMessage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4453285664095506885),
            name: 'invoiceRoundFactor',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7391930147635736816),
            name: 'enablePrintBundleProductChildren',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 1791868363051796148),
            name: 'printOrderNumber',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5537601781381250686),
            name: 'printCalories',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2162684650787588131),
            name: 'printSubTotal',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 1939703578031413782),
            name: 'printRoundDigit',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 1188868551185231120),
            name: 'printProductUnit',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 5243743246286206071),
            name: 'printProductUnitPrice',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4779656686699348136),
            name: 'printProductTotalPrice',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 4596557021282658281),
            name: 'printProductDiscountPrice',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 8386727767487819524),
            name: 'printProductFreeQuantity',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 2309706099365309452),
            name: 'printProductTotalPriceBeforeTax',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 2239597309061408913),
            name: 'printProductTaxAmount',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 4398054744550830036),
            name: 'printProductTaxPercentage',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 1235258472701608008),
            name: 'printProductTotalPriceAfterDiscount',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 8219373979693308072),
            name: 'printProductTotalPriceIncludeTax',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 3559840902445287745),
            name: 'printOrderClosedUser',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 4973623688541104502),
            name: 'printOrderCreatedUser',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 2022505801546050353),
            name: 'printCheckNumber',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 8652516994431423696),
            name: 'hideFreeModifierOptions',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 3638601682427847147),
            name: 'invoiceTemplate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 1423723303246624969),
            name: 'refundTemplate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 887092905110816092),
            name: 'autoPrintOnSave',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 2167034085199841334),
            name: 'printlanguage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 6680091717574790645),
            name: 'defaultLanguage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 1837130695107298151),
            name: 'secondLanguage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 2229950781551137124),
            name: 'invoiceTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 3305074067974210623),
            name: 'fInvoiceTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 4774594537529151928),
            name: 'logoDataId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 1581937761570689090),
            relationTarget: 'LogoData')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 3566169151740237098),
      name: 'Branch',
      lastPropertyId: const IdUid(16, 5201638300868975293),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9081699198098262235),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9096881363769786340),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(13, 206531330361184831)),
        ModelProperty(
            id: const IdUid(3, 388632982608378672),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8814559156732578940),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1834634291588870800),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5362239995624877397),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5393523144990958622),
            name: 'taxRegName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3093360549087574541),
            name: 'taxCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 9209851721679645857),
            name: 'onlineOrderStartTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1559256211283005957),
            name: 'onlineOrderEndTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7564832677048764362),
            name: 'branchPrefix',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1644048028099831528),
            name: 'customerService',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4183685355377101215),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8241895426767535233),
            name: 'headerInvoiceMsg',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 1210538290699389821),
            name: 'footerInvoiceMsg',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5201638300868975293),
            name: 'receiveOnlineOrders',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 7573845506267783385),
      name: 'Branches',
      lastPropertyId: const IdUid(4, 5990028951569268899),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2223247369856384700),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7631867122054469312),
            name: 'tenantId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7205209074693394582),
            name: 'branchId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5990028951569268899),
            name: 'branchName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 8016197084671912919),
      name: 'CashierSetting',
      lastPropertyId: const IdUid(34, 1061996483696323585),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2736656875892317540),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 103724264630003111),
            name: 'enableCashSales',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 737227078930988345),
            name: 'enableCreditCardSales',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7298126980097517232),
            name: 'enableCustomerSales',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5173738070735260119),
            name: 'enableFreeQuantity',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7145121593590343966),
            name: 'enableEditItemName',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 9111939045868137436),
            name: 'enableSalesDiscount',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6194358440873879548),
            name: 'enableChangePrice',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7690159658466436888),
            name: 'enableProductPackages',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7923756935406665260),
            name: 'enableTablesSystem',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4551961872820563965),
            name: 'tableGuestCountRequired',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4021206107015371004),
            name: 'tableRequired',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3279424140856648597),
            name: 'discountPercentageLimit',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6194523694686680741),
            name: 'defaultCustomerId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 7356297829241212239),
            name: 'priceListId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4713011883872755073),
            name: 'daily',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 4069243173204488110),
            name: 'submittingRequestsDelayMinutes',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 4116042248231893804),
            name: 'inactiveUsersLogoutMinutes',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4373567784034529383),
            name: 'maximumReturnPeriodMinutes',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 4665058874464095911),
            name: 'requireOrderTypesForOrders',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 784921688566915265),
            name: 'roundingType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 6687534390516834927),
            name: 'roundDigits',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 7771776201549684173),
            name: 'kitchenSortingType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 8995344079240864431),
            name: 'printSortingType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 1552714377080315772),
            name: 'activeTips',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 6629148234081510280),
            name: 'discountRequireCustomerInfo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 761241667677988499),
            name: 'returnRequireCustomerInfo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 5955099530835943182),
            name: 'requireCancelReason',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 4854967538751303323),
            name: 'autoSentOrderToKitchenAfterPaid',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 2794371055884804211),
            name: 'autoSyncDataAtStartOfDay',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 7185726926436059066),
            name: 'autoPrintProductsReport',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 7067370579531837859),
            name: 'autoPrintTillsReport',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 3699943738215086355),
            name: 'preventEndingDayBeforeInventoryCount',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 1061996483696323585),
            name: 'imei',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 7565412035557934887),
      name: 'Category',
      lastPropertyId: const IdUid(6, 4811317384157043806),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8028044394101796971),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 609908361277603150),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(14, 8082839858855727129)),
        ModelProperty(
            id: const IdUid(3, 9072802005580569698),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1645549486737225369),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5842317375973410404),
            name: 'displayOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4811317384157043806),
            name: 'imageUrl',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 7444976704762316818),
      name: 'Coupon',
      lastPropertyId: const IdUid(14, 3954599658861916350),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2008033414826986653),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5998919200906004456),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(15, 6546612456148965411)),
        ModelProperty(
            id: const IdUid(3, 1401031369844344814),
            name: 'couponCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2609052265489184885),
            name: 'useCountForAll',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1117286541275226935),
            name: 'useCountForOne',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1657426975980134236),
            name: 'maximumUses',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 357997463494698961),
            name: 'startDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3227285214571385604),
            name: 'endDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5562856874930721092),
            name: 'startTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7642134418810526514),
            name: 'endTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4911670706815424433),
            name: 'discountId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 9036412268886368449),
            name: 'days',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6513682343939227755),
            name: 'couponLevel',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3954599658861916350),
            name: 'numberOFProducts',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 6969687810107755944),
      name: 'Currencies',
      lastPropertyId: const IdUid(12, 4159221145365201404),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7683957168268979583),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2112519661483559507),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(16, 5103063415164404174)),
        ModelProperty(
            id: const IdUid(3, 2090020531932170226),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7358368469050165064),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8047806677526712319),
            name: 'currencyCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4560721546388526191),
            name: 'displayLocale',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 292329493038746422),
            name: 'isDefault',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7729769909815899495),
            name: 'customFormatting',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6530639437108401830),
            name: 'exchangeRate',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 515882909229212648),
            name: 'minExchangeRate',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2147821044982673685),
            name: 'maxExchangeRate',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4159221145365201404),
            name: 'dens',
            type: 27,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 4464984356273699859),
      name: 'Customer',
      lastPropertyId: const IdUid(16, 3069739848417873633),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6472389518620618742),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3624638527783965109),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(17, 6248088918346412446)),
        ModelProperty(
            id: const IdUid(3, 7435858417123624496),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2004996955013288859),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3894624658977402646),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2453523313141497372),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2192654233131172614),
            name: 'debitLimit',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1726304372121006408),
            name: 'balance',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 693604459100550706),
            name: 'paymentMethodId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6055293000671491837),
            name: 'currencyId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 71238297960890645),
            name: 'taxNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6650249473180196769),
            name: 'taxRegisterationName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3078985616728139014),
            name: 'inBlackList',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1894706563977175327),
            name: 'blackListNote',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5223262331370978442),
            name: 'priceListId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 3069739848417873633),
            name: 'enableHouseAccount',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(4, 6769406904392834200),
            name: 'addersses',
            targetId: const IdUid(2, 8451008168503218067)),
        ModelRelation(
            id: const IdUid(5, 3833724265839657776),
            name: 'houseAccountTranscations',
            targetId: const IdUid(68, 5593309476488169220))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 2813730290023494170),
      name: 'DeliveryCompany',
      lastPropertyId: const IdUid(9, 4934356858128606449),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3585793497342486049),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5502420376928268186),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(18, 2086547726959561199)),
        ModelProperty(
            id: const IdUid(3, 8914381684419813783),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2850895385171920966),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5233800774585722983),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4701711209207425212),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8396314864336635831),
            name: 'countryId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 9098030913108709757),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4934356858128606449),
            name: 'commissionRate',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 4009870747795945753),
      name: 'DeliveryCompanyInfo',
      lastPropertyId: const IdUid(3, 8897203536128212298),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1546513493387509345),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6276994047247184803),
            name: 'companyId',
            type: 11,
            flags: 520,
            indexId: const IdUid(19, 8136238474718528396),
            relationTarget: 'DeliveryCompany'),
        ModelProperty(
            id: const IdUid(3, 8897203536128212298),
            name: 'orderNumber',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 3899218120111457771),
      name: 'DeliveryZone',
      lastPropertyId: const IdUid(7, 6534365661769529731),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3758405434138927336),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1830270601705292171),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(20, 7418381830376931044)),
        ModelProperty(
            id: const IdUid(3, 1249089403974787863),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3698552030286927816),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7591615072949031041),
            name: 'deliveryZoneCoordinate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8821553621082297873),
            name: 'minimumDeliveryCharge',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6534365661769529731),
            name: 'deliveryChargePerKM',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(21, 7212208577022869518),
      name: 'Discount',
      lastPropertyId: const IdUid(22, 1126055643235146440),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2461191566539044989),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7545696624792123569),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(24, 3608176333448247771)),
        ModelProperty(
            id: const IdUid(3, 5934203672470078820),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7617727080146967487),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7753016608822760736),
            name: 'startDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7765627221406341829),
            name: 'endDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2102558759524579418),
            name: 'startTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3554055126303495451),
            name: 'endTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2700050842495261627),
            name: 'discountAppliedTo',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5595070588213500345),
            name: 'discountType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 918668309195769129),
            name: 'discountPercentage',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6318032770025330817),
            name: 'discountAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6096534259191376149),
            name: 'maximumDiscountAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5598667672813106332),
            name: 'minimalOrderAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 788788813355337833),
            name: 'taxable',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1755035900122674414),
            name: 'productIDs',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 6759876134795096506),
            name: 'days',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 3603354448398517935),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 54115930559119820),
            name: 'priceList',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 3100707989245177246),
            name: 'customers',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4841546762029442835),
            name: 'departments',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 1126055643235146440),
            name: 'categoeries',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(22, 354915056638906821),
      name: 'ExtractCategory',
      lastPropertyId: const IdUid(6, 7174526904332805843),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2859738624137454985),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8361047786298678549),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(25, 8426594201499993993)),
        ModelProperty(
            id: const IdUid(3, 7422851067308935892),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const IdUid(26, 6991073438797693417)),
        ModelProperty(
            id: const IdUid(4, 1192527729113152995),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 319642934759860889),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7174526904332805843),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(23, 1325972687236920413),
      name: 'ExtractDepartment',
      lastPropertyId: const IdUid(6, 3118587618844373966),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4911184773316635004),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5112637043534812351),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(27, 3050699033189966556)),
        ModelProperty(
            id: const IdUid(3, 733533462796449672),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const IdUid(28, 1555429865650307567)),
        ModelProperty(
            id: const IdUid(4, 6133645527054767963),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8111643834559302727),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3118587618844373966),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 4984707875893633549),
            name: 'categories',
            targetId: const IdUid(22, 354915056638906821))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(24, 5709423583114160758),
      name: 'ExtractProduct',
      lastPropertyId: const IdUid(54, 2670725419253229718),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2108388274784045674),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7787462200961186760),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(29, 1714690877278981214)),
        ModelProperty(
            id: const IdUid(3, 7183010966086735598),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4387349696126629782),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1539675296932333521),
            name: 'sku',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 276636472660077134),
            name: 'barcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3505550270720546743),
            name: 'productTypeId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7726609936917841575),
            name: 'costType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 278433514134238914),
            name: 'priceType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4436953629054182296),
            name: 'salesMethod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7039083224854590799),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 217858734146279429),
            name: 'cost',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5508469336832504470),
            name: 'preparationTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 3651772333327679234),
            name: 'activeQRScan',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 8317062780751452816),
            name: 'qrScanOnSameDate',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 771384735173949903),
            name: 'enableSalesDiscount',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 5917891343039636353),
            name: 'discountPercentageLimit',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 1706545133563646288),
            name: 'enableFreeQuantity',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 7452185718494170785),
            name: 'enableDateExpire',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 8279665627920323637),
            name: 'enableIMEISerial',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 4795548355079720115),
            name: 'enableWeights',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 559625542928049897),
            name: 'scanPriceFromScale',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 8698546867219959977),
            name: 'scalePriceIncludeTax',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 1016163685040287659),
            name: 'independentPrinting',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 921976336790813196),
            name: 'calculateQuantityFromTotalPrice',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 3719846555158749010),
            name: 'reservationRequired',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 7284855592309806935),
            name: 'scaleBarcodeDigits',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 4493189524070469493),
            name: 'scaleProductCodeDigits',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 7848701956897265917),
            name: 'scaleIntDigits',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 8274116910963060823),
            name: 'scaledecimalDigits',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 8888410550046546810),
            name: 'scaleProductCodeFirstInBracode',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 1532090545013566971),
            name: 'availableStartDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 7883177863915749149),
            name: 'availableEndDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 2386447248381989651),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 4620223214864348694),
            name: 'fDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 3883358871099789246),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 4703746881819181446),
            name: 'calories',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 1327051364496257297),
            name: 'minimumLevel',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 8060863729191979469),
            name: 'maximumLevel',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 6437024865329961022),
            name: 'departmentId',
            type: 9,
            flags: 2048,
            indexId: const IdUid(31, 5221693804011843249)),
        ModelProperty(
            id: const IdUid(44, 1309766340034631209),
            name: 'active',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(45, 5277523297867572753),
            name: 'taxGroupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(47, 6546522484242136978),
            name: 'productNature',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(48, 5781835039442735595),
            name: 'subName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(49, 1152311168748234182),
            name: 'fSubName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(50, 3238034533502509365),
            name: 'promotionalName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(51, 3948253851901193753),
            name: 'fPromotionalName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(52, 2958435284556284546),
            name: 'tags',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(53, 463964551050776650),
            name: 'fTags',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(54, 2670725419253229718),
            name: 'categoryId',
            type: 9,
            flags: 2048,
            indexId: const IdUid(68, 6866350827838828309))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 8633249135998064644),
            name: 'units',
            targetId: const IdUid(69, 5171977170734367277)),
        ModelRelation(
            id: const IdUid(9, 6470330808144442140),
            name: 'groups',
            targetId: const IdUid(29, 4302084875799726187))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(25, 5857248686106287164),
      name: 'Fee',
      lastPropertyId: const IdUid(22, 2791634116734650269),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4887753208810056653),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5011586249140524024),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(32, 6407706298335635932)),
        ModelProperty(
            id: const IdUid(3, 3872913251069414791),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1354490092276760781),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4485585744150644172),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3812439110324744722),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8979790343000672351),
            name: 'days',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7198250327702873006),
            name: 'applyAuto',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2633324488715880155),
            name: 'applyToSubtotal',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5137379878569012236),
            name: 'type',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8600424298414030915),
            name: 'valueType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5193470447666347487),
            name: 'percentage',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 8943147914560700965),
            name: 'products',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 9065503858975535677),
            name: 'taxGroupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 1287383488159611464),
            name: 'applyForProducts',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 5511346345396314317),
            name: 'printSeparatelyInTotalInvoice',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 4771102154390490653),
            name: 'amountIncludeInProductPrice',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 87949396710443754),
            name: 'minAmountPerProduct',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 2791634116734650269),
            name: 'maxAmountPerProduct',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(26, 4527731673105669432),
      name: 'FeeTaxInfo',
      lastPropertyId: const IdUid(3, 8746537235200204600),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4598596719547709787),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6766423575935707704),
            name: 'taxGroupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8746537235200204600),
            name: 'value',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(27, 3592287303225952039),
      name: 'FeeValue',
      lastPropertyId: const IdUid(5, 306762247962161638),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5197082340394875455),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7909315180871071579),
            name: 'feeId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 322837688477671996),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 659980033483922089),
            name: 'applyAuto',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 306762247962161638),
            name: 'taxInfoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(33, 1499709465281665958),
            relationTarget: 'FeeTaxInfo')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(28, 3830429392928909783),
      name: 'FreeOption',
      lastPropertyId: const IdUid(3, 8067428521459222681),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 269693323250230854),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6686969853715478402),
            name: 'optionId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8067428521459222681),
            name: 'freeQuantity',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(29, 4302084875799726187),
      name: 'Group',
      lastPropertyId: const IdUid(5, 4235418128051537594),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6336664330767015354),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3703516384281413024),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(34, 8038400241585389753)),
        ModelProperty(
            id: const IdUid(3, 6159896084873053876),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6478429005710066332),
            name: 'groupName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4235418128051537594),
            name: 'reference',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(30, 1946161431984400074),
      name: 'Ingredient',
      lastPropertyId: const IdUid(15, 8609223724653047344),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5984754425369018939),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2382689443073584519),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6889901656072175741),
            name: 'displayOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3679910494695577012),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(35, 1730930693695816990)),
        ModelProperty(
            id: const IdUid(5, 3018354974478607780),
            name: 'ingredientItemId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8592038247475390169),
            name: 'ingredientItemName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6347488299050744278),
            name: 'barcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3806958411550965109),
            name: 'unitOfMeasureName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6390348937669096337),
            name: 'warehouseToIngredientFactor',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7527866267753176458),
            name: 'quantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 534940538380690263),
            name: 'wasteQuantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6683615107487279911),
            name: 'unitCost',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8855444781317093565),
            name: 'estimatedUnitCost',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7806263782945001688),
            name: 'yieldPercentage',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8609223724653047344),
            name: 'orderTypes',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(31, 5531843858523753126),
      name: 'LoginHistory',
      lastPropertyId: const IdUid(7, 2471763478850033778),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6980139733344369776),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3852640733050156748),
            name: 'idIdentity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4996021805629639619),
            name: 'loginTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2576761525702039487),
            name: 'logoutTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6169812613231319130),
            name: 'usertId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4985096254515791153),
            name: 'deviceNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2471763478850033778),
            name: 'deviceRef',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(32, 3441036690976255077),
      name: 'LogoData',
      lastPropertyId: const IdUid(3, 388453653968456498),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7989592687529859994),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4135026195977851805),
            name: 'logoUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 388453653968456498),
            name: 'logoData',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(33, 1370790733433777508),
      name: 'LoyaltySetting',
      lastPropertyId: const IdUid(13, 4270860733020305207),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2315962589908980460),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2305466432532503060),
            name: 'enableSystem',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3270658132394789459),
            name: 'loyaltyMethod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8006487457153781282),
            name: 'lowestOrderPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2875384912060506475),
            name: 'delayInEarningPointsMinutes',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7640722586634121320),
            name: 'bonusType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8337068580071849139),
            name: 'bonusValue',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7967524297303797336),
            name: 'maximumBonusLimit',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 67323215247861028),
            name: 'requiredBonusPoint',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6207892036746283923),
            name: 'bonusValidityDays',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3154494727024016065),
            name: 'enableSMSNotifications',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2033740544295280306),
            name: 'displayBonusOnNewOrder',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4270860733020305207),
            name: 'printBonusBalanceOnNewOrder',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(34, 5158247758932586878),
      name: 'Menu',
      lastPropertyId: const IdUid(4, 2701030962858060518),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2333077160291439672),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 190771950577256897),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(36, 6751931128018129545)),
        ModelProperty(
            id: const IdUid(3, 2931347969285619254),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2701030962858060518),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(10, 560706841253080416),
            name: 'departments',
            targetId: const IdUid(36, 5011158286192523309)),
        ModelRelation(
            id: const IdUid(11, 1793753470185973842),
            name: 'categories',
            targetId: const IdUid(35, 877153477529378386)),
        ModelRelation(
            id: const IdUid(12, 2759818869438746719),
            name: 'products',
            targetId: const IdUid(38, 2986182739364310251)),
        ModelRelation(
            id: const IdUid(13, 1563547523352284324),
            name: 'giftCards',
            targetId: const IdUid(37, 2052500673151911216))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(35, 877153477529378386),
      name: 'MenuCategory',
      lastPropertyId: const IdUid(3, 722995363949323228),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8751917579573665439),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3886577209992789872),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 722995363949323228),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const IdUid(37, 4407501073417605460))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(36, 5011158286192523309),
      name: 'MenuDepartment',
      lastPropertyId: const IdUid(3, 6449166174554777541),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2345793522925863635),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5182995609156195357),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6449166174554777541),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const IdUid(38, 3190423864669081144))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(37, 2052500673151911216),
      name: 'MenuGiftCard',
      lastPropertyId: const IdUid(3, 1406063575469319821),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 426167208350036955),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7128546162319036411),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1406063575469319821),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const IdUid(39, 4224563022621211775))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(38, 2986182739364310251),
      name: 'MenuProduct',
      lastPropertyId: const IdUid(3, 8307639924877814505),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7063825144106587218),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5426958394197822338),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8307639924877814505),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const IdUid(40, 8415640528313496721))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(39, 8880238065986016317),
      name: 'Modifier',
      lastPropertyId: const IdUid(7, 2909468244979358135),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6580266257333024606),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7644461480667345502),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8450837906028760444),
            name: 'minimumOptions',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8619350508805896463),
            name: 'maximumOptions',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3311551207477048697),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 660937853238293164),
            name: 'fname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2909468244979358135),
            name: 'isUnique',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(14, 7759235742154531782),
            name: 'options',
            targetId: const IdUid(40, 7807952511707511233))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(40, 7807952511707511233),
      name: 'Option',
      lastPropertyId: const IdUid(14, 5044229518557424018),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8794826325236490531),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1482272447554430385),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4722452118227035306),
            name: 'costType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3135834614443416368),
            name: 'modifierType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 673651828901322857),
            name: 'instructionType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6831958877504767350),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3556786493853221869),
            name: 'cost',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2899691961365151597),
            name: 'calories',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8199362324024549712),
            name: 'inStock',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5665844890432249267),
            name: 'isDefault',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4907536570518046060),
            name: 'displayOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5408268511449718236),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3194201377084831029),
            name: 'fname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5044229518557424018),
            name: 'taxGroupId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(41, 6526865856720781974),
      name: 'OrderC',
      lastPropertyId: const IdUid(37, 6195590767048724159),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8469785296107696950),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1258050070458870556),
            name: 'invoiceNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8724090827610461901),
            name: 'deviceId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3394801265945749440),
            name: 'startDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5642097856657343235),
            name: 'timeOfReceipt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 274222986005808412),
            name: 'parentOrderId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7718476327581214257),
            name: 'splitIndex',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5388009171146272892),
            name: 'orderRef',
            type: 9,
            flags: 34848,
            indexId: const IdUid(41, 7521590300978403110)),
        ModelProperty(
            id: const IdUid(9, 7808913113021776688),
            name: 'callName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8788710148644939116),
            name: 'orderType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6353168292363298133),
            name: 'status',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 654202905134837417),
            name: 'orderSource',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 65253817181386308),
            name: 'endTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4443662505446276058),
            name: 'deliveryCompanyInfoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(42, 858517789426437850),
            relationTarget: 'DeliveryCompanyInfo'),
        ModelProperty(
            id: const IdUid(15, 7764651261947438049),
            name: 'selectedPriceListId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 8093676056203210033),
            name: 'tableId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 7801428444655316631),
            name: 'tableCaption',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 8162158060669984520),
            name: 'numberVistor',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 936682619553193982),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(43, 3446656737821701432),
            relationTarget: 'Customer'),
        ModelProperty(
            id: const IdUid(20, 780842644968215916),
            name: 'addressId',
            type: 11,
            flags: 520,
            indexId: const IdUid(44, 3287471078896139512),
            relationTarget: 'Address'),
        ModelProperty(
            id: const IdUid(21, 4882260744496225976),
            name: 'promotionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(45, 1898559935493376876),
            relationTarget: 'Promotion'),
        ModelProperty(
            id: const IdUid(22, 377800659058354317),
            name: 'discountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(46, 4395492427479001562),
            relationTarget: 'Discount'),
        ModelProperty(
            id: const IdUid(23, 2724036560284379827),
            name: 'priceDiscount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 6366957111361837652),
            name: 'pricePromotion',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 2876775805037550997),
            name: 'note',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 8645031518401109898),
            name: 'kitchenNote',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 2468271245544413427),
            name: 'msgCansel',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 3077989887183144497),
            name: 'subTotal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 6013796939053905059),
            name: 'checksum',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 1878623719733269891),
            name: 'masterChecksum',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 2696595148249625271),
            name: 'serverChecksum',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 5676751465640866219),
            name: 'totalFee',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 1136666540059738301),
            name: 'taxPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 6008029297225492807),
            name: 'totalDiscountForOrderAndProduct',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 7619527193403597803),
            name: 'totalPaid',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 4757869318490394296),
            name: 'shiftId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 6195590767048724159),
            name: 'tillId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(15, 5303097263621035564),
            name: 'products',
            targetId: const IdUid(5, 5486472520890604273)),
        ModelRelation(
            id: const IdUid(16, 2137785580328113765),
            name: 'fees',
            targetId: const IdUid(25, 5857248686106287164)),
        ModelRelation(
            id: const IdUid(17, 6035870626843161172),
            name: 'feeValues',
            targetId: const IdUid(27, 3592287303225952039)),
        ModelRelation(
            id: const IdUid(18, 937484129527937497),
            name: 'payments',
            targetId: const IdUid(43, 1560453620881139416))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(42, 3797035564537809293),
      name: 'PaymentMethod',
      lastPropertyId: const IdUid(14, 728159911920714680),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6141896834450057300),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8150663529134080728),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(47, 6982412993027799109)),
        ModelProperty(
            id: const IdUid(3, 670800800128637748),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7863051715890833227),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3901439973775536893),
            name: 'paymentType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9193210376084907862),
            name: 'displayOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8828339659276319165),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2459656069780056527),
            name: 'isDeleted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 728159911920714680),
            name: 'autoOpenCashDrawer',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(43, 1560453620881139416),
      name: 'PaymentValue',
      lastPropertyId: const IdUid(8, 1635878408110656011),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5584692645435699399),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 844215587735273512),
            name: 'refreance',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 683110213343314463),
            name: 'methodId',
            type: 11,
            flags: 520,
            indexId: const IdUid(48, 6720845709469602712),
            relationTarget: 'PaymentMethod'),
        ModelProperty(
            id: const IdUid(4, 9165973818994374358),
            name: 'amt',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4939978362939438032),
            name: 'remainAmt',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2593104575496893598),
            name: 'exchangeRate',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 342671144837124394),
            name: 'amountCurecny',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1635878408110656011),
            name: 'currencyCode',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(44, 818183626999595168),
      name: 'PolicySetting',
      lastPropertyId: const IdUid(6, 4188214506102692482),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2961575107309523126),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8977347217712842406),
            name: 'enableOrderCancelation',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3689362305149666644),
            name: 'enablePosRefund',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4905927874211910153),
            name: 'enableUsingExpiredTicket',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6037388778824089353),
            name: 'orderPolicyAR',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4188214506102692482),
            name: 'orderPolicyEN',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(45, 4421394409688684196),
      name: 'PosUser',
      lastPropertyId: const IdUid(5, 305598455431559194),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 521807163657463618),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9118788832074433239),
            name: 'idUser',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9221074742451348493),
            name: 'fullName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3700405866928181590),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 305598455431559194),
            name: 'pinMD5',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(19, 2535667785573320943),
            name: 'tenants',
            targetId: const IdUid(65, 5391400725822009527)),
        ModelRelation(
            id: const IdUid(20, 8157483176335182149),
            name: 'branches',
            targetId: const IdUid(10, 7573845506267783385))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(46, 86253882464996558),
      name: 'PosUser1',
      lastPropertyId: const IdUid(9, 4751490438130982859),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3275069699019309770),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8756596407427397255),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(49, 2216541250056194386)),
        ModelProperty(
            id: const IdUid(3, 9028040720155282731),
            name: 'name2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6334846046410997739),
            name: 'phoneNumber3',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1452090586754985555),
            name: 'passwordHash4',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5870898642791051900),
            name: 'pin5',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2520467391372007205),
            name: 'pinMD56',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 13239171248706085),
            name: 'imageUrl7',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4751490438130982859),
            name: 'orderTypes',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(21, 8563935151107234117),
            name: 'branches',
            targetId: const IdUid(71, 2915623585353258909)),
        ModelRelation(
            id: const IdUid(22, 1351578386063061510),
            name: 'roles',
            targetId: const IdUid(57, 5605412999180932790))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(47, 1865665253408799402),
      name: 'PriceList',
      lastPropertyId: const IdUid(5, 4646589788223668491),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1116821977887712377),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1929120077640644266),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(50, 451635413556463403)),
        ModelProperty(
            id: const IdUid(3, 214560985773750425),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1932666761463154616),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4646589788223668491),
            name: 'priceIncludeTax',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(48, 2476280557417458459),
      name: 'PriceListValue',
      lastPropertyId: const IdUid(3, 1373321354637045812),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 737829528284099031),
            name: 'idSeq',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6662610891711768509),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1373321354637045812),
            name: 'price',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(23, 2748065756203783549),
            name: 'slaps',
            targetId: const IdUid(59, 4771539298241725266))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(49, 803641588851631970),
      name: 'Printer',
      lastPropertyId: const IdUid(15, 4759398087780048172),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3813307645162031609),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5146688189877868251),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(51, 5139387952433443640)),
        ModelProperty(
            id: const IdUid(3, 8840778385810337759),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4428718033833603597),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1769076721477979464),
            name: 'deviceId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4897429926808017335),
            name: 'printerModelId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5610696327645629316),
            name: 'connectionType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7748563562364329999),
            name: 'ipAddress',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4265738232664739193),
            name: 'printerType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5259359621190802395),
            name: 'printTo',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5980146396594323248),
            name: 'port',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5881831937302342950),
            name: 'products',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4983600202996758474),
            name: 'departments',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1392616995955526161),
            name: 'categories',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 4759398087780048172),
            name: 'orderTypes',
            type: 27,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(24, 7563879710557259118),
            name: 'settings',
            targetId: const IdUid(50, 6958389129206976447))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(50, 6958389129206976447),
      name: 'PrinterSetting',
      lastPropertyId: const IdUid(9, 8475927174911354679),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1464954564270842812),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8886785478201280793),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(52, 7591510644969197859)),
        ModelProperty(
            id: const IdUid(3, 4376376610443912972),
            name: 'printerId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7329528728056797794),
            name: 'paperSize',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5726272100837389083),
            name: 'scale',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8073980543682566905),
            name: 'imageCutterFactor',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5323087312975211054),
            name: 'cutterCommandCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3327368393457673716),
            name: 'autoPrint',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8475927174911354679),
            name: 'numberOfCopy',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(51, 3436287328908230154),
      name: 'Product1',
      lastPropertyId: const IdUid(54, 222471127620638719),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5959883901606636279),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4179513781230886169),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(53, 7770115446206012775)),
        ModelProperty(
            id: const IdUid(3, 6190898850209293137),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9174393277412088745),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3391185270887228400),
            name: 'sku',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2806292945380027921),
            name: 'barcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6729976233626492420),
            name: 'productTypeId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1018925174753957801),
            name: 'costType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5922598275460838341),
            name: 'priceType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4421821159104142748),
            name: 'salesMethod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6426261287307703971),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4386935416059513400),
            name: 'cost',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7355668888636466434),
            name: 'preparationTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8315243830918601360),
            name: 'activeQRScan',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 7025916821979561480),
            name: 'qrScanOnSameDate',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2596891899912030824),
            name: 'enableSalesDiscount',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 5998814747252975800),
            name: 'discountPercentageLimit',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4943242219602909304),
            name: 'enableFreeQuantity',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 3877267419720552882),
            name: 'enableDateExpire',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 5885451635802259793),
            name: 'enableIMEISerial',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 2189680245763260923),
            name: 'enableWeights',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 441397031612559685),
            name: 'scanPriceFromScale',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 1780476355291107418),
            name: 'scalePriceIncludeTax',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 2617438646228728594),
            name: 'independentPrinting',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 2424141731540661434),
            name: 'calculateQuantityFromTotalPrice',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 5176724133205943321),
            name: 'reservationRequired',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 6908678766233282191),
            name: 'scaleBarcodeDigits',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 7462906982648455435),
            name: 'scaleProductCodeDigits',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 5689823000078752882),
            name: 'scaleIntDigits',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 2757889046215026511),
            name: 'scaledecimalDigits',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 4564986049422833213),
            name: 'scaleProductCodeFirstInBracode',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 6831094496083019717),
            name: 'availableStartDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 7954803283400228551),
            name: 'availableEndDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 2117032676857456661),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 7111055760434990623),
            name: 'fDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 5336919385205538664),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 6836303900372033601),
            name: 'calories',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 1128678750593671664),
            name: 'minimumLevel',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 3568614162932379636),
            name: 'maximumLevel',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 5258013670645307284),
            name: 'departmentId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(44, 7594831979987409372),
            name: 'active',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(45, 764695998327958584),
            name: 'taxGroupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(47, 1712186461770443171),
            name: 'productNature',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(48, 6763463662482141307),
            name: 'subName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(49, 3338917653972285048),
            name: 'fSubName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(50, 2651132855034866580),
            name: 'promotionalName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(51, 100264527180142068),
            name: 'fPromotionalName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(52, 8538295640722948099),
            name: 'tags',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(53, 758094541451011196),
            name: 'fTags',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(54, 222471127620638719),
            name: 'categoryId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(25, 1895654721279898454),
            name: 'units',
            targetId: const IdUid(69, 5171977170734367277)),
        ModelRelation(
            id: const IdUid(26, 7530004091388838841),
            name: 'modifiers',
            targetId: const IdUid(39, 8880238065986016317)),
        ModelRelation(
            id: const IdUid(27, 875912584398062074),
            name: 'ingredients',
            targetId: const IdUid(30, 1946161431984400074)),
        ModelRelation(
            id: const IdUid(28, 1636140196144545316),
            name: 'groups',
            targetId: const IdUid(29, 4302084875799726187))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(52, 1665209810466480566),
      name: 'ProductPriceList',
      lastPropertyId: const IdUid(3, 3323951008373277809),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3961115160140739851),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 127044143112920714),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(54, 7474802606955570177)),
        ModelProperty(
            id: const IdUid(3, 3323951008373277809),
            name: 'price',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(53, 1192117303089953199),
      name: 'Promotion',
      lastPropertyId: const IdUid(22, 5448947627576109087),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1001291459541313557),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6693704899000360187),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(55, 924019261724847213)),
        ModelProperty(
            id: const IdUid(3, 4123801665310263490),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8760727575522849504),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6688766246919579129),
            name: 'startDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9207295894669837259),
            name: 'endDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1668792616247527587),
            name: 'startTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1732862221346517381),
            name: 'endTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2201280556300919070),
            name: 'promotionType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4038908412405725776),
            name: 'discountType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4908145888976419005),
            name: 'discountPercentage',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8147572597540472093),
            name: 'discountAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6618160551541643070),
            name: 'maximumDiscountAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 9063350212999182458),
            name: 'promotionApplyType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 7645911685047753330),
            name: 'customerQuantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1610545156944402117),
            name: 'customerAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 1989454218122032851),
            name: 'promotionApplyToType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 5439399142162711001),
            name: 'days',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 5953545489996527749),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 687226678863646066),
            name: 'purchaseProducts',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 3516911069348814592),
            name: 'discountProducts',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 5448947627576109087),
            name: 'priority',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(54, 7565908731918337193),
      name: 'ReasonsCanceling',
      lastPropertyId: const IdUid(6, 2268660327666439911),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8695217909493072251),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3795108978276543501),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(56, 8103419238679391732)),
        ModelProperty(
            id: const IdUid(5, 7784703149602395556),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2268660327666439911),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(55, 7038777211793473026),
      name: 'ReasonsDrawerOpen',
      lastPropertyId: const IdUid(6, 3325440672841547592),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 161030345335743641),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2654934573023938189),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(57, 3259341555593638779)),
        ModelProperty(
            id: const IdUid(5, 5309790437832960905),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3325440672841547592),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(56, 3425473344700169946),
      name: 'ResturantSection',
      lastPropertyId: const IdUid(4, 3929348163259280263),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3496517376465373282),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3177584659389558387),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(58, 7100849852434561457)),
        ModelProperty(
            id: const IdUid(3, 6221310067640329839),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3929348163259280263),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(29, 4260870852213419400),
            name: 'tables',
            targetId: const IdUid(60, 4478156776341336562))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(57, 5605412999180932790),
      name: 'Roles',
      lastPropertyId: const IdUid(4, 6818567995410541384),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3619836363349824664),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6068154571007310578),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5550191231103012423),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6818567995410541384),
            name: 'claims',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(58, 240884989231455825),
      name: 'Shift',
      lastPropertyId: const IdUid(12, 6916811164920587690),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5742719540044169855),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3488615324517540735),
            name: 'shiftId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2944842891881672385),
            name: 'reference',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 261185611238411696),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7128241072358275637),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8899824221876702276),
            name: 'branchName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1856179441566253504),
            name: 'clockedInDateAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2161675812405880773),
            name: 'clockedInTimeAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5950017012140942588),
            name: 'clockedOutDateAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7084147119323331296),
            name: 'clockedOutTimeAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6910219106099992686),
            name: 'isClockedOut',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6916811164920587690),
            name: 'isSync',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(59, 4771539298241725266),
      name: 'Slaps',
      lastPropertyId: const IdUid(5, 1271055924339393206),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3567433506053095466),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1407304857095490054),
            name: 'from',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1851822035512768943),
            name: 'to',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7928911648509931821),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1271055924339393206),
            name: 'timeEventId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(60, 4478156776341336562),
      name: 'Table',
      lastPropertyId: const IdUid(10, 7711454613870143232),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2993743867876596044),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3601682042471919640),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(59, 3692774853464084388)),
        ModelProperty(
            id: const IdUid(3, 8539918089894624246),
            name: 'tableNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6329086475666718405),
            name: 'tableCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4058624231407415680),
            name: 'numberOfIndividuals',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6071801630234680315),
            name: 'minumumReservationPrice',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3328065245865167218),
            name: 'status',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6277131441956651994),
            name: 'shape',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3888911560712544723),
            name: 'offsetX',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7711454613870143232),
            name: 'offsetY',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(61, 6261979270255138727),
      name: 'TaxC',
      lastPropertyId: const IdUid(13, 8904944159486440059),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4945619338884842135),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1932883620943416689),
            name: 'taxName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1432422844476846105),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(60, 5990597986656417238)),
        ModelProperty(
            id: const IdUid(6, 3473707358624726243),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 220656931986967709),
            name: 'exceptCustomers',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3772377597789029507),
            name: 'taxPercentage',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7811853815903732099),
            name: 'customerTaxable',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3230042062980151755),
            name: 'taxCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 152239876656749225),
            name: 'taxAccount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3117842554278657491),
            name: 'isTaxExempt',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8904944159486440059),
            name: 'zeroTax',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(62, 8384809355547207935),
      name: 'TaxGroup',
      lastPropertyId: const IdUid(6, 9066162819513457170),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8897051789121932201),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8413183936538335494),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(61, 3216750843698079235)),
        ModelProperty(
            id: const IdUid(4, 4087328257360980731),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1607767325157796346),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9066162819513457170),
            name: 'types',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(63, 2482279769421815971),
      name: 'TaxInfo',
      lastPropertyId: const IdUid(3, 4568777926739410177),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8940265672361023289),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8588209684658093893),
            name: 'taxGroupId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(64, 2142650961907557537),
      name: 'TaxSetting',
      lastPropertyId: const IdUid(5, 294792871595764243),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 330030417657892749),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7034896995774148818),
            name: 'enableSalesTax',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8981158902731261881),
            name: 'salesPriceIncludeTax',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2695638749642362957),
            name: 'enableCustomerSupplierTax',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 294792871595764243),
            name: 'taxRoundFactor',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(65, 5391400725822009527),
      name: 'Tenants',
      lastPropertyId: const IdUid(3, 2818793151409254406),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1928142438313513872),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6444614210332537195),
            name: 'tenantId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2818793151409254406),
            name: 'tenantName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(66, 6229261562351144717),
      name: 'ThrowbackInfo',
      lastPropertyId: const IdUid(5, 4149214896738423318),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7497352689588177118),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5915538716988935297),
            name: 'productRef',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2771473968114476416),
            name: 'quantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2646582652783681075),
            name: 'isWaste',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4149214896738423318),
            name: 'ref',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(67, 7482458895232455687),
      name: 'TimeEvent',
      lastPropertyId: const IdUid(18, 4916062098186945238),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8390344130691107209),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1722302629614277071),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(62, 2996889584673997566)),
        ModelProperty(
            id: const IdUid(3, 3910453739326433122),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6405264409901217061),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4158379435360238153),
            name: 'timeEventType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 337363803065088645),
            name: 'timeEventValue',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5916895529651486326),
            name: 'startDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 369951078637501291),
            name: 'endDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6901141315976771912),
            name: 'startTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2996332074564071962),
            name: 'endTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 991588427909590137),
            name: 'days',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2072521342612688882),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 9181695925708483234),
            name: 'products',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8304475389594144472),
            name: 'customers',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 4468636750115032780),
            name: 'departments',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3360468198031938082),
            name: 'priority',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 4916062098186945238),
            name: 'categories',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(68, 5593309476488169220),
      name: 'Transaction',
      lastPropertyId: const IdUid(7, 8405825375084523652),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2792079141217042820),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2775452570281238585),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 643255814350295341),
            name: 'refId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8695925285795703696),
            name: 'toAcount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3291384689989687584),
            name: 'amt',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6808348259070141398),
            name: 'createBy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8405825375084523652),
            name: 'date',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(69, 5171977170734367277),
      name: 'Unit',
      lastPropertyId: const IdUid(11, 5873929480583719701),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8119367881202619868),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9215428167917368944),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2150143670657080945),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3285005725493934091),
            name: 'fname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6069627766868321501),
            name: 'barcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3988749108953964272),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8047328702049570060),
            name: 'cost',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2844495575385988189),
            name: 'factor',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4056215992678686609),
            name: 'defaultForSales',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 609747535792686405),
            name: 'defaultForPurchase',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5873929480583719701),
            name: 'defaultForStore',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(30, 6499708307090864389),
            name: 'priceList',
            targetId: const IdUid(48, 2476280557417458459)),
        ModelRelation(
            id: const IdUid(31, 2517967494233674647),
            name: 'modifiers',
            targetId: const IdUid(70, 8107695718886640914))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(70, 8107695718886640914),
      name: 'UnitModifer',
      lastPropertyId: const IdUid(10, 3408040281191180734),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2016991055823631518),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4303403557323166257),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8020088159672402932),
            name: 'minimumOptions',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7895616178096599105),
            name: 'maximumOptions',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5956636239243548093),
            name: 'isUnique',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7051800823824279492),
            name: 'isRequired',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7652788679891961591),
            name: 'defulatOptions',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3614208022987464090),
            name: 'exceptOptions',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7227451081855942250),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3408040281191180734),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(32, 4921466421590884784),
            name: 'freeOptions',
            targetId: const IdUid(28, 3830429392928909783)),
        ModelRelation(
            id: const IdUid(33, 4107863906596447958),
            name: 'options',
            targetId: const IdUid(40, 7807952511707511233))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(71, 2915623585353258909),
      name: 'UserBranche',
      lastPropertyId: const IdUid(3, 829592372133970078),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4305598382689461404),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5209680737633175098),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 829592372133970078),
            name: 'groups',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(72, 9172184693182140348),
      name: 'ViewSettings',
      lastPropertyId: const IdUid(1, 8607212185719011602),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8607212185719011602),
            name: 'idSeq',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(73, 5732694837876564406),
      name: 'Device',
      lastPropertyId: const IdUid(32, 194044030511006838),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6590835211904606966),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4975477742850545228),
            name: 'deviceId',
            type: 9,
            flags: 34848,
            indexId: const IdUid(64, 4935156666889829870)),
        ModelProperty(
            id: const IdUid(3, 7894148770745929057),
            name: 'deviceTypeId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3625919142437163204),
            name: 'deviceModelId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8018119738678783063),
            name: 'deviceTypeCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 126637404528181665),
            name: 'masterDeviceNo',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1833234930132344140),
            name: 'reference',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1783395075230785422),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8475326396472716348),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8408209611114585989),
            name: 'enableOnlineOrderReceiver',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2772277181233836850),
            name: 'model',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3886550191125178869),
            name: 'systemVersion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1773737049664492331),
            name: 'appVersion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3421540365406565872),
            name: 'build',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2203966928221792204),
            name: 'latitude',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 8269786675918751485),
            name: 'longitude',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 5785035116809514883),
            name: 'connectionIPAddress',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 515240034429915317),
            name: 'connectionPort',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 219854880061902003),
            name: 'connectionType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 9069724866347946688),
            name: 'imei',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4855535027984214994),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 3134449183797319972),
            name: 'refrencePrefix',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 6294905239330286210),
            name: 'infoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(65, 5368743337544407997),
            relationTarget: 'ActivationInfo'),
        ModelProperty(
            id: const IdUid(29, 5333464891015213479),
            name: 'settingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(66, 8652764828491005881),
            relationTarget: 'DeviceSetting'),
        ModelProperty(
            id: const IdUid(30, 9077972668992988509),
            name: 'products',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 4567478158758734108),
            name: 'categories',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 194044030511006838),
            name: 'departments',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(74, 6596508540814679311),
      name: 'DeviceSetting',
      lastPropertyId: const IdUid(23, 5487508097427822662),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5347038999090925540),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5026802214215843779),
            name: 'dailyStartCallNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7736462651178124290),
            name: 'dailyReCallNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5734132131747129741),
            name: 'newOrderDefaultType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3164153388363662656),
            name: 'printLanguage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7076080358244859834),
            name: 'defaultTag',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2749403725325869622),
            name: 'emailForDailyReport',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4610963386226039462),
            name: 'emailForShiftReport',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1998277306526421848),
            name: 'emailForTillReport',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7194875223149074534),
            name: 'autoConnectToDevices',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8016466025668294861),
            name: 'enableBarcodeScanner',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1996105701404205288),
            name: 'acceptOnlineOrders',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3954185959875298615),
            name: 'sentOnlineOrdersToKitchen',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7307621957981524757),
            name: 'printOnlineOrdersUponReceipt',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5199917900711190937),
            name: 'disableAutoPrintInvoice',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1984534526562881147),
            name: 'readCallNumberFromMasterCasher',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3608935888017707527),
            name: 'printReceiptVoucherTransactions',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 7822357482001742350),
            name: 'forceSelectPriceList',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 370178490900223959),
            name: 'forceSelectChareOnProductSale',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 4709649891064277034),
            name: 'forceRestCallNumberEveryDay',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 3307197131305326868),
            name: 'invoiceNumberPerfixSymoble',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 1543384574918568552),
            name: 'invoiceNumberPerfix',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 5487508097427822662),
            name: 'refrencePerfix',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(75, 2782294974850979651),
      name: 'Department1',
      lastPropertyId: const IdUid(6, 2090897174084887650),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4334724325105197678),
            name: 'idSeq',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2000425035703051241),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(67, 3345022087883648230)),
        ModelProperty(
            id: const IdUid(3, 4520729823019400084),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2350733754701384500),
            name: 'fName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5261293774825466511),
            name: 'displayOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2090897174084887650),
            name: 'imageUrl',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(34, 7441175689797282658),
            name: 'categories',
            targetId: const IdUid(12, 7565412035557934887))
      ],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(75, 2782294974850979651),
      lastIndexId: const IdUid(68, 6866350827838828309),
      lastRelationId: const IdUid(34, 7441175689797282658),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [7273468570797046883, 1963160694264951781],
      retiredIndexUids: const [30779303144421816, 2880034785088343185],
      retiredPropertyUids: const [
        158992367589605978,
        5823945842571445882,
        890940908677331227,
        4909778209994347428,
        5682051082800257416,
        2803819789182553250,
        7436986177032982778,
        7923795784740620668,
        8291463056592158150,
        4619316850004934945,
        7122730253518616101,
        1885869896237240656,
        4894247679733776454,
        6706592712935017049,
        2643178219821849903,
        1638066642809072425,
        5615694077391446653,
        3997568829928468392,
        4333311014770259072,
        4750564389684380108,
        5048643818830764094,
        5272048155640047518,
        7367394247582544049,
        3560633949562462585,
        8586403305172984462,
        2353681268121197719,
        7178133700536726242,
        867561356723875968,
        3268200190376524411,
        538911045570084215,
        2273591548794878580,
        8751626542631780522,
        7622243575734803385,
        1571409960300794562,
        5799762733678701768,
        5527157200076568946,
        7885569572779893217,
        6164659320868999985,
        2504001348693771250,
        6460663253628514050,
        1580421711576706441,
        3593079303638436581,
        6167999601154743561,
        6940753514455854291,
        5656031542376272530,
        8031957185179222454,
        5692316030376553453,
        547730666646307727,
        9026465523463854337,
        342154137354674601,
        7951483995192346719,
        5822429325917054334,
        5689363329612133441,
        4636595808337637465,
        6256120702787146976,
        2776963368338200610,
        4879404676627586625,
        604887376695775630,
        4820400503198358915,
        7124730156485353616,
        5398867968984670500,
        7273480477834911976,
        8511778438124456785,
        3793204752499057581,
        2598715476358162885,
        7324252707889820834,
        2933564964777044160,
        3035428722721762598,
        7611180463870381990,
        4366636891236875509,
        4568777926739410177
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ActivationInfo: EntityDefinition<ActivationInfo>(
        model: _entities[0],
        toOneRelations: (ActivationInfo object) => [],
        toManyRelations: (ActivationInfo object) => {
              RelInfo<Device>.toOneBacklink(
                      28, object.id!, (Device srcObject) => srcObject.info):
                  object.allDevices
            },
        getId: (ActivationInfo object) => object.id,
        setId: (ActivationInfo object, int id) {
          object.id = id;
        },
        objectToFB: (ActivationInfo object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final taxRegNameOffset = object.taxRegName == null
              ? null
              : fbb.writeString(object.taxRegName!);
          final fTaxRegNameOffset = object.fTaxRegName == null
              ? null
              : fbb.writeString(object.fTaxRegName!);
          final taxCodeOffset =
              object.taxCode == null ? null : fbb.writeString(object.taxCode!);
          final onlineOrderStartTimeOffset = object.onlineOrderStartTime == null
              ? null
              : fbb.writeString(object.onlineOrderStartTime!);
          final onlineOrderEndTimeOffset = object.onlineOrderEndTime == null
              ? null
              : fbb.writeString(object.onlineOrderEndTime!);
          final branchPrefixOffset = object.branchPrefix == null
              ? null
              : fbb.writeString(object.branchPrefix!);
          final customerServiceOffset = object.customerService == null
              ? null
              : fbb.writeString(object.customerService!);
          final countryIdOffset = object.countryId == null
              ? null
              : fbb.writeString(object.countryId!);
          final cityIdOffset =
              object.cityId == null ? null : fbb.writeString(object.cityId!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final latitudeOffset = object.latitude == null
              ? null
              : fbb.writeString(object.latitude!);
          final longitudeOffset = object.longitude == null
              ? null
              : fbb.writeString(object.longitude!);
          final headerInvoiceMsgOffset = object.headerInvoiceMsg == null
              ? null
              : fbb.writeString(object.headerInvoiceMsg!);
          final footerInvoiceMsgOffset = object.footerInvoiceMsg == null
              ? null
              : fbb.writeString(object.footerInvoiceMsg!);
          fbb.startTable(22);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, fNameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, mobileOffset);
          fbb.addOffset(6, taxRegNameOffset);
          fbb.addOffset(7, fTaxRegNameOffset);
          fbb.addOffset(8, taxCodeOffset);
          fbb.addOffset(9, onlineOrderStartTimeOffset);
          fbb.addOffset(10, onlineOrderEndTimeOffset);
          fbb.addOffset(11, branchPrefixOffset);
          fbb.addOffset(12, customerServiceOffset);
          fbb.addOffset(13, countryIdOffset);
          fbb.addOffset(14, cityIdOffset);
          fbb.addOffset(15, addressOffset);
          fbb.addOffset(16, latitudeOffset);
          fbb.addOffset(17, longitudeOffset);
          fbb.addOffset(18, headerInvoiceMsgOffset);
          fbb.addOffset(19, footerInvoiceMsgOffset);
          fbb.addBool(20, object.receiveOnlineOrders);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final taxRegNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final fTaxRegNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final taxCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final onlineOrderStartTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final onlineOrderEndTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final branchPrefixParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final customerServiceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final countryIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final cityIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final latitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final longitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final headerInvoiceMsgParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 40);
          final footerInvoiceMsgParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 42);
          final receiveOnlineOrdersParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44);
          final object = ActivationInfo(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              email: emailParam,
              phone: phoneParam,
              mobile: mobileParam,
              taxRegName: taxRegNameParam,
              fTaxRegName: fTaxRegNameParam,
              taxCode: taxCodeParam,
              onlineOrderStartTime: onlineOrderStartTimeParam,
              onlineOrderEndTime: onlineOrderEndTimeParam,
              branchPrefix: branchPrefixParam,
              customerService: customerServiceParam,
              countryId: countryIdParam,
              cityId: cityIdParam,
              address: addressParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              headerInvoiceMsg: headerInvoiceMsgParam,
              footerInvoiceMsg: footerInvoiceMsgParam,
              receiveOnlineOrders: receiveOnlineOrdersParam);
          InternalToManyAccess.setRelInfo<ActivationInfo>(
              object.allDevices,
              store,
              RelInfo<Device>.toOneBacklink(
                  28, object.id!, (Device srcObject) => srcObject.info));
          return object;
        }),
    Address: EntityDefinition<Address>(
        model: _entities[1],
        toOneRelations: (Address object) => [],
        toManyRelations: (Address object) => {},
        getId: (Address object) => object.idSeq,
        setId: (Address object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Address object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final addressTypeIdOffset = object.addressTypeId == null
              ? null
              : fbb.writeString(object.addressTypeId!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final deliveryZoneIdOffset = object.deliveryZoneId == null
              ? null
              : fbb.writeString(object.deliveryZoneId!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final mainStreetOffset = object.mainStreet == null
              ? null
              : fbb.writeString(object.mainStreet!);
          final byStreetOffset = object.byStreet == null
              ? null
              : fbb.writeString(object.byStreet!);
          final buildingNoOffset = object.buildingNo == null
              ? null
              : fbb.writeString(object.buildingNo!);
          final floorOffset =
              object.floor == null ? null : fbb.writeString(object.floor!);
          final apartmentNoOffset = object.apartmentNo == null
              ? null
              : fbb.writeString(object.apartmentNo!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final popularPlaceOffset = object.popularPlace == null
              ? null
              : fbb.writeString(object.popularPlace!);
          final zipCodeOffset =
              object.zipCode == null ? null : fbb.writeString(object.zipCode!);
          fbb.startTable(18);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, addressTypeIdOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, fNameOffset);
          fbb.addFloat64(5, object.latitude);
          fbb.addFloat64(6, object.longitude);
          fbb.addOffset(7, deliveryZoneIdOffset);
          fbb.addOffset(8, descriptionOffset);
          fbb.addOffset(9, mainStreetOffset);
          fbb.addOffset(10, byStreetOffset);
          fbb.addOffset(11, buildingNoOffset);
          fbb.addOffset(12, floorOffset);
          fbb.addOffset(13, apartmentNoOffset);
          fbb.addOffset(14, phoneOffset);
          fbb.addOffset(15, popularPlaceOffset);
          fbb.addOffset(16, zipCodeOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final addressTypeIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final latitudeParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final longitudeParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final deliveryZoneIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final mainStreetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final byStreetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final buildingNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final floorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final apartmentNoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final popularPlaceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34);
          final zipCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final object = Address(
              idSeq: idSeqParam,
              id: idParam,
              addressTypeId: addressTypeIdParam,
              name: nameParam,
              fName: fNameParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              deliveryZoneId: deliveryZoneIdParam,
              description: descriptionParam,
              mainStreet: mainStreetParam,
              byStreet: byStreetParam,
              buildingNo: buildingNoParam,
              floor: floorParam,
              apartmentNo: apartmentNoParam,
              phone: phoneParam,
              popularPlace: popularPlaceParam,
              zipCode: zipCodeParam);

          return object;
        }),
    AppliedModifer: EntityDefinition<AppliedModifer>(
        model: _entities[2],
        toOneRelations: (AppliedModifer object) => [object.modifier],
        toManyRelations: (AppliedModifer object) =>
            {RelInfo<AppliedModifer>.toMany(1, object.idSeq!): object.options},
        getId: (AppliedModifer object) => object.idSeq,
        setId: (AppliedModifer object, int id) {
          object.idSeq = id;
        },
        objectToFB: (AppliedModifer object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addInt64(1, object.modifier.targetId);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppliedModifer()
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.modifier.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.modifier.attach(store);
          InternalToManyAccess.setRelInfo<AppliedModifer>(object.options, store,
              RelInfo<AppliedModifer>.toMany(1, object.idSeq!));
          return object;
        }),
    AppliedOption: EntityDefinition<AppliedOption>(
        model: _entities[3],
        toOneRelations: (AppliedOption object) =>
            [object.option, object.taxInfo],
        toManyRelations: (AppliedOption object) => {},
        getId: (AppliedOption object) => object.idSeq,
        setId: (AppliedOption object, int id) {
          object.idSeq = id;
        },
        objectToFB: (AppliedOption object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addFloat64(1, object.quntity);
          fbb.addFloat64(2, object.freeQuntity);
          fbb.addBool(3, object.priceWithTax);
          fbb.addInt64(4, object.option.targetId);
          fbb.addInt64(5, object.taxInfo.targetId);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final quntityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final freeQuntityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = AppliedOption(
              quntity: quntityParam, freeQuntity: freeQuntityParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..priceWithTax =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          object.option.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.option.attach(store);
          object.taxInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.taxInfo.attach(store);
          return object;
        }),
    AppliedProduct: EntityDefinition<AppliedProduct>(
        model: _entities[4],
        toOneRelations: (AppliedProduct object) => [
              object.product,
              object.unit,
              object.event,
              object.discount,
              object.promotion,
              object.taxInfo,
              object.throwbackInfo
            ],
        toManyRelations: (AppliedProduct object) => {
              RelInfo<AppliedProduct>.toMany(2, object.idSeq!):
                  object.appliedModifer
            },
        getId: (AppliedProduct object) => object.idSeq,
        setId: (AppliedProduct object, int id) {
          object.idSeq = id;
        },
        objectToFB: (AppliedProduct object, fb.Builder fbb) {
          final prodRefOffset = fbb.writeString(object.prodRef);
          final msgCanselOffset = object.msgCansel == null
              ? null
              : fbb.writeString(object.msgCansel!);
          final giftCardCodeOffset = object.giftCardCode == null
              ? null
              : fbb.writeString(object.giftCardCode!);
          final noteOffset =
              object.note == null ? null : fbb.writeString(object.note!);
          fbb.startTable(23);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addInt64(1, object.product.targetId);
          fbb.addInt64(2, object.unit.targetId);
          fbb.addFloat64(3, object.quantity);
          fbb.addOffset(4, prodRefOffset);
          fbb.addBool(5, object.priceWithTax);
          fbb.addBool(6, object.isCansel);
          fbb.addOffset(7, msgCanselOffset);
          fbb.addInt64(8, object.priceLevel);
          fbb.addInt64(9, object.event.targetId);
          fbb.addInt64(10, object.discount.targetId);
          fbb.addInt64(11, object.promotion.targetId);
          fbb.addInt64(12, object.taxInfo.targetId);
          fbb.addInt64(13, object.throwbackInfo.targetId);
          fbb.addOffset(14, giftCardCodeOffset);
          fbb.addFloat64(15, object.price);
          fbb.addFloat64(16, object.optionPrice);
          fbb.addFloat64(17, object.priceDiscount);
          fbb.addFloat64(18, object.pricePromotion);
          fbb.addFloat64(19, object.taxPrice);
          fbb.addFloat64(20, object.freeQuntity);
          fbb.addOffset(21, noteOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final prodRefParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final isCanselParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final msgCanselParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final noteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 46);
          final optionPriceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 36);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 34);
          final priceDiscountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 38);
          final priceLevelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final pricePromotionParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 40);
          final priceWithTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final taxPriceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 42);
          final giftCardCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final freeQuntityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 44);
          final object = AppliedProduct(
              quantity: quantityParam,
              prodRef: prodRefParam,
              isCansel: isCanselParam,
              msgCansel: msgCanselParam,
              note: noteParam,
              optionPrice: optionPriceParam,
              price: priceParam,
              priceDiscount: priceDiscountParam,
              priceLevel: priceLevelParam,
              pricePromotion: pricePromotionParam,
              priceWithTax: priceWithTaxParam,
              taxPrice: taxPriceParam,
              giftCardCode: giftCardCodeParam,
              freeQuntity: freeQuntityParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.product.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.product.attach(store);
          object.unit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.unit.attach(store);
          object.event.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.event.attach(store);
          object.discount.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.discount.attach(store);
          object.promotion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.promotion.attach(store);
          object.taxInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.taxInfo.attach(store);
          object.throwbackInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.throwbackInfo.attach(store);
          InternalToManyAccess.setRelInfo<AppliedProduct>(object.appliedModifer,
              store, RelInfo<AppliedProduct>.toMany(2, object.idSeq!));
          return object;
        }),
    BillCopyHistory: EntityDefinition<BillCopyHistory>(
        model: _entities[5],
        toOneRelations: (BillCopyHistory object) => [],
        toManyRelations: (BillCopyHistory object) => {},
        getId: (BillCopyHistory object) => object.id,
        setId: (BillCopyHistory object, int id) {
          object.id = id;
        },
        objectToFB: (BillCopyHistory object, fb.Builder fbb) {
          final billRefOffset =
              object.billRef == null ? null : fbb.writeString(object.billRef!);
          final billNoOffset =
              object.billNo == null ? null : fbb.writeString(object.billNo!);
          final billeDateOffset = object.billeDate == null
              ? null
              : fbb.writeString(object.billeDate!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, billRefOffset);
          fbb.addOffset(2, billNoOffset);
          fbb.addOffset(3, billeDateOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final billRefParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final billeDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final billNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = BillCopyHistory(
              id: idParam,
              billRef: billRefParam,
              billeDate: billeDateParam,
              billNo: billNoParam);

          return object;
        }),
    BillCounter: EntityDefinition<BillCounter>(
        model: _entities[6],
        toOneRelations: (BillCounter object) => [],
        toManyRelations: (BillCounter object) => {
              RelInfo<BillCounter>.toMany(3, object.id!): object.billCopyHistory
            },
        getId: (BillCounter object) => object.id,
        setId: (BillCounter object, int id) {
          object.id = id;
        },
        objectToFB: (BillCounter object, fb.Builder fbb) {
          final dateTimeOpenOnOffset = object.dateTimeOpenOn == null
              ? null
              : fbb.writeString(object.dateTimeOpenOn!);
          final dateTimeCloseOnOffset = object.dateTimeCloseOn == null
              ? null
              : fbb.writeString(object.dateTimeCloseOn!);
          final billPerfexOffset = object.billPerfex == null
              ? null
              : fbb.writeString(object.billPerfex!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, dateTimeOpenOnOffset);
          fbb.addOffset(2, dateTimeCloseOnOffset);
          fbb.addBool(3, object.isClosed);
          fbb.addInt64(4, object.curentCounter);
          fbb.addOffset(5, billPerfexOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final dateTimeOpenOnParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6);
          final dateTimeCloseOnParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final isClosedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final curentCounterParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final billPerfexParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = BillCounter(
              id: idParam,
              dateTimeOpenOn: dateTimeOpenOnParam,
              dateTimeCloseOn: dateTimeCloseOnParam,
              isClosed: isClosedParam,
              curentCounter: curentCounterParam,
              billPerfex: billPerfexParam);
          InternalToManyAccess.setRelInfo<BillCounter>(object.billCopyHistory,
              store, RelInfo<BillCounter>.toMany(3, object.id!));
          return object;
        }),
    BillSetting: EntityDefinition<BillSetting>(
        model: _entities[7],
        toOneRelations: (BillSetting object) => [object.logoData],
        toManyRelations: (BillSetting object) => {},
        getId: (BillSetting object) => object.id,
        setId: (BillSetting object, int id) {
          object.id = id;
        },
        objectToFB: (BillSetting object, fb.Builder fbb) {
          final logoUrlOffset =
              object.logoUrl == null ? null : fbb.writeString(object.logoUrl!);
          final companyNameOffset = object.companyName == null
              ? null
              : fbb.writeString(object.companyName!);
          final fCompanyNameOffset = object.fCompanyName == null
              ? null
              : fbb.writeString(object.fCompanyName!);
          final taxNoOffset =
              object.taxNo == null ? null : fbb.writeString(object.taxNo!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final fAddressOffset = object.fAddress == null
              ? null
              : fbb.writeString(object.fAddress!);
          final headerInvoiceMessageOffset = object.headerInvoiceMessage == null
              ? null
              : fbb.writeString(object.headerInvoiceMessage!);
          final fHeaderInvoiceMessageOffset =
              object.fHeaderInvoiceMessage == null
                  ? null
                  : fbb.writeString(object.fHeaderInvoiceMessage!);
          final footerInvoiceMessageOffset = object.footerInvoiceMessage == null
              ? null
              : fbb.writeString(object.footerInvoiceMessage!);
          final fFooterInvoiceMessageOffset =
              object.fFooterInvoiceMessage == null
                  ? null
                  : fbb.writeString(object.fFooterInvoiceMessage!);
          final invoiceTemplateOffset = object.invoiceTemplate == null
              ? null
              : fbb.writeString(object.invoiceTemplate!);
          final refundTemplateOffset = object.refundTemplate == null
              ? null
              : fbb.writeString(object.refundTemplate!);
          final printlanguageOffset = object.printlanguage == null
              ? null
              : fbb.writeString(object.printlanguage!);
          final defaultLanguageOffset = object.defaultLanguage == null
              ? null
              : fbb.writeString(object.defaultLanguage!);
          final secondLanguageOffset = object.secondLanguage == null
              ? null
              : fbb.writeString(object.secondLanguage!);
          final invoiceTitleOffset = object.invoiceTitle == null
              ? null
              : fbb.writeString(object.invoiceTitle!);
          final fInvoiceTitleOffset = object.fInvoiceTitle == null
              ? null
              : fbb.writeString(object.fInvoiceTitle!);
          fbb.startTable(42);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, logoUrlOffset);
          fbb.addOffset(2, companyNameOffset);
          fbb.addOffset(3, fCompanyNameOffset);
          fbb.addOffset(4, taxNoOffset);
          fbb.addOffset(5, phoneNumberOffset);
          fbb.addOffset(6, addressOffset);
          fbb.addOffset(7, fAddressOffset);
          fbb.addOffset(8, headerInvoiceMessageOffset);
          fbb.addOffset(9, fHeaderInvoiceMessageOffset);
          fbb.addOffset(10, footerInvoiceMessageOffset);
          fbb.addOffset(11, fFooterInvoiceMessageOffset);
          fbb.addInt64(12, object.invoiceRoundFactor);
          fbb.addBool(13, object.enablePrintBundleProductChildren);
          fbb.addBool(14, object.printOrderNumber);
          fbb.addBool(15, object.printCalories);
          fbb.addBool(16, object.printSubTotal);
          fbb.addBool(17, object.printRoundDigit);
          fbb.addBool(18, object.printProductUnit);
          fbb.addBool(19, object.printProductUnitPrice);
          fbb.addBool(20, object.printProductTotalPrice);
          fbb.addBool(21, object.printProductDiscountPrice);
          fbb.addBool(22, object.printProductFreeQuantity);
          fbb.addBool(23, object.printProductTotalPriceBeforeTax);
          fbb.addBool(24, object.printProductTaxAmount);
          fbb.addBool(25, object.printProductTaxPercentage);
          fbb.addBool(26, object.printProductTotalPriceAfterDiscount);
          fbb.addBool(27, object.printProductTotalPriceIncludeTax);
          fbb.addBool(28, object.printOrderClosedUser);
          fbb.addBool(29, object.printOrderCreatedUser);
          fbb.addBool(30, object.printCheckNumber);
          fbb.addBool(31, object.hideFreeModifierOptions);
          fbb.addOffset(32, invoiceTemplateOffset);
          fbb.addOffset(33, refundTemplateOffset);
          fbb.addBool(34, object.autoPrintOnSave);
          fbb.addOffset(35, printlanguageOffset);
          fbb.addOffset(36, defaultLanguageOffset);
          fbb.addOffset(37, secondLanguageOffset);
          fbb.addOffset(38, invoiceTitleOffset);
          fbb.addOffset(39, fInvoiceTitleOffset);
          fbb.addInt64(40, object.logoData.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final logoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final companyNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final fCompanyNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final taxNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final phoneNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final fAddressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final headerInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final fHeaderInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final footerInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final fFooterInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final invoiceRoundFactorParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final enablePrintBundleProductChildrenParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30);
          final printOrderNumberParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final printCaloriesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final printSubTotalParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final printRoundDigitParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final printProductUnitParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final printProductUnitPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final printProductTotalPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44);
          final printProductDiscountPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 46);
          final printProductFreeQuantityParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final printProductTotalPriceBeforeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 50);
          final printProductTaxAmountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 52);
          final printProductTaxPercentageParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 54);
          final printProductTotalPriceAfterDiscountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 56);
          final printProductTotalPriceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 58);
          final printOrderClosedUserParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 60);
          final printOrderCreatedUserParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 62);
          final printCheckNumberParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 64);
          final hideFreeModifierOptionsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 66);
          final invoiceTemplateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 68);
          final refundTemplateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 70);
          final autoPrintOnSaveParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 72);
          final printlanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 74);
          final defaultLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 76);
          final secondLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 78);
          final invoiceTitleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 80);
          final fInvoiceTitleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 82);
          final object = BillSetting(
              id: idParam,
              logoUrl: logoUrlParam,
              companyName: companyNameParam,
              fCompanyName: fCompanyNameParam,
              taxNo: taxNoParam,
              phoneNumber: phoneNumberParam,
              address: addressParam,
              fAddress: fAddressParam,
              headerInvoiceMessage: headerInvoiceMessageParam,
              fHeaderInvoiceMessage: fHeaderInvoiceMessageParam,
              footerInvoiceMessage: footerInvoiceMessageParam,
              fFooterInvoiceMessage: fFooterInvoiceMessageParam,
              invoiceRoundFactor: invoiceRoundFactorParam,
              enablePrintBundleProductChildren:
                  enablePrintBundleProductChildrenParam,
              printOrderNumber: printOrderNumberParam,
              printCalories: printCaloriesParam,
              printSubTotal: printSubTotalParam,
              printRoundDigit: printRoundDigitParam,
              printProductUnit: printProductUnitParam,
              printProductUnitPrice: printProductUnitPriceParam,
              printProductTotalPrice: printProductTotalPriceParam,
              printProductDiscountPrice: printProductDiscountPriceParam,
              printProductFreeQuantity: printProductFreeQuantityParam,
              printProductTotalPriceBeforeTax:
                  printProductTotalPriceBeforeTaxParam,
              printProductTaxAmount: printProductTaxAmountParam,
              printProductTaxPercentage: printProductTaxPercentageParam,
              printProductTotalPriceAfterDiscount:
                  printProductTotalPriceAfterDiscountParam,
              printProductTotalPriceIncludeTax:
                  printProductTotalPriceIncludeTaxParam,
              printOrderClosedUser: printOrderClosedUserParam,
              printOrderCreatedUser: printOrderCreatedUserParam,
              printCheckNumber: printCheckNumberParam,
              hideFreeModifierOptions: hideFreeModifierOptionsParam,
              invoiceTemplate: invoiceTemplateParam,
              refundTemplate: refundTemplateParam,
              autoPrintOnSave: autoPrintOnSaveParam,
              printlanguage: printlanguageParam,
              defaultLanguage: defaultLanguageParam,
              secondLanguage: secondLanguageParam,
              invoiceTitle: invoiceTitleParam,
              fInvoiceTitle: fInvoiceTitleParam);
          object.logoData.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 84, 0);
          object.logoData.attach(store);
          return object;
        }),
    Branch: EntityDefinition<Branch>(
        model: _entities[8],
        toOneRelations: (Branch object) => [],
        toManyRelations: (Branch object) => {},
        getId: (Branch object) => object.idSeq,
        setId: (Branch object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Branch object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final taxRegNameOffset = object.taxRegName == null
              ? null
              : fbb.writeString(object.taxRegName!);
          final taxCodeOffset =
              object.taxCode == null ? null : fbb.writeString(object.taxCode!);
          final onlineOrderStartTimeOffset = object.onlineOrderStartTime == null
              ? null
              : fbb.writeString(object.onlineOrderStartTime!);
          final onlineOrderEndTimeOffset = object.onlineOrderEndTime == null
              ? null
              : fbb.writeString(object.onlineOrderEndTime!);
          final branchPrefixOffset = object.branchPrefix == null
              ? null
              : fbb.writeString(object.branchPrefix!);
          final customerServiceOffset = object.customerService == null
              ? null
              : fbb.writeString(object.customerService!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final headerInvoiceMsgOffset = object.headerInvoiceMsg == null
              ? null
              : fbb.writeString(object.headerInvoiceMsg!);
          final footerInvoiceMsgOffset = object.footerInvoiceMsg == null
              ? null
              : fbb.writeString(object.footerInvoiceMsg!);
          fbb.startTable(17);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, mobileOffset);
          fbb.addOffset(6, taxRegNameOffset);
          fbb.addOffset(7, taxCodeOffset);
          fbb.addOffset(8, onlineOrderStartTimeOffset);
          fbb.addOffset(9, onlineOrderEndTimeOffset);
          fbb.addOffset(10, branchPrefixOffset);
          fbb.addOffset(11, customerServiceOffset);
          fbb.addOffset(12, addressOffset);
          fbb.addOffset(13, headerInvoiceMsgOffset);
          fbb.addOffset(14, footerInvoiceMsgOffset);
          fbb.addBool(15, object.receiveOnlineOrders);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final taxRegNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final taxCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final onlineOrderStartTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final onlineOrderEndTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final branchPrefixParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final customerServiceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final headerInvoiceMsgParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final footerInvoiceMsgParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final receiveOnlineOrdersParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final object = Branch(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              email: emailParam,
              phone: phoneParam,
              mobile: mobileParam,
              taxRegName: taxRegNameParam,
              taxCode: taxCodeParam,
              onlineOrderStartTime: onlineOrderStartTimeParam,
              onlineOrderEndTime: onlineOrderEndTimeParam,
              branchPrefix: branchPrefixParam,
              customerService: customerServiceParam,
              address: addressParam,
              headerInvoiceMsg: headerInvoiceMsgParam,
              footerInvoiceMsg: footerInvoiceMsgParam,
              receiveOnlineOrders: receiveOnlineOrdersParam);

          return object;
        }),
    Branches: EntityDefinition<Branches>(
        model: _entities[9],
        toOneRelations: (Branches object) => [],
        toManyRelations: (Branches object) => {},
        getId: (Branches object) => object.id,
        setId: (Branches object, int id) {
          object.id = id;
        },
        objectToFB: (Branches object, fb.Builder fbb) {
          final tenantIdOffset = object.tenantId == null
              ? null
              : fbb.writeString(object.tenantId!);
          final branchIdOffset = object.branchId == null
              ? null
              : fbb.writeString(object.branchId!);
          final branchNameOffset = object.branchName == null
              ? null
              : fbb.writeString(object.branchName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, tenantIdOffset);
          fbb.addOffset(2, branchIdOffset);
          fbb.addOffset(3, branchNameOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final tenantIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final branchIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final branchNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Branches(
              id: idParam,
              tenantId: tenantIdParam,
              branchId: branchIdParam,
              branchName: branchNameParam);

          return object;
        }),
    CashierSetting: EntityDefinition<CashierSetting>(
        model: _entities[10],
        toOneRelations: (CashierSetting object) => [],
        toManyRelations: (CashierSetting object) => {},
        getId: (CashierSetting object) => object.idSeq,
        setId: (CashierSetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (CashierSetting object, fb.Builder fbb) {
          final defaultCustomerIdOffset = object.defaultCustomerId == null
              ? null
              : fbb.writeString(object.defaultCustomerId!);
          final priceListIdOffset = object.priceListId == null
              ? null
              : fbb.writeString(object.priceListId!);
          final roundingTypeOffset = object.roundingType == null
              ? null
              : fbb.writeString(object.roundingType!);
          final kitchenSortingTypeOffset = object.kitchenSortingType == null
              ? null
              : fbb.writeString(object.kitchenSortingType!);
          final printSortingTypeOffset = object.printSortingType == null
              ? null
              : fbb.writeString(object.printSortingType!);
          final imeiOffset =
              object.imei == null ? null : fbb.writeString(object.imei!);
          fbb.startTable(35);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addBool(1, object.enableCashSales);
          fbb.addBool(2, object.enableCreditCardSales);
          fbb.addBool(3, object.enableCustomerSales);
          fbb.addBool(4, object.enableFreeQuantity);
          fbb.addBool(5, object.enableEditItemName);
          fbb.addBool(6, object.enableSalesDiscount);
          fbb.addBool(7, object.enableChangePrice);
          fbb.addBool(8, object.enableProductPackages);
          fbb.addBool(9, object.enableTablesSystem);
          fbb.addBool(10, object.tableGuestCountRequired);
          fbb.addBool(11, object.tableRequired);
          fbb.addFloat64(12, object.discountPercentageLimit);
          fbb.addOffset(13, defaultCustomerIdOffset);
          fbb.addOffset(14, priceListIdOffset);
          fbb.addBool(15, object.daily);
          fbb.addBool(16, object.submittingRequestsDelayMinutes);
          fbb.addBool(17, object.inactiveUsersLogoutMinutes);
          fbb.addBool(18, object.maximumReturnPeriodMinutes);
          fbb.addBool(19, object.requireOrderTypesForOrders);
          fbb.addOffset(20, roundingTypeOffset);
          fbb.addFloat64(21, object.roundDigits);
          fbb.addOffset(22, kitchenSortingTypeOffset);
          fbb.addOffset(23, printSortingTypeOffset);
          fbb.addBool(24, object.activeTips);
          fbb.addBool(25, object.discountRequireCustomerInfo);
          fbb.addBool(26, object.returnRequireCustomerInfo);
          fbb.addBool(27, object.requireCancelReason);
          fbb.addBool(28, object.autoSentOrderToKitchenAfterPaid);
          fbb.addBool(29, object.autoSyncDataAtStartOfDay);
          fbb.addBool(30, object.autoPrintProductsReport);
          fbb.addBool(31, object.autoPrintTillsReport);
          fbb.addBool(32, object.preventEndingDayBeforeInventoryCount);
          fbb.addOffset(33, imeiOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final enableCashSalesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final enableCreditCardSalesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8);
          final enableCustomerSalesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final enableFreeQuantityParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12);
          final enableEditItemNameParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final enableSalesDiscountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final enableChangePriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final enableProductPackagesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final enableTablesSystemParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final tableGuestCountRequiredParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final tableRequiredParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final discountPercentageLimitParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 28);
          final defaultCustomerIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final priceListIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final dailyParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final submittingRequestsDelayMinutesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final inactiveUsersLogoutMinutesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final maximumReturnPeriodMinutesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final requireOrderTypesForOrdersParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final roundingTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final roundDigitsParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 46);
          final kitchenSortingTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 48);
          final printSortingTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 50);
          final activeTipsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 52);
          final discountRequireCustomerInfoParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 54);
          final returnRequireCustomerInfoParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 56);
          final requireCancelReasonParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 58);
          final autoSentOrderToKitchenAfterPaidParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 60);
          final autoSyncDataAtStartOfDayParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 62);
          final autoPrintProductsReportParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 64);
          final autoPrintTillsReportParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 66);
          final preventEndingDayBeforeInventoryCountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 68);
          final imeiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 70);
          final object = CashierSetting(
              enableCashSales: enableCashSalesParam,
              enableCreditCardSales: enableCreditCardSalesParam,
              enableCustomerSales: enableCustomerSalesParam,
              enableFreeQuantity: enableFreeQuantityParam,
              enableEditItemName: enableEditItemNameParam,
              enableSalesDiscount: enableSalesDiscountParam,
              enableChangePrice: enableChangePriceParam,
              enableProductPackages: enableProductPackagesParam,
              enableTablesSystem: enableTablesSystemParam,
              tableGuestCountRequired: tableGuestCountRequiredParam,
              tableRequired: tableRequiredParam,
              discountPercentageLimit: discountPercentageLimitParam,
              defaultCustomerId: defaultCustomerIdParam,
              priceListId: priceListIdParam,
              daily: dailyParam,
              submittingRequestsDelayMinutes:
                  submittingRequestsDelayMinutesParam,
              inactiveUsersLogoutMinutes: inactiveUsersLogoutMinutesParam,
              maximumReturnPeriodMinutes: maximumReturnPeriodMinutesParam,
              requireOrderTypesForOrders: requireOrderTypesForOrdersParam,
              roundingType: roundingTypeParam,
              roundDigits: roundDigitsParam,
              kitchenSortingType: kitchenSortingTypeParam,
              printSortingType: printSortingTypeParam,
              activeTips: activeTipsParam,
              discountRequireCustomerInfo: discountRequireCustomerInfoParam,
              returnRequireCustomerInfo: returnRequireCustomerInfoParam,
              requireCancelReason: requireCancelReasonParam,
              autoSentOrderToKitchenAfterPaid:
                  autoSentOrderToKitchenAfterPaidParam,
              autoSyncDataAtStartOfDay: autoSyncDataAtStartOfDayParam,
              autoPrintProductsReport: autoPrintProductsReportParam,
              autoPrintTillsReport: autoPrintTillsReportParam,
              preventEndingDayBeforeInventoryCount:
                  preventEndingDayBeforeInventoryCountParam,
              imei: imeiParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Category: EntityDefinition<Category>(
        model: _entities[11],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.idSeq,
        setId: (Category object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addInt64(4, object.displayOrder);
          fbb.addOffset(5, imageUrlOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final displayOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = Category(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              displayOrder: displayOrderParam,
              imageUrl: imageUrlParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Coupon: EntityDefinition<Coupon>(
        model: _entities[12],
        toOneRelations: (Coupon object) => [],
        toManyRelations: (Coupon object) => {},
        getId: (Coupon object) => object.idSeq,
        setId: (Coupon object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Coupon object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final couponCodeOffset = object.couponCode == null
              ? null
              : fbb.writeString(object.couponCode!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final startTimeOffset = object.startTime == null
              ? null
              : fbb.writeString(object.startTime!);
          final endTimeOffset =
              object.endTime == null ? null : fbb.writeString(object.endTime!);
          final discountIdOffset = object.discountId == null
              ? null
              : fbb.writeString(object.discountId!);
          final daysOffset =
              object.days == null ? null : fbb.writeListInt64(object.days!);
          fbb.startTable(15);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, couponCodeOffset);
          fbb.addInt64(3, object.useCountForAll);
          fbb.addInt64(4, object.useCountForOne);
          fbb.addInt64(5, object.maximumUses);
          fbb.addOffset(6, startDateOffset);
          fbb.addOffset(7, endDateOffset);
          fbb.addOffset(8, startTimeOffset);
          fbb.addOffset(9, endTimeOffset);
          fbb.addOffset(10, discountIdOffset);
          fbb.addOffset(11, daysOffset);
          fbb.addInt64(12, object.couponLevel);
          fbb.addInt64(13, object.numberOFProducts);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final couponCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final useCountForAllParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final useCountForOneParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final maximumUsesParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final startTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final endTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final discountIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final daysParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final object = Coupon(
              id: idParam,
              couponCode: couponCodeParam,
              useCountForAll: useCountForAllParam,
              useCountForOne: useCountForOneParam,
              maximumUses: maximumUsesParam,
              startDate: startDateParam,
              endDate: endDateParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              discountId: discountIdParam,
              days: daysParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..couponLevel =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28)
            ..numberOFProducts =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);

          return object;
        }),
    Currencies: EntityDefinition<Currencies>(
        model: _entities[13],
        toOneRelations: (Currencies object) => [],
        toManyRelations: (Currencies object) => {},
        getId: (Currencies object) => object.idSeq,
        setId: (Currencies object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Currencies object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final currencyCodeOffset = object.currencyCode == null
              ? null
              : fbb.writeString(object.currencyCode!);
          final displayLocaleOffset = object.displayLocale == null
              ? null
              : fbb.writeString(object.displayLocale!);
          final customFormattingOffset = object.customFormatting == null
              ? null
              : fbb.writeString(object.customFormatting!);
          final densOffset =
              object.dens == null ? null : fbb.writeListInt64(object.dens!);
          fbb.startTable(13);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, currencyCodeOffset);
          fbb.addOffset(5, displayLocaleOffset);
          fbb.addBool(6, object.isDefault);
          fbb.addOffset(7, customFormattingOffset);
          fbb.addFloat64(8, object.exchangeRate);
          fbb.addFloat64(9, object.minExchangeRate);
          fbb.addFloat64(10, object.maxExchangeRate);
          fbb.addOffset(11, densOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final currencyCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final displayLocaleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final isDefaultParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final customFormattingParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final exchangeRateParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 20);
          final minExchangeRateParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final maxExchangeRateParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final densParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final object = Currencies(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              currencyCode: currencyCodeParam,
              displayLocale: displayLocaleParam,
              isDefault: isDefaultParam,
              customFormatting: customFormattingParam,
              exchangeRate: exchangeRateParam,
              minExchangeRate: minExchangeRateParam,
              maxExchangeRate: maxExchangeRateParam,
              dens: densParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Customer: EntityDefinition<Customer>(
        model: _entities[14],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {
              RelInfo<Customer>.toMany(4, object.idSeq!): object.addersses,
              RelInfo<Customer>.toMany(5, object.idSeq!):
                  object.houseAccountTranscations
            },
        getId: (Customer object) => object.idSeq,
        setId: (Customer object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final paymentMethodIdOffset = object.paymentMethodId == null
              ? null
              : fbb.writeString(object.paymentMethodId!);
          final currencyIdOffset = object.currencyId == null
              ? null
              : fbb.writeString(object.currencyId!);
          final taxNumberOffset = object.taxNumber == null
              ? null
              : fbb.writeString(object.taxNumber!);
          final taxRegisterationNameOffset = object.taxRegisterationName == null
              ? null
              : fbb.writeString(object.taxRegisterationName!);
          final blackListNoteOffset = object.blackListNote == null
              ? null
              : fbb.writeString(object.blackListNote!);
          final priceListIdOffset = object.priceListId == null
              ? null
              : fbb.writeString(object.priceListId!);
          fbb.startTable(17);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, mobileOffset);
          fbb.addOffset(5, emailOffset);
          fbb.addFloat64(6, object.debitLimit);
          fbb.addFloat64(7, object.balance);
          fbb.addOffset(8, paymentMethodIdOffset);
          fbb.addOffset(9, currencyIdOffset);
          fbb.addOffset(10, taxNumberOffset);
          fbb.addOffset(11, taxRegisterationNameOffset);
          fbb.addBool(12, object.inBlackList);
          fbb.addOffset(13, blackListNoteOffset);
          fbb.addOffset(14, priceListIdOffset);
          fbb.addBool(15, object.enableHouseAccount);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final debitLimitParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final balanceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final paymentMethodIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final currencyIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final taxNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final taxRegisterationNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final inBlackListParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);
          final blackListNoteParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final priceListIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final object = Customer(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              mobile: mobileParam,
              email: emailParam,
              debitLimit: debitLimitParam,
              balance: balanceParam,
              paymentMethodId: paymentMethodIdParam,
              currencyId: currencyIdParam,
              taxNumber: taxNumberParam,
              taxRegisterationName: taxRegisterationNameParam,
              inBlackList: inBlackListParam,
              blackListNote: blackListNoteParam,
              priceListId: priceListIdParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..enableHouseAccount =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          InternalToManyAccess.setRelInfo<Customer>(object.addersses, store,
              RelInfo<Customer>.toMany(4, object.idSeq!));
          InternalToManyAccess.setRelInfo<Customer>(
              object.houseAccountTranscations,
              store,
              RelInfo<Customer>.toMany(5, object.idSeq!));
          return object;
        }),
    DeliveryCompany: EntityDefinition<DeliveryCompany>(
        model: _entities[15],
        toOneRelations: (DeliveryCompany object) => [],
        toManyRelations: (DeliveryCompany object) => {},
        getId: (DeliveryCompany object) => object.idSeq,
        setId: (DeliveryCompany object, int id) {
          object.idSeq = id;
        },
        objectToFB: (DeliveryCompany object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final countryIdOffset = object.countryId == null
              ? null
              : fbb.writeString(object.countryId!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          fbb.startTable(10);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, mobileOffset);
          fbb.addOffset(5, emailOffset);
          fbb.addOffset(6, countryIdOffset);
          fbb.addOffset(7, imageUrlOffset);
          fbb.addFloat64(8, object.commissionRate);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final countryIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final commissionRateParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = DeliveryCompany(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              mobile: mobileParam,
              email: emailParam,
              countryId: countryIdParam,
              imageUrl: imageUrlParam,
              commissionRate: commissionRateParam);

          return object;
        }),
    DeliveryCompanyInfo: EntityDefinition<DeliveryCompanyInfo>(
        model: _entities[16],
        toOneRelations: (DeliveryCompanyInfo object) => [object.company],
        toManyRelations: (DeliveryCompanyInfo object) => {},
        getId: (DeliveryCompanyInfo object) => object.idSeq,
        setId: (DeliveryCompanyInfo object, int id) {
          object.idSeq = id;
        },
        objectToFB: (DeliveryCompanyInfo object, fb.Builder fbb) {
          final orderNumberOffset = fbb.writeString(object.orderNumber);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addInt64(1, object.company.targetId);
          fbb.addOffset(2, orderNumberOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final orderNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = DeliveryCompanyInfo(orderNumber: orderNumberParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.company.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.company.attach(store);
          return object;
        }),
    DeliveryZone: EntityDefinition<DeliveryZone>(
        model: _entities[17],
        toOneRelations: (DeliveryZone object) => [],
        toManyRelations: (DeliveryZone object) => {},
        getId: (DeliveryZone object) => object.idSeq,
        setId: (DeliveryZone object, int id) {
          object.idSeq = id;
        },
        objectToFB: (DeliveryZone object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final deliveryZoneCoordinateOffset =
              object.deliveryZoneCoordinate == null
                  ? null
                  : fbb.writeString(object.deliveryZoneCoordinate!);
          fbb.startTable(8);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, deliveryZoneCoordinateOffset);
          fbb.addFloat64(5, object.minimumDeliveryCharge);
          fbb.addFloat64(6, object.deliveryChargePerKM);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final deliveryZoneCoordinateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final minimumDeliveryChargeParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final deliveryChargePerKMParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = DeliveryZone(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              deliveryZoneCoordinate: deliveryZoneCoordinateParam,
              minimumDeliveryCharge: minimumDeliveryChargeParam,
              deliveryChargePerKM: deliveryChargePerKMParam);

          return object;
        }),
    Discount: EntityDefinition<Discount>(
        model: _entities[18],
        toOneRelations: (Discount object) => [],
        toManyRelations: (Discount object) => {},
        getId: (Discount object) => object.idSeq,
        setId: (Discount object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Discount object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final startTimeOffset = object.startTime == null
              ? null
              : fbb.writeString(object.startTime!);
          final endTimeOffset =
              object.endTime == null ? null : fbb.writeString(object.endTime!);
          final productIDsOffset = object.productIDs == null
              ? null
              : fbb.writeList(object.productIDs!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final daysOffset =
              object.days == null ? null : fbb.writeListInt64(object.days!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final priceListOffset = object.priceList == null
              ? null
              : fbb.writeList(object.priceList!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final customersOffset = object.customers == null
              ? null
              : fbb.writeList(object.customers!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final departmentsOffset = object.departments == null
              ? null
              : fbb.writeList(object.departments!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoeriesOffset = object.categoeries == null
              ? null
              : fbb.writeList(object.categoeries!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(23);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, startDateOffset);
          fbb.addOffset(5, endDateOffset);
          fbb.addOffset(6, startTimeOffset);
          fbb.addOffset(7, endTimeOffset);
          fbb.addInt64(8, object.discountAppliedTo);
          fbb.addInt64(9, object.discountType);
          fbb.addFloat64(10, object.discountPercentage);
          fbb.addFloat64(11, object.discountAmount);
          fbb.addFloat64(12, object.maximumDiscountAmount);
          fbb.addFloat64(13, object.minimalOrderAmount);
          fbb.addBool(14, object.taxable);
          fbb.addOffset(15, productIDsOffset);
          fbb.addOffset(16, daysOffset);
          fbb.addOffset(17, orderTypesOffset);
          fbb.addOffset(18, priceListOffset);
          fbb.addOffset(19, customersOffset);
          fbb.addOffset(20, departmentsOffset);
          fbb.addOffset(21, categoeriesOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final startTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final endTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final discountAppliedToParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final discountTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final discountPercentageParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final discountAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final maximumDiscountAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 28);
          final minimalOrderAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 30);
          final taxableParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final productIDsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 34);
          final daysParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 38);
          final priceListParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 40);
          final customersParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 42);
          final departmentsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 44);
          final categoeriesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 46);
          final object = Discount(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              startDate: startDateParam,
              endDate: endDateParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              discountAppliedTo: discountAppliedToParam,
              discountType: discountTypeParam,
              discountPercentage: discountPercentageParam,
              discountAmount: discountAmountParam,
              maximumDiscountAmount: maximumDiscountAmountParam,
              minimalOrderAmount: minimalOrderAmountParam,
              taxable: taxableParam,
              productIDs: productIDsParam,
              days: daysParam,
              orderTypes: orderTypesParam,
              priceList: priceListParam,
              customers: customersParam,
              departments: departmentsParam,
              categoeries: categoeriesParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ExtractCategory: EntityDefinition<ExtractCategory>(
        model: _entities[19],
        toOneRelations: (ExtractCategory object) => [],
        toManyRelations: (ExtractCategory object) => {},
        getId: (ExtractCategory object) => object.idSeq,
        setId: (ExtractCategory object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ExtractCategory object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.addOffset(3, imageOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = ExtractCategory(
              id: idParam,
              order: orderParam,
              name: nameParam,
              image: imageParam,
              fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ExtractDepartment: EntityDefinition<ExtractDepartment>(
        model: _entities[20],
        toOneRelations: (ExtractDepartment object) => [],
        toManyRelations: (ExtractDepartment object) => {
              RelInfo<ExtractDepartment>.toMany(7, object.idSeq!):
                  object.categories
            },
        getId: (ExtractDepartment object) => object.idSeq,
        setId: (ExtractDepartment object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ExtractDepartment object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.addOffset(3, imageOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = ExtractDepartment(
              id: idParam,
              order: orderParam,
              name: nameParam,
              image: imageParam,
              fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          InternalToManyAccess.setRelInfo<ExtractDepartment>(object.categories,
              store, RelInfo<ExtractDepartment>.toMany(7, object.idSeq!));
          return object;
        }),
    ExtractProduct: EntityDefinition<ExtractProduct>(
        model: _entities[21],
        toOneRelations: (ExtractProduct object) => [],
        toManyRelations: (ExtractProduct object) => {
              RelInfo<ExtractProduct>.toMany(8, object.idSeq!): object.units,
              RelInfo<ExtractProduct>.toMany(9, object.idSeq!): object.groups
            },
        getId: (ExtractProduct object) => object.idSeq,
        setId: (ExtractProduct object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ExtractProduct object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final skuOffset =
              object.sku == null ? null : fbb.writeString(object.sku!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          final productTypeIdOffset = object.productTypeId == null
              ? null
              : fbb.writeString(object.productTypeId!);
          final costTypeOffset = object.costType == null
              ? null
              : fbb.writeString(object.costType!);
          final salesMethodOffset = object.salesMethod == null
              ? null
              : fbb.writeString(object.salesMethod!);
          final availableStartDateTimeOffset =
              object.availableStartDateTime == null
                  ? null
                  : fbb.writeString(object.availableStartDateTime!);
          final availableEndDateTimeOffset = object.availableEndDateTime == null
              ? null
              : fbb.writeString(object.availableEndDateTime!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final fDescriptionOffset = object.fDescription == null
              ? null
              : fbb.writeString(object.fDescription!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final departmentIdOffset = object.departmentId == null
              ? null
              : fbb.writeString(object.departmentId!);
          final taxGroupIdOffset = object.taxGroupId == null
              ? null
              : fbb.writeString(object.taxGroupId!);
          final subNameOffset =
              object.subName == null ? null : fbb.writeString(object.subName!);
          final fSubNameOffset = object.fSubName == null
              ? null
              : fbb.writeString(object.fSubName!);
          final promotionalNameOffset = object.promotionalName == null
              ? null
              : fbb.writeString(object.promotionalName!);
          final fPromotionalNameOffset = object.fPromotionalName == null
              ? null
              : fbb.writeString(object.fPromotionalName!);
          final tagsOffset =
              object.tags == null ? null : fbb.writeString(object.tags!);
          final fTagsOffset =
              object.fTags == null ? null : fbb.writeString(object.fTags!);
          final categoryIdOffset = object.categoryId == null
              ? null
              : fbb.writeString(object.categoryId!);
          fbb.startTable(55);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, skuOffset);
          fbb.addOffset(5, barcodeOffset);
          fbb.addOffset(6, productTypeIdOffset);
          fbb.addOffset(7, costTypeOffset);
          fbb.addInt64(8, object.priceType);
          fbb.addOffset(9, salesMethodOffset);
          fbb.addFloat64(10, object.price);
          fbb.addFloat64(11, object.cost);
          fbb.addInt64(13, object.preparationTime);
          fbb.addBool(14, object.activeQRScan);
          fbb.addBool(15, object.qrScanOnSameDate);
          fbb.addBool(16, object.enableSalesDiscount);
          fbb.addFloat64(17, object.discountPercentageLimit);
          fbb.addBool(18, object.enableFreeQuantity);
          fbb.addBool(19, object.enableDateExpire);
          fbb.addBool(20, object.enableIMEISerial);
          fbb.addBool(21, object.enableWeights);
          fbb.addBool(22, object.scanPriceFromScale);
          fbb.addBool(23, object.scalePriceIncludeTax);
          fbb.addBool(24, object.independentPrinting);
          fbb.addBool(25, object.calculateQuantityFromTotalPrice);
          fbb.addBool(26, object.reservationRequired);
          fbb.addInt64(27, object.scaleBarcodeDigits);
          fbb.addInt64(28, object.scaleProductCodeDigits);
          fbb.addInt64(29, object.scaleIntDigits);
          fbb.addInt64(30, object.scaledecimalDigits);
          fbb.addBool(31, object.scaleProductCodeFirstInBracode);
          fbb.addOffset(32, availableStartDateTimeOffset);
          fbb.addOffset(33, availableEndDateTimeOffset);
          fbb.addOffset(34, descriptionOffset);
          fbb.addOffset(35, fDescriptionOffset);
          fbb.addOffset(36, imageUrlOffset);
          fbb.addInt64(37, object.calories);
          fbb.addInt64(38, object.minimumLevel);
          fbb.addInt64(39, object.maximumLevel);
          fbb.addOffset(41, departmentIdOffset);
          fbb.addBool(43, object.active);
          fbb.addOffset(44, taxGroupIdOffset);
          fbb.addInt64(46, object.productNature);
          fbb.addOffset(47, subNameOffset);
          fbb.addOffset(48, fSubNameOffset);
          fbb.addOffset(49, promotionalNameOffset);
          fbb.addOffset(50, fPromotionalNameOffset);
          fbb.addOffset(51, tagsOffset);
          fbb.addOffset(52, fTagsOffset);
          fbb.addOffset(53, categoryIdOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final skuParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final barcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final productTypeIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final costTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final priceTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final salesMethodParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final costParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final preparationTimeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final activeQRScanParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final qrScanOnSameDateParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final enableSalesDiscountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final discountPercentageLimitParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 38);
          final enableFreeQuantityParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final enableDateExpireParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final enableIMEISerialParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44);
          final enableWeightsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 46);
          final scanPriceFromScaleParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final scalePriceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 50);
          final independentPrintingParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 52);
          final calculateQuantityFromTotalPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 54);
          final reservationRequiredParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 56);
          final scaleBarcodeDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 58);
          final scaleProductCodeDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 60);
          final scaleIntDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 62);
          final scaledecimalDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 64);
          final scaleProductCodeFirstInBracodeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 66);
          final availableStartDateTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 68);
          final availableEndDateTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 70);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 72);
          final fDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 74);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 76);
          final caloriesParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 78);
          final minimumLevelParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 80);
          final maximumLevelParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 82);
          final categoryIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 110);
          final departmentIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 86);
          final activeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 90);
          final productNatureParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 96);
          final taxGroupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 92);
          final subNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 98);
          final fSubNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 100);
          final promotionalNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 102);
          final fPromotionalNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 104);
          final tagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 106);
          final fTagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 108);
          final object = ExtractProduct(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              sku: skuParam,
              barcode: barcodeParam,
              productTypeId: productTypeIdParam,
              costType: costTypeParam,
              priceType: priceTypeParam,
              salesMethod: salesMethodParam,
              price: priceParam,
              cost: costParam,
              preparationTime: preparationTimeParam,
              activeQRScan: activeQRScanParam,
              qrScanOnSameDate: qrScanOnSameDateParam,
              enableSalesDiscount: enableSalesDiscountParam,
              discountPercentageLimit: discountPercentageLimitParam,
              enableFreeQuantity: enableFreeQuantityParam,
              enableDateExpire: enableDateExpireParam,
              enableIMEISerial: enableIMEISerialParam,
              enableWeights: enableWeightsParam,
              scanPriceFromScale: scanPriceFromScaleParam,
              scalePriceIncludeTax: scalePriceIncludeTaxParam,
              independentPrinting: independentPrintingParam,
              calculateQuantityFromTotalPrice:
                  calculateQuantityFromTotalPriceParam,
              reservationRequired: reservationRequiredParam,
              scaleBarcodeDigits: scaleBarcodeDigitsParam,
              scaleProductCodeDigits: scaleProductCodeDigitsParam,
              scaleIntDigits: scaleIntDigitsParam,
              scaledecimalDigits: scaledecimalDigitsParam,
              scaleProductCodeFirstInBracode:
                  scaleProductCodeFirstInBracodeParam,
              availableStartDateTime: availableStartDateTimeParam,
              availableEndDateTime: availableEndDateTimeParam,
              description: descriptionParam,
              fDescription: fDescriptionParam,
              imageUrl: imageUrlParam,
              calories: caloriesParam,
              minimumLevel: minimumLevelParam,
              maximumLevel: maximumLevelParam,
              categoryId: categoryIdParam,
              departmentId: departmentIdParam,
              active: activeParam,
              productNature: productNatureParam,
              taxGroupId: taxGroupIdParam,
              subName: subNameParam,
              fSubName: fSubNameParam,
              promotionalName: promotionalNameParam,
              fPromotionalName: fPromotionalNameParam,
              tags: tagsParam,
              fTags: fTagsParam);
          InternalToManyAccess.setRelInfo<ExtractProduct>(object.units, store,
              RelInfo<ExtractProduct>.toMany(8, object.idSeq!));
          InternalToManyAccess.setRelInfo<ExtractProduct>(object.groups, store,
              RelInfo<ExtractProduct>.toMany(9, object.idSeq!));
          return object;
        }),
    Fee: EntityDefinition<Fee>(
        model: _entities[22],
        toOneRelations: (Fee object) => [],
        toManyRelations: (Fee object) => {},
        getId: (Fee object) => object.idSeq,
        setId: (Fee object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Fee object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final daysOffset =
              object.days == null ? null : fbb.writeListInt64(object.days!);
          final productsOffset = object.products == null
              ? null
              : fbb.writeList(object.products!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final taxGroupIdOffset = object.taxGroupId == null
              ? null
              : fbb.writeString(object.taxGroupId!);
          fbb.startTable(23);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addFloat64(6, object.value);
          fbb.addOffset(7, orderTypesOffset);
          fbb.addOffset(8, daysOffset);
          fbb.addBool(10, object.applyAuto);
          fbb.addBool(11, object.applyToSubtotal);
          fbb.addInt64(12, object.type);
          fbb.addInt64(13, object.valueType);
          fbb.addFloat64(14, object.percentage);
          fbb.addOffset(15, productsOffset);
          fbb.addOffset(16, taxGroupIdOffset);
          fbb.addBool(17, object.applyForProducts);
          fbb.addBool(18, object.printSeparatelyInTotalInvoice);
          fbb.addBool(19, object.amountIncludeInProductPrice);
          fbb.addFloat64(20, object.minAmountPerProduct);
          fbb.addFloat64(21, object.maxAmountPerProduct);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Fee()
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..id = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..fName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..value = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 16)
            ..orderTypes =
                const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                    .vTableGetNullable(buffer, rootOffset, 18)
            ..days = const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..applyAuto =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24)
            ..applyToSubtotal =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26)
            ..type =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28)
            ..valueType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30)
            ..percentage = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 32)
            ..products = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 34)
            ..taxGroupId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 36)
            ..applyForProducts =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38)
            ..printSeparatelyInTotalInvoice =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40)
            ..amountIncludeInProductPrice =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42)
            ..minAmountPerProduct = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 44)
            ..maxAmountPerProduct = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 46);

          return object;
        }),
    FeeTaxInfo: EntityDefinition<FeeTaxInfo>(
        model: _entities[23],
        toOneRelations: (FeeTaxInfo object) => [],
        toManyRelations: (FeeTaxInfo object) => {},
        getId: (FeeTaxInfo object) => object.idSeq,
        setId: (FeeTaxInfo object, int id) {
          object.idSeq = id;
        },
        objectToFB: (FeeTaxInfo object, fb.Builder fbb) {
          final taxGroupIdOffset = object.taxGroupId == null
              ? null
              : fbb.writeString(object.taxGroupId!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, taxGroupIdOffset);
          fbb.addFloat64(2, object.value);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final taxGroupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final valueParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = FeeTaxInfo(
              taxGroupId: taxGroupIdParam, value: valueParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    FeeValue: EntityDefinition<FeeValue>(
        model: _entities[24],
        toOneRelations: (FeeValue object) => [object.taxInfo],
        toManyRelations: (FeeValue object) => {},
        getId: (FeeValue object) => object.idSeq,
        setId: (FeeValue object, int id) {
          object.idSeq = id;
        },
        objectToFB: (FeeValue object, fb.Builder fbb) {
          final feeIdOffset =
              object.feeId == null ? null : fbb.writeString(object.feeId!);
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, feeIdOffset);
          fbb.addFloat64(2, object.value);
          fbb.addBool(3, object.applyAuto);
          fbb.addInt64(4, object.taxInfo.targetId);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final feeIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final valueParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final applyAutoParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final object = FeeValue(
              feeId: feeIdParam, value: valueParam, applyAuto: applyAutoParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.taxInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.taxInfo.attach(store);
          return object;
        }),
    FreeOption: EntityDefinition<FreeOption>(
        model: _entities[25],
        toOneRelations: (FreeOption object) => [],
        toManyRelations: (FreeOption object) => {},
        getId: (FreeOption object) => object.idSeq,
        setId: (FreeOption object, int id) {
          object.idSeq = id;
        },
        objectToFB: (FreeOption object, fb.Builder fbb) {
          final optionIdOffset = object.optionId == null
              ? null
              : fbb.writeString(object.optionId!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, optionIdOffset);
          fbb.addFloat64(2, object.freeQuantity);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final optionIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final freeQuantityParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = FreeOption(
              optionId: optionIdParam, freeQuantity: freeQuantityParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Group: EntityDefinition<Group>(
        model: _entities[26],
        toOneRelations: (Group object) => [],
        toManyRelations: (Group object) => {},
        getId: (Group object) => object.idSeq,
        setId: (Group object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Group object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final groupIdOffset =
              object.groupId == null ? null : fbb.writeString(object.groupId!);
          final groupNameOffset = object.groupName == null
              ? null
              : fbb.writeString(object.groupName!);
          final referenceOffset = object.reference == null
              ? null
              : fbb.writeString(object.reference!);
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, groupIdOffset);
          fbb.addOffset(3, groupNameOffset);
          fbb.addOffset(4, referenceOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final groupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final groupNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final referenceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = Group(
              id: idParam,
              groupId: groupIdParam,
              groupName: groupNameParam,
              reference: referenceParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Ingredient: EntityDefinition<Ingredient>(
        model: _entities[27],
        toOneRelations: (Ingredient object) => [],
        toManyRelations: (Ingredient object) => {},
        getId: (Ingredient object) => object.idSeq,
        setId: (Ingredient object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Ingredient object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final ingredientItemIdOffset = object.ingredientItemId == null
              ? null
              : fbb.writeString(object.ingredientItemId!);
          final ingredientItemNameOffset = object.ingredientItemName == null
              ? null
              : fbb.writeString(object.ingredientItemName!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          final unitOfMeasureNameOffset = object.unitOfMeasureName == null
              ? null
              : fbb.writeString(object.unitOfMeasureName!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeList(object.orderTypes!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(16);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addBool(1, object.isActive);
          fbb.addInt64(2, object.displayOrder);
          fbb.addOffset(3, idOffset);
          fbb.addOffset(4, ingredientItemIdOffset);
          fbb.addOffset(5, ingredientItemNameOffset);
          fbb.addOffset(6, barcodeOffset);
          fbb.addOffset(7, unitOfMeasureNameOffset);
          fbb.addFloat64(8, object.warehouseToIngredientFactor);
          fbb.addFloat64(9, object.quantity);
          fbb.addFloat64(10, object.wasteQuantity);
          fbb.addFloat64(11, object.unitCost);
          fbb.addFloat64(12, object.estimatedUnitCost);
          fbb.addFloat64(13, object.yieldPercentage);
          fbb.addOffset(14, orderTypesOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final isActiveParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final displayOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final ingredientItemIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final ingredientItemNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final barcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final unitOfMeasureNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final warehouseToIngredientFactorParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 20);
          final quantityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final wasteQuantityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final unitCostParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final estimatedUnitCostParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 28);
          final yieldPercentageParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 30);
          final orderTypesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 32);
          final object = Ingredient(
              isActive: isActiveParam,
              displayOrder: displayOrderParam,
              id: idParam,
              ingredientItemId: ingredientItemIdParam,
              ingredientItemName: ingredientItemNameParam,
              barcode: barcodeParam,
              unitOfMeasureName: unitOfMeasureNameParam,
              warehouseToIngredientFactor: warehouseToIngredientFactorParam,
              quantity: quantityParam,
              wasteQuantity: wasteQuantityParam,
              unitCost: unitCostParam,
              estimatedUnitCost: estimatedUnitCostParam,
              yieldPercentage: yieldPercentageParam,
              orderTypes: orderTypesParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    LoginHistory: EntityDefinition<LoginHistory>(
        model: _entities[28],
        toOneRelations: (LoginHistory object) => [],
        toManyRelations: (LoginHistory object) => {},
        getId: (LoginHistory object) => object.id,
        setId: (LoginHistory object, int id) {
          object.id = id;
        },
        objectToFB: (LoginHistory object, fb.Builder fbb) {
          final loginTimeOffset = object.loginTime == null
              ? null
              : fbb.writeString(object.loginTime!);
          final logoutTimeOffset = object.logoutTime == null
              ? null
              : fbb.writeString(object.logoutTime!);
          final usertIdOffset =
              object.usertId == null ? null : fbb.writeString(object.usertId!);
          final deviceNoOffset = object.deviceNo == null
              ? null
              : fbb.writeString(object.deviceNo!);
          final deviceRefOffset = object.deviceRef == null
              ? null
              : fbb.writeString(object.deviceRef!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.idIdentity);
          fbb.addOffset(2, loginTimeOffset);
          fbb.addOffset(3, logoutTimeOffset);
          fbb.addOffset(4, usertIdOffset);
          fbb.addOffset(5, deviceNoOffset);
          fbb.addOffset(6, deviceRefOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idIdentityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final loginTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final logoutTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final usertIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final deviceNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final deviceRefParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = LoginHistory(
              id: idParam,
              idIdentity: idIdentityParam,
              loginTime: loginTimeParam,
              logoutTime: logoutTimeParam,
              usertId: usertIdParam,
              deviceNo: deviceNoParam,
              deviceRef: deviceRefParam);

          return object;
        }),
    LogoData: EntityDefinition<LogoData>(
        model: _entities[29],
        toOneRelations: (LogoData object) => [],
        toManyRelations: (LogoData object) => {},
        getId: (LogoData object) => object.id,
        setId: (LogoData object, int id) {
          object.id = id;
        },
        objectToFB: (LogoData object, fb.Builder fbb) {
          final logoUrlOffset =
              object.logoUrl == null ? null : fbb.writeString(object.logoUrl!);
          final logoDataOffset = object.logoData == null
              ? null
              : fbb.writeListInt8(object.logoData!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, logoUrlOffset);
          fbb.addOffset(2, logoDataOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final logoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final logoDataParam =
              const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final object = LogoData(
              id: idParam, logoUrl: logoUrlParam, logoData: logoDataParam);

          return object;
        }),
    LoyaltySetting: EntityDefinition<LoyaltySetting>(
        model: _entities[30],
        toOneRelations: (LoyaltySetting object) => [],
        toManyRelations: (LoyaltySetting object) => {},
        getId: (LoyaltySetting object) => object.idSeq,
        setId: (LoyaltySetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (LoyaltySetting object, fb.Builder fbb) {
          final loyaltyMethodOffset = object.loyaltyMethod == null
              ? null
              : fbb.writeString(object.loyaltyMethod!);
          final bonusTypeOffset = object.bonusType == null
              ? null
              : fbb.writeString(object.bonusType!);
          fbb.startTable(14);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addBool(1, object.enableSystem);
          fbb.addOffset(2, loyaltyMethodOffset);
          fbb.addFloat64(3, object.lowestOrderPrice);
          fbb.addFloat64(4, object.delayInEarningPointsMinutes);
          fbb.addOffset(5, bonusTypeOffset);
          fbb.addFloat64(6, object.bonusValue);
          fbb.addFloat64(7, object.maximumBonusLimit);
          fbb.addFloat64(8, object.requiredBonusPoint);
          fbb.addFloat64(9, object.bonusValidityDays);
          fbb.addBool(10, object.enableSMSNotifications);
          fbb.addBool(11, object.displayBonusOnNewOrder);
          fbb.addBool(12, object.printBonusBalanceOnNewOrder);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final enableSystemParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final loyaltyMethodParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final lowestOrderPriceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final delayInEarningPointsMinutesParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final bonusTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final bonusValueParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final maximumBonusLimitParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final requiredBonusPointParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 20);
          final bonusValidityDaysParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final enableSMSNotificationsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final displayBonusOnNewOrderParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final printBonusBalanceOnNewOrderParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);
          final object = LoyaltySetting(
              enableSystem: enableSystemParam,
              loyaltyMethod: loyaltyMethodParam,
              lowestOrderPrice: lowestOrderPriceParam,
              delayInEarningPointsMinutes: delayInEarningPointsMinutesParam,
              bonusType: bonusTypeParam,
              bonusValue: bonusValueParam,
              maximumBonusLimit: maximumBonusLimitParam,
              requiredBonusPoint: requiredBonusPointParam,
              bonusValidityDays: bonusValidityDaysParam,
              enableSMSNotifications: enableSMSNotificationsParam,
              displayBonusOnNewOrder: displayBonusOnNewOrderParam,
              printBonusBalanceOnNewOrder: printBonusBalanceOnNewOrderParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Menu: EntityDefinition<Menu>(
        model: _entities[31],
        toOneRelations: (Menu object) => [],
        toManyRelations: (Menu object) => {
              RelInfo<Menu>.toMany(10, object.idSeq!): object.departments,
              RelInfo<Menu>.toMany(11, object.idSeq!): object.categories,
              RelInfo<Menu>.toMany(12, object.idSeq!): object.products,
              RelInfo<Menu>.toMany(13, object.idSeq!): object.giftCards
            },
        getId: (Menu object) => object.idSeq,
        setId: (Menu object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Menu object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Menu(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              fName: fNameParam);
          InternalToManyAccess.setRelInfo<Menu>(object.departments, store,
              RelInfo<Menu>.toMany(10, object.idSeq!));
          InternalToManyAccess.setRelInfo<Menu>(object.categories, store,
              RelInfo<Menu>.toMany(11, object.idSeq!));
          InternalToManyAccess.setRelInfo<Menu>(
              object.products, store, RelInfo<Menu>.toMany(12, object.idSeq!));
          InternalToManyAccess.setRelInfo<Menu>(
              object.giftCards, store, RelInfo<Menu>.toMany(13, object.idSeq!));
          return object;
        }),
    MenuCategory: EntityDefinition<MenuCategory>(
        model: _entities[32],
        toOneRelations: (MenuCategory object) => [],
        toManyRelations: (MenuCategory object) => {},
        getId: (MenuCategory object) => object.idSeq,
        setId: (MenuCategory object, int id) {
          object.idSeq = id;
        },
        objectToFB: (MenuCategory object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object =
              MenuCategory(idSeq: idSeqParam, id: idParam, order: orderParam);

          return object;
        }),
    MenuDepartment: EntityDefinition<MenuDepartment>(
        model: _entities[33],
        toOneRelations: (MenuDepartment object) => [],
        toManyRelations: (MenuDepartment object) => {},
        getId: (MenuDepartment object) => object.idSeq,
        setId: (MenuDepartment object, int id) {
          object.idSeq = id;
        },
        objectToFB: (MenuDepartment object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object =
              MenuDepartment(idSeq: idSeqParam, id: idParam, order: orderParam);

          return object;
        }),
    MenuGiftCard: EntityDefinition<MenuGiftCard>(
        model: _entities[34],
        toOneRelations: (MenuGiftCard object) => [],
        toManyRelations: (MenuGiftCard object) => {},
        getId: (MenuGiftCard object) => object.idSeq,
        setId: (MenuGiftCard object, int id) {
          object.idSeq = id;
        },
        objectToFB: (MenuGiftCard object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object =
              MenuGiftCard(idSeq: idSeqParam, id: idParam, order: orderParam);

          return object;
        }),
    MenuProduct: EntityDefinition<MenuProduct>(
        model: _entities[35],
        toOneRelations: (MenuProduct object) => [],
        toManyRelations: (MenuProduct object) => {},
        getId: (MenuProduct object) => object.idSeq,
        setId: (MenuProduct object, int id) {
          object.idSeq = id;
        },
        objectToFB: (MenuProduct object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object =
              MenuProduct(idSeq: idSeqParam, id: idParam, order: orderParam);

          return object;
        }),
    Modifier: EntityDefinition<Modifier>(
        model: _entities[36],
        toOneRelations: (Modifier object) => [],
        toManyRelations: (Modifier object) =>
            {RelInfo<Modifier>.toMany(14, object.idSeq!): object.options},
        getId: (Modifier object) => object.idSeq,
        setId: (Modifier object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Modifier object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fnameOffset =
              object.fname == null ? null : fbb.writeString(object.fname!);
          fbb.startTable(8);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.minimumOptions);
          fbb.addInt64(3, object.maximumOptions);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, fnameOffset);
          fbb.addBool(6, object.isUnique);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final minimumOptionsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final isUniqueParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final maximumOptionsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = Modifier(
              id: idParam,
              minimumOptions: minimumOptionsParam,
              isUnique: isUniqueParam,
              maximumOptions: maximumOptionsParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..fname = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);
          InternalToManyAccess.setRelInfo<Modifier>(object.options, store,
              RelInfo<Modifier>.toMany(14, object.idSeq!));
          return object;
        }),
    Option: EntityDefinition<Option>(
        model: _entities[37],
        toOneRelations: (Option object) => [],
        toManyRelations: (Option object) => {},
        getId: (Option object) => object.idSeq,
        setId: (Option object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Option object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final costTypeOffset = object.costType == null
              ? null
              : fbb.writeString(object.costType!);
          final modifierTypeOffset = object.modifierType == null
              ? null
              : fbb.writeString(object.modifierType!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fnameOffset =
              object.fname == null ? null : fbb.writeString(object.fname!);
          final taxGroupIdOffset = object.taxGroupId == null
              ? null
              : fbb.writeString(object.taxGroupId!);
          fbb.startTable(15);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, costTypeOffset);
          fbb.addOffset(3, modifierTypeOffset);
          fbb.addInt64(4, object.instructionType);
          fbb.addFloat64(5, object.price);
          fbb.addFloat64(6, object.cost);
          fbb.addFloat64(7, object.calories);
          fbb.addBool(8, object.inStock);
          fbb.addBool(9, object.isDefault);
          fbb.addInt64(10, object.displayOrder);
          fbb.addOffset(11, nameOffset);
          fbb.addOffset(12, fnameOffset);
          fbb.addOffset(13, taxGroupIdOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final costTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final modifierTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final instructionTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final costParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final caloriesParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final inStockParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final isDefaultParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final displayOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final taxGroupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final object = Option(
              id: idParam,
              costType: costTypeParam,
              modifierType: modifierTypeParam,
              instructionType: instructionTypeParam,
              price: priceParam,
              cost: costParam,
              calories: caloriesParam,
              inStock: inStockParam,
              isDefault: isDefaultParam,
              displayOrder: displayOrderParam,
              taxGroupId: taxGroupIdParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..fname = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 28);

          return object;
        }),
    OrderC: EntityDefinition<OrderC>(
        model: _entities[38],
        toOneRelations: (OrderC object) => [
              object.deliveryCompanyInfo,
              object.customer,
              object.address,
              object.promotion,
              object.discount
            ],
        toManyRelations: (OrderC object) => {
              RelInfo<OrderC>.toMany(15, object.idSeq!): object.products,
              RelInfo<OrderC>.toMany(16, object.idSeq!): object.fees,
              RelInfo<OrderC>.toMany(17, object.idSeq!): object.feeValues,
              RelInfo<OrderC>.toMany(18, object.idSeq!): object.payments
            },
        getId: (OrderC object) => object.idSeq,
        setId: (OrderC object, int id) {
          object.idSeq = id;
        },
        objectToFB: (OrderC object, fb.Builder fbb) {
          final invoiceNumberOffset = object.invoiceNumber == null
              ? null
              : fbb.writeString(object.invoiceNumber!);
          final deviceIdOffset = object.deviceId == null
              ? null
              : fbb.writeString(object.deviceId!);
          final parentOrderIdOffset = object.parentOrderId == null
              ? null
              : fbb.writeString(object.parentOrderId!);
          final orderRefOffset = fbb.writeString(object.orderRef);
          final callNameOffset = object.callName == null
              ? null
              : fbb.writeString(object.callName!);
          final selectedPriceListIdOffset = object.selectedPriceListId == null
              ? null
              : fbb.writeString(object.selectedPriceListId!);
          final tableIdOffset =
              object.tableId == null ? null : fbb.writeString(object.tableId!);
          final tableCaptionOffset = object.tableCaption == null
              ? null
              : fbb.writeString(object.tableCaption!);
          final noteOffset =
              object.note == null ? null : fbb.writeString(object.note!);
          final kitchenNoteOffset = object.kitchenNote == null
              ? null
              : fbb.writeString(object.kitchenNote!);
          final msgCanselOffset = object.msgCansel == null
              ? null
              : fbb.writeString(object.msgCansel!);
          final checksumOffset = object.checksum == null
              ? null
              : fbb.writeString(object.checksum!);
          final masterChecksumOffset = object.masterChecksum == null
              ? null
              : fbb.writeString(object.masterChecksum!);
          final serverChecksumOffset = object.serverChecksum == null
              ? null
              : fbb.writeString(object.serverChecksum!);
          final shiftIdOffset =
              object.shiftId == null ? null : fbb.writeString(object.shiftId!);
          final tillIdOffset =
              object.tillId == null ? null : fbb.writeString(object.tillId!);
          fbb.startTable(38);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, invoiceNumberOffset);
          fbb.addOffset(2, deviceIdOffset);
          fbb.addInt64(3, object.startDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.timeOfReceipt?.millisecondsSinceEpoch);
          fbb.addOffset(5, parentOrderIdOffset);
          fbb.addInt64(6, object.splitIndex);
          fbb.addOffset(7, orderRefOffset);
          fbb.addOffset(8, callNameOffset);
          fbb.addInt64(9, object.orderType);
          fbb.addInt64(10, object.status);
          fbb.addInt64(11, object.orderSource);
          fbb.addInt64(12, object.endTime?.millisecondsSinceEpoch);
          fbb.addInt64(13, object.deliveryCompanyInfo.targetId);
          fbb.addOffset(14, selectedPriceListIdOffset);
          fbb.addOffset(15, tableIdOffset);
          fbb.addOffset(16, tableCaptionOffset);
          fbb.addInt64(17, object.numberVistor);
          fbb.addInt64(18, object.customer.targetId);
          fbb.addInt64(19, object.address.targetId);
          fbb.addInt64(20, object.promotion.targetId);
          fbb.addInt64(21, object.discount.targetId);
          fbb.addFloat64(22, object.priceDiscount);
          fbb.addFloat64(23, object.pricePromotion);
          fbb.addOffset(24, noteOffset);
          fbb.addOffset(25, kitchenNoteOffset);
          fbb.addOffset(26, msgCanselOffset);
          fbb.addFloat64(27, object.subTotal);
          fbb.addOffset(28, checksumOffset);
          fbb.addOffset(29, masterChecksumOffset);
          fbb.addOffset(30, serverChecksumOffset);
          fbb.addFloat64(31, object.totalFee);
          fbb.addFloat64(32, object.taxPrice);
          fbb.addFloat64(33, object.totalDiscountForOrderAndProduct);
          fbb.addFloat64(34, object.totalPaid);
          fbb.addOffset(35, shiftIdOffset);
          fbb.addOffset(36, tillIdOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final timeOfReceiptValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final object = OrderC()
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..invoiceNumber = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..deviceId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..startDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..timeOfReceipt = timeOfReceiptValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(timeOfReceiptValue)
            ..parentOrderId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..splitIndex =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16)
            ..orderRef = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..callName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..orderType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)
            ..orderSource =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)
            ..endTime = endTimeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(endTimeValue)
            ..selectedPriceListId =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGetNullable(buffer, rootOffset, 32)
            ..tableId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 34)
            ..tableCaption = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 36)
            ..numberVistor =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 38)
            ..priceDiscount = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 48)
            ..pricePromotion = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 50)
            ..note = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 52)
            ..kitchenNote = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 54)
            ..msgCansel = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 56)
            ..subTotal =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 58, 0)
            ..checksum = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 60)
            ..masterChecksum = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 62)
            ..serverChecksum = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 64)
            ..totalFee = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 66)
            ..taxPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 68)
            ..totalDiscountForOrderAndProduct = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 70)
            ..totalPaid = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 72)
            ..shiftId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 74)
            ..tillId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 76);
          object.deliveryCompanyInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.deliveryCompanyInfo.attach(store);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0);
          object.customer.attach(store);
          object.address.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          object.address.attach(store);
          object.promotion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
          object.promotion.attach(store);
          object.discount.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0);
          object.discount.attach(store);
          InternalToManyAccess.setRelInfo<OrderC>(object.products, store,
              RelInfo<OrderC>.toMany(15, object.idSeq!));
          InternalToManyAccess.setRelInfo<OrderC>(
              object.fees, store, RelInfo<OrderC>.toMany(16, object.idSeq!));
          InternalToManyAccess.setRelInfo<OrderC>(object.feeValues, store,
              RelInfo<OrderC>.toMany(17, object.idSeq!));
          InternalToManyAccess.setRelInfo<OrderC>(object.payments, store,
              RelInfo<OrderC>.toMany(18, object.idSeq!));
          return object;
        }),
    PaymentMethod: EntityDefinition<PaymentMethod>(
        model: _entities[39],
        toOneRelations: (PaymentMethod object) => [],
        toManyRelations: (PaymentMethod object) => {},
        getId: (PaymentMethod object) => object.idSeq,
        setId: (PaymentMethod object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PaymentMethod object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(15);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addInt64(4, object.paymentType);
          fbb.addInt64(5, object.displayOrder);
          fbb.addBool(11, object.isActive);
          fbb.addBool(12, object.isDeleted);
          fbb.addBool(13, object.autoOpenCashDrawer);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final paymentTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final displayOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final isActiveParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final isDeletedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);
          final autoOpenCashDrawerParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30);
          final object = PaymentMethod(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              paymentType: paymentTypeParam,
              displayOrder: displayOrderParam,
              isActive: isActiveParam,
              isDeleted: isDeletedParam,
              autoOpenCashDrawer: autoOpenCashDrawerParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    PaymentValue: EntityDefinition<PaymentValue>(
        model: _entities[40],
        toOneRelations: (PaymentValue object) => [object.method],
        toManyRelations: (PaymentValue object) => {},
        getId: (PaymentValue object) => object.idSeq,
        setId: (PaymentValue object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PaymentValue object, fb.Builder fbb) {
          final refreanceOffset = fbb.writeString(object.refreance);
          final currencyCodeOffset = object.currencyCode == null
              ? null
              : fbb.writeString(object.currencyCode!);
          fbb.startTable(9);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, refreanceOffset);
          fbb.addInt64(2, object.method.targetId);
          fbb.addFloat64(3, object.amt);
          fbb.addFloat64(4, object.remainAmt);
          fbb.addFloat64(5, object.exchangeRate);
          fbb.addFloat64(6, object.amountCurecny);
          fbb.addOffset(7, currencyCodeOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final amtParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final refreanceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final amountCurecnyParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final exchangeRateParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final currencyCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final remainAmtParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = PaymentValue(
              amt: amtParam,
              refreance: refreanceParam,
              amountCurecny: amountCurecnyParam,
              exchangeRate: exchangeRateParam,
              currencyCode: currencyCodeParam,
              remainAmt: remainAmtParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.method.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.method.attach(store);
          return object;
        }),
    PolicySetting: EntityDefinition<PolicySetting>(
        model: _entities[41],
        toOneRelations: (PolicySetting object) => [],
        toManyRelations: (PolicySetting object) => {},
        getId: (PolicySetting object) => object.idSeq,
        setId: (PolicySetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PolicySetting object, fb.Builder fbb) {
          final orderPolicyAROffset = object.orderPolicyAR == null
              ? null
              : fbb.writeString(object.orderPolicyAR!);
          final orderPolicyENOffset = object.orderPolicyEN == null
              ? null
              : fbb.writeString(object.orderPolicyEN!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addBool(1, object.enableOrderCancelation);
          fbb.addBool(2, object.enablePosRefund);
          fbb.addBool(3, object.enableUsingExpiredTicket);
          fbb.addOffset(4, orderPolicyAROffset);
          fbb.addOffset(5, orderPolicyENOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final enableOrderCancelationParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final enablePosRefundParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8);
          final enableUsingExpiredTicketParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final orderPolicyARParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final orderPolicyENParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = PolicySetting(
              enableOrderCancelation: enableOrderCancelationParam,
              enablePosRefund: enablePosRefundParam,
              enableUsingExpiredTicket: enableUsingExpiredTicketParam,
              orderPolicyAR: orderPolicyARParam,
              orderPolicyEN: orderPolicyENParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    PosUser: EntityDefinition<PosUser>(
        model: _entities[42],
        toOneRelations: (PosUser object) => [],
        toManyRelations: (PosUser object) => {
              RelInfo<PosUser>.toMany(19, object.id!): object.tenants,
              RelInfo<PosUser>.toMany(20, object.id!): object.branches
            },
        getId: (PosUser object) => object.id,
        setId: (PosUser object, int id) {
          object.id = id;
        },
        objectToFB: (PosUser object, fb.Builder fbb) {
          final idUserOffset =
              object.idUser == null ? null : fbb.writeString(object.idUser!);
          final fullNameOffset = object.fullName == null
              ? null
              : fbb.writeString(object.fullName!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          final pinMD5Offset =
              object.pinMD5 == null ? null : fbb.writeString(object.pinMD5!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, idUserOffset);
          fbb.addOffset(2, fullNameOffset);
          fbb.addOffset(3, phoneNumberOffset);
          fbb.addOffset(4, pinMD5Offset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idUserParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final fullNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final phoneNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final pinMD5Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = PosUser(
              id: idParam,
              idUser: idUserParam,
              fullName: fullNameParam,
              phoneNumber: phoneNumberParam,
              pinMD5: pinMD5Param);
          InternalToManyAccess.setRelInfo<PosUser>(
              object.tenants, store, RelInfo<PosUser>.toMany(19, object.id!));
          InternalToManyAccess.setRelInfo<PosUser>(
              object.branches, store, RelInfo<PosUser>.toMany(20, object.id!));
          return object;
        }),
    PosUser1: EntityDefinition<PosUser1>(
        model: _entities[43],
        toOneRelations: (PosUser1 object) => [],
        toManyRelations: (PosUser1 object) => {
              RelInfo<PosUser1>.toMany(21, object.idSeq!): object.branches,
              RelInfo<PosUser1>.toMany(22, object.idSeq!): object.roles
            },
        getId: (PosUser1 object) => object.idSeq,
        setId: (PosUser1 object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PosUser1 object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final name2Offset =
              object.name2 == null ? null : fbb.writeString(object.name2!);
          final phoneNumber3Offset = object.phoneNumber3 == null
              ? null
              : fbb.writeString(object.phoneNumber3!);
          final passwordHash4Offset = object.passwordHash4 == null
              ? null
              : fbb.writeString(object.passwordHash4!);
          final pinMD56Offset =
              object.pinMD56 == null ? null : fbb.writeString(object.pinMD56!);
          final imageUrl7Offset = object.imageUrl7 == null
              ? null
              : fbb.writeString(object.imageUrl7!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeList(object.orderTypes!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, name2Offset);
          fbb.addOffset(3, phoneNumber3Offset);
          fbb.addOffset(4, passwordHash4Offset);
          fbb.addInt64(5, object.pin5);
          fbb.addOffset(6, pinMD56Offset);
          fbb.addOffset(7, imageUrl7Offset);
          fbb.addOffset(8, orderTypesOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final name2Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final phoneNumber3Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final passwordHash4Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final pin5Param =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final pinMD56Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final imageUrl7Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final orderTypesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = PosUser1(
              id: idParam,
              name2: name2Param,
              phoneNumber3: phoneNumber3Param,
              passwordHash4: passwordHash4Param,
              pin5: pin5Param,
              pinMD56: pinMD56Param,
              imageUrl7: imageUrl7Param,
              orderTypes: orderTypesParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          InternalToManyAccess.setRelInfo<PosUser1>(object.branches, store,
              RelInfo<PosUser1>.toMany(21, object.idSeq!));
          InternalToManyAccess.setRelInfo<PosUser1>(
              object.roles, store, RelInfo<PosUser1>.toMany(22, object.idSeq!));
          return object;
        }),
    PriceList: EntityDefinition<PriceList>(
        model: _entities[44],
        toOneRelations: (PriceList object) => [],
        toManyRelations: (PriceList object) => {},
        getId: (PriceList object) => object.idSeq,
        setId: (PriceList object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PriceList object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addBool(4, object.priceIncludeTax);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final priceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12);
          final object = PriceList(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              priceIncludeTax: priceIncludeTaxParam);

          return object;
        }),
    PriceListValue: EntityDefinition<PriceListValue>(
        model: _entities[45],
        toOneRelations: (PriceListValue object) => [],
        toManyRelations: (PriceListValue object) =>
            {RelInfo<PriceListValue>.toMany(23, object.idSeq!): object.slaps},
        getId: (PriceListValue object) => object.idSeq,
        setId: (PriceListValue object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PriceListValue object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addFloat64(2, object.price);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final priceParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object =
              PriceListValue(idSeq: idSeqParam, id: idParam, price: priceParam);
          InternalToManyAccess.setRelInfo<PriceListValue>(object.slaps, store,
              RelInfo<PriceListValue>.toMany(23, object.idSeq!));
          return object;
        }),
    Printer: EntityDefinition<Printer>(
        model: _entities[46],
        toOneRelations: (Printer object) => [],
        toManyRelations: (Printer object) =>
            {RelInfo<Printer>.toMany(24, object.idSeq!): object.settings},
        getId: (Printer object) => object.idSeq,
        setId: (Printer object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Printer object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final deviceIdOffset = object.deviceId == null
              ? null
              : fbb.writeString(object.deviceId!);
          final printerModelIdOffset = object.printerModelId == null
              ? null
              : fbb.writeString(object.printerModelId!);
          final ipAddressOffset = object.ipAddress == null
              ? null
              : fbb.writeString(object.ipAddress!);
          final productsOffset = object.products == null
              ? null
              : fbb.writeList(object.products!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final departmentsOffset = object.departments == null
              ? null
              : fbb.writeList(object.departments!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoriesOffset = object.categories == null
              ? null
              : fbb.writeList(object.categories!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          fbb.startTable(16);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, deviceIdOffset);
          fbb.addOffset(5, printerModelIdOffset);
          fbb.addInt64(6, object.connectionType);
          fbb.addOffset(7, ipAddressOffset);
          fbb.addInt64(8, object.printerType);
          fbb.addInt64(9, object.printTo);
          fbb.addInt64(10, object.port);
          fbb.addOffset(11, productsOffset);
          fbb.addOffset(12, departmentsOffset);
          fbb.addOffset(13, categoriesOffset);
          fbb.addOffset(14, orderTypesOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final deviceIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final printerModelIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final connectionTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final ipAddressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final portParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final printerTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final printToParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final object = Printer(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              deviceId: deviceIdParam,
              printerModelId: printerModelIdParam,
              connectionType: connectionTypeParam,
              ipAddress: ipAddressParam,
              port: portParam,
              printerType: printerTypeParam,
              printTo: printToParam,
              orderTypes: orderTypesParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..products = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..departments = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 28)
            ..categories = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 30);
          InternalToManyAccess.setRelInfo<Printer>(object.settings, store,
              RelInfo<Printer>.toMany(24, object.idSeq!));
          return object;
        }),
    PrinterSetting: EntityDefinition<PrinterSetting>(
        model: _entities[47],
        toOneRelations: (PrinterSetting object) => [],
        toManyRelations: (PrinterSetting object) => {},
        getId: (PrinterSetting object) => object.idSeq,
        setId: (PrinterSetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PrinterSetting object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final printerIdOffset = object.printerId == null
              ? null
              : fbb.writeString(object.printerId!);
          final paperSizeOffset = object.paperSize == null
              ? null
              : fbb.writeString(object.paperSize!);
          final cutterCommandCodeOffset = object.cutterCommandCode == null
              ? null
              : fbb.writeString(object.cutterCommandCode!);
          fbb.startTable(10);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, printerIdOffset);
          fbb.addOffset(3, paperSizeOffset);
          fbb.addInt64(4, object.scale);
          fbb.addInt64(5, object.imageCutterFactor);
          fbb.addOffset(6, cutterCommandCodeOffset);
          fbb.addBool(7, object.autoPrint);
          fbb.addInt64(8, object.numberOfCopy);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final printerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final paperSizeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final scaleParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final imageCutterFactorParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final cutterCommandCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final autoPrintParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final numberOfCopyParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final object = PrinterSetting(
              id: idParam,
              printerId: printerIdParam,
              paperSize: paperSizeParam,
              scale: scaleParam,
              imageCutterFactor: imageCutterFactorParam,
              cutterCommandCode: cutterCommandCodeParam,
              autoPrint: autoPrintParam,
              numberOfCopy: numberOfCopyParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Product1: EntityDefinition<Product1>(
        model: _entities[48],
        toOneRelations: (Product1 object) => [],
        toManyRelations: (Product1 object) => {
              RelInfo<Product1>.toMany(25, object.idSeq!): object.units,
              RelInfo<Product1>.toMany(26, object.idSeq!): object.modifiers,
              RelInfo<Product1>.toMany(27, object.idSeq!): object.ingredients,
              RelInfo<Product1>.toMany(28, object.idSeq!): object.groups
            },
        getId: (Product1 object) => object.idSeq,
        setId: (Product1 object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Product1 object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final skuOffset =
              object.sku == null ? null : fbb.writeString(object.sku!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          final productTypeIdOffset = object.productTypeId == null
              ? null
              : fbb.writeString(object.productTypeId!);
          final costTypeOffset = object.costType == null
              ? null
              : fbb.writeString(object.costType!);
          final salesMethodOffset = object.salesMethod == null
              ? null
              : fbb.writeString(object.salesMethod!);
          final availableStartDateTimeOffset =
              object.availableStartDateTime == null
                  ? null
                  : fbb.writeString(object.availableStartDateTime!);
          final availableEndDateTimeOffset = object.availableEndDateTime == null
              ? null
              : fbb.writeString(object.availableEndDateTime!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final fDescriptionOffset = object.fDescription == null
              ? null
              : fbb.writeString(object.fDescription!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final departmentIdOffset = object.departmentId == null
              ? null
              : fbb.writeString(object.departmentId!);
          final taxGroupIdOffset = object.taxGroupId == null
              ? null
              : fbb.writeString(object.taxGroupId!);
          final subNameOffset =
              object.subName == null ? null : fbb.writeString(object.subName!);
          final fSubNameOffset = object.fSubName == null
              ? null
              : fbb.writeString(object.fSubName!);
          final promotionalNameOffset = object.promotionalName == null
              ? null
              : fbb.writeString(object.promotionalName!);
          final fPromotionalNameOffset = object.fPromotionalName == null
              ? null
              : fbb.writeString(object.fPromotionalName!);
          final tagsOffset =
              object.tags == null ? null : fbb.writeString(object.tags!);
          final fTagsOffset =
              object.fTags == null ? null : fbb.writeString(object.fTags!);
          final categoryIdOffset = object.categoryId == null
              ? null
              : fbb.writeString(object.categoryId!);
          fbb.startTable(55);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, skuOffset);
          fbb.addOffset(5, barcodeOffset);
          fbb.addOffset(6, productTypeIdOffset);
          fbb.addOffset(7, costTypeOffset);
          fbb.addInt64(8, object.priceType);
          fbb.addOffset(9, salesMethodOffset);
          fbb.addFloat64(10, object.price);
          fbb.addFloat64(11, object.cost);
          fbb.addInt64(13, object.preparationTime);
          fbb.addBool(14, object.activeQRScan);
          fbb.addBool(15, object.qrScanOnSameDate);
          fbb.addBool(16, object.enableSalesDiscount);
          fbb.addFloat64(17, object.discountPercentageLimit);
          fbb.addBool(18, object.enableFreeQuantity);
          fbb.addBool(19, object.enableDateExpire);
          fbb.addBool(20, object.enableIMEISerial);
          fbb.addBool(21, object.enableWeights);
          fbb.addBool(22, object.scanPriceFromScale);
          fbb.addBool(23, object.scalePriceIncludeTax);
          fbb.addBool(24, object.independentPrinting);
          fbb.addBool(25, object.calculateQuantityFromTotalPrice);
          fbb.addBool(26, object.reservationRequired);
          fbb.addInt64(27, object.scaleBarcodeDigits);
          fbb.addInt64(28, object.scaleProductCodeDigits);
          fbb.addInt64(29, object.scaleIntDigits);
          fbb.addInt64(30, object.scaledecimalDigits);
          fbb.addBool(31, object.scaleProductCodeFirstInBracode);
          fbb.addOffset(32, availableStartDateTimeOffset);
          fbb.addOffset(33, availableEndDateTimeOffset);
          fbb.addOffset(34, descriptionOffset);
          fbb.addOffset(35, fDescriptionOffset);
          fbb.addOffset(36, imageUrlOffset);
          fbb.addInt64(37, object.calories);
          fbb.addInt64(38, object.minimumLevel);
          fbb.addInt64(39, object.maximumLevel);
          fbb.addOffset(41, departmentIdOffset);
          fbb.addBool(43, object.active);
          fbb.addOffset(44, taxGroupIdOffset);
          fbb.addInt64(46, object.productNature);
          fbb.addOffset(47, subNameOffset);
          fbb.addOffset(48, fSubNameOffset);
          fbb.addOffset(49, promotionalNameOffset);
          fbb.addOffset(50, fPromotionalNameOffset);
          fbb.addOffset(51, tagsOffset);
          fbb.addOffset(52, fTagsOffset);
          fbb.addOffset(53, categoryIdOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final skuParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final barcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final productTypeIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final costTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final priceTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final salesMethodParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final costParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final preparationTimeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final activeQRScanParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final qrScanOnSameDateParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final enableSalesDiscountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final discountPercentageLimitParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 38);
          final enableFreeQuantityParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final enableDateExpireParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final enableIMEISerialParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44);
          final enableWeightsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 46);
          final scanPriceFromScaleParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final scalePriceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 50);
          final independentPrintingParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 52);
          final calculateQuantityFromTotalPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 54);
          final reservationRequiredParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 56);
          final scaleBarcodeDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 58);
          final scaleProductCodeDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 60);
          final scaleIntDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 62);
          final scaledecimalDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 64);
          final scaleProductCodeFirstInBracodeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 66);
          final availableStartDateTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 68);
          final availableEndDateTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 70);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 72);
          final fDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 74);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 76);
          final caloriesParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 78);
          final minimumLevelParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 80);
          final maximumLevelParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 82);
          final productNatureParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 96);
          final activeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 90);
          final taxGroupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 92);
          final subNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 98);
          final fSubNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 100);
          final promotionalNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 102);
          final fPromotionalNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 104);
          final tagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 106);
          final fTagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 108);
          final object = Product1(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              sku: skuParam,
              barcode: barcodeParam,
              productTypeId: productTypeIdParam,
              costType: costTypeParam,
              priceType: priceTypeParam,
              salesMethod: salesMethodParam,
              price: priceParam,
              cost: costParam,
              preparationTime: preparationTimeParam,
              activeQRScan: activeQRScanParam,
              qrScanOnSameDate: qrScanOnSameDateParam,
              enableSalesDiscount: enableSalesDiscountParam,
              discountPercentageLimit: discountPercentageLimitParam,
              enableFreeQuantity: enableFreeQuantityParam,
              enableDateExpire: enableDateExpireParam,
              enableIMEISerial: enableIMEISerialParam,
              enableWeights: enableWeightsParam,
              scanPriceFromScale: scanPriceFromScaleParam,
              scalePriceIncludeTax: scalePriceIncludeTaxParam,
              independentPrinting: independentPrintingParam,
              calculateQuantityFromTotalPrice:
                  calculateQuantityFromTotalPriceParam,
              reservationRequired: reservationRequiredParam,
              scaleBarcodeDigits: scaleBarcodeDigitsParam,
              scaleProductCodeDigits: scaleProductCodeDigitsParam,
              scaleIntDigits: scaleIntDigitsParam,
              scaledecimalDigits: scaledecimalDigitsParam,
              scaleProductCodeFirstInBracode:
                  scaleProductCodeFirstInBracodeParam,
              availableStartDateTime: availableStartDateTimeParam,
              availableEndDateTime: availableEndDateTimeParam,
              description: descriptionParam,
              fDescription: fDescriptionParam,
              imageUrl: imageUrlParam,
              calories: caloriesParam,
              minimumLevel: minimumLevelParam,
              maximumLevel: maximumLevelParam,
              productNature: productNatureParam,
              active: activeParam,
              taxGroupId: taxGroupIdParam,
              subName: subNameParam,
              fSubName: fSubNameParam,
              promotionalName: promotionalNameParam,
              fPromotionalName: fPromotionalNameParam,
              tags: tagsParam,
              fTags: fTagsParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..departmentId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 86)
            ..categoryId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 110);
          InternalToManyAccess.setRelInfo<Product1>(
              object.units, store, RelInfo<Product1>.toMany(25, object.idSeq!));
          InternalToManyAccess.setRelInfo<Product1>(object.modifiers, store,
              RelInfo<Product1>.toMany(26, object.idSeq!));
          InternalToManyAccess.setRelInfo<Product1>(object.ingredients, store,
              RelInfo<Product1>.toMany(27, object.idSeq!));
          InternalToManyAccess.setRelInfo<Product1>(object.groups, store,
              RelInfo<Product1>.toMany(28, object.idSeq!));
          return object;
        }),
    ProductPriceList: EntityDefinition<ProductPriceList>(
        model: _entities[49],
        toOneRelations: (ProductPriceList object) => [],
        toManyRelations: (ProductPriceList object) => {},
        getId: (ProductPriceList object) => object.idSeq,
        setId: (ProductPriceList object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ProductPriceList object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addFloat64(2, object.price);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final priceParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = ProductPriceList(id: idParam, price: priceParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Promotion: EntityDefinition<Promotion>(
        model: _entities[50],
        toOneRelations: (Promotion object) => [],
        toManyRelations: (Promotion object) => {},
        getId: (Promotion object) => object.idSeq,
        setId: (Promotion object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Promotion object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final startTimeOffset = object.startTime == null
              ? null
              : fbb.writeString(object.startTime!);
          final endTimeOffset =
              object.endTime == null ? null : fbb.writeString(object.endTime!);
          final daysOffset =
              object.days == null ? null : fbb.writeListInt64(object.days!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final purchaseProductsOffset = object.purchaseProducts == null
              ? null
              : fbb.writeList(object.purchaseProducts!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final discountProductsOffset = object.discountProducts == null
              ? null
              : fbb.writeList(object.discountProducts!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(23);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, startDateOffset);
          fbb.addOffset(5, endDateOffset);
          fbb.addOffset(6, startTimeOffset);
          fbb.addOffset(7, endTimeOffset);
          fbb.addInt64(8, object.promotionType);
          fbb.addInt64(9, object.discountType);
          fbb.addFloat64(10, object.discountPercentage);
          fbb.addFloat64(11, object.discountAmount);
          fbb.addFloat64(12, object.maximumDiscountAmount);
          fbb.addInt64(13, object.promotionApplyType);
          fbb.addFloat64(14, object.customerQuantity);
          fbb.addFloat64(15, object.customerAmount);
          fbb.addInt64(16, object.promotionApplyToType);
          fbb.addOffset(17, daysOffset);
          fbb.addOffset(18, orderTypesOffset);
          fbb.addOffset(19, purchaseProductsOffset);
          fbb.addOffset(20, discountProductsOffset);
          fbb.addInt64(21, object.priority);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final startTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final endTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final promotionTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final discountTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final discountPercentageParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final discountAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final maximumDiscountAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 28);
          final promotionApplyTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final customerQuantityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 32);
          final customerAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 34);
          final promotionApplyToTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 36);
          final daysParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 38);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 40);
          final purchaseProductsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 42);
          final discountProductsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 44);
          final priorityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 46);
          final object = Promotion(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              startDate: startDateParam,
              endDate: endDateParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              promotionType: promotionTypeParam,
              discountType: discountTypeParam,
              discountPercentage: discountPercentageParam,
              discountAmount: discountAmountParam,
              maximumDiscountAmount: maximumDiscountAmountParam,
              promotionApplyType: promotionApplyTypeParam,
              customerQuantity: customerQuantityParam,
              customerAmount: customerAmountParam,
              promotionApplyToType: promotionApplyToTypeParam,
              days: daysParam,
              orderTypes: orderTypesParam,
              purchaseProducts: purchaseProductsParam,
              discountProducts: discountProductsParam,
              priority: priorityParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ReasonsCanceling: EntityDefinition<ReasonsCanceling>(
        model: _entities[51],
        toOneRelations: (ReasonsCanceling object) => [],
        toManyRelations: (ReasonsCanceling object) => {},
        getId: (ReasonsCanceling object) => object.idSeq,
        setId: (ReasonsCanceling object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ReasonsCanceling object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = ReasonsCanceling(
              id: idParam, name: nameParam, fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ReasonsDrawerOpen: EntityDefinition<ReasonsDrawerOpen>(
        model: _entities[52],
        toOneRelations: (ReasonsDrawerOpen object) => [],
        toManyRelations: (ReasonsDrawerOpen object) => {},
        getId: (ReasonsDrawerOpen object) => object.idSeq,
        setId: (ReasonsDrawerOpen object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ReasonsDrawerOpen object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = ReasonsDrawerOpen(
              id: idParam, name: nameParam, fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ResturantSection: EntityDefinition<ResturantSection>(
        model: _entities[53],
        toOneRelations: (ResturantSection object) => [],
        toManyRelations: (ResturantSection object) => {
              RelInfo<ResturantSection>.toMany(29, object.idSeq!): object.tables
            },
        getId: (ResturantSection object) => object.idSeq,
        setId: (ResturantSection object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ResturantSection object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = ResturantSection(
              id: idParam, name: nameParam, fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          InternalToManyAccess.setRelInfo<ResturantSection>(object.tables,
              store, RelInfo<ResturantSection>.toMany(29, object.idSeq!));
          return object;
        }),
    Roles: EntityDefinition<Roles>(
        model: _entities[54],
        toOneRelations: (Roles object) => [],
        toManyRelations: (Roles object) => {},
        getId: (Roles object) => object.idSeq,
        setId: (Roles object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Roles object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final claimsOffset = object.claims == null
              ? null
              : fbb.writeList(
                  object.claims!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(5);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, claimsOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final claimsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Roles(
              id: idParam, name: nameParam, claims: claimsParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Shift: EntityDefinition<Shift>(
        model: _entities[55],
        toOneRelations: (Shift object) => [],
        toManyRelations: (Shift object) => {},
        getId: (Shift object) => object.id,
        setId: (Shift object, int id) {
          object.id = id;
        },
        objectToFB: (Shift object, fb.Builder fbb) {
          final shiftIdOffset =
              object.shiftId == null ? null : fbb.writeString(object.shiftId!);
          final referenceOffset = object.reference == null
              ? null
              : fbb.writeString(object.reference!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final userNameOffset = object.userName == null
              ? null
              : fbb.writeString(object.userName!);
          final branchNameOffset = object.branchName == null
              ? null
              : fbb.writeString(object.branchName!);
          final clockedInDateAtOffset = object.clockedInDateAt == null
              ? null
              : fbb.writeString(object.clockedInDateAt!);
          final clockedInTimeAtOffset = object.clockedInTimeAt == null
              ? null
              : fbb.writeString(object.clockedInTimeAt!);
          final clockedOutDateAtOffset = object.clockedOutDateAt == null
              ? null
              : fbb.writeString(object.clockedOutDateAt!);
          final clockedOutTimeAtOffset = object.clockedOutTimeAt == null
              ? null
              : fbb.writeString(object.clockedOutTimeAt!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, shiftIdOffset);
          fbb.addOffset(2, referenceOffset);
          fbb.addOffset(3, userIdOffset);
          fbb.addOffset(4, userNameOffset);
          fbb.addOffset(5, branchNameOffset);
          fbb.addOffset(6, clockedInDateAtOffset);
          fbb.addOffset(7, clockedInTimeAtOffset);
          fbb.addOffset(8, clockedOutDateAtOffset);
          fbb.addOffset(9, clockedOutTimeAtOffset);
          fbb.addBool(10, object.isClockedOut);
          fbb.addBool(11, object.isSync);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final referenceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final shiftIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final branchNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final clockedInDateAtParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final clockedInTimeAtParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final clockedOutDateAtParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final clockedOutTimeAtParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final isClockedOutParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final isSyncParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final object = Shift(
              id: idParam,
              reference: referenceParam,
              shiftId: shiftIdParam,
              userId: userIdParam,
              userName: userNameParam,
              branchName: branchNameParam,
              clockedInDateAt: clockedInDateAtParam,
              clockedInTimeAt: clockedInTimeAtParam,
              clockedOutDateAt: clockedOutDateAtParam,
              clockedOutTimeAt: clockedOutTimeAtParam,
              isClockedOut: isClockedOutParam,
              isSync: isSyncParam);

          return object;
        }),
    Slaps: EntityDefinition<Slaps>(
        model: _entities[56],
        toOneRelations: (Slaps object) => [],
        toManyRelations: (Slaps object) => {},
        getId: (Slaps object) => object.idSeq,
        setId: (Slaps object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Slaps object, fb.Builder fbb) {
          final timeEventIdOffset = object.timeEventId == null
              ? null
              : fbb.writeString(object.timeEventId!);
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addFloat64(1, object.from);
          fbb.addFloat64(2, object.to);
          fbb.addFloat64(3, object.price);
          fbb.addOffset(4, timeEventIdOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final fromParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final toParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Slaps(from: fromParam, to: toParam, price: priceParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..timeEventId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12);

          return object;
        }),
    Table: EntityDefinition<Table>(
        model: _entities[57],
        toOneRelations: (Table object) => [],
        toManyRelations: (Table object) => {},
        getId: (Table object) => object.idSeq,
        setId: (Table object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Table object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final tableCodeOffset = object.tableCode == null
              ? null
              : fbb.writeString(object.tableCode!);
          fbb.startTable(11);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.tableNumber);
          fbb.addOffset(3, tableCodeOffset);
          fbb.addInt64(4, object.numberOfIndividuals);
          fbb.addInt64(5, object.minumumReservationPrice);
          fbb.addInt64(6, object.status);
          fbb.addInt64(7, object.shape);
          fbb.addInt64(8, object.offsetX);
          fbb.addInt64(9, object.offsetY);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final tableNumberParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final tableCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final numberOfIndividualsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final minumumReservationPriceParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final statusParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final shapeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final offsetXParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final offsetYParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final object = Table(
              id: idParam,
              tableNumber: tableNumberParam,
              tableCode: tableCodeParam,
              numberOfIndividuals: numberOfIndividualsParam,
              minumumReservationPrice: minumumReservationPriceParam,
              status: statusParam,
              shape: shapeParam,
              offsetX: offsetXParam,
              offsetY: offsetYParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    TaxC: EntityDefinition<TaxC>(
        model: _entities[58],
        toOneRelations: (TaxC object) => [],
        toManyRelations: (TaxC object) => {},
        getId: (TaxC object) => object.idSeq,
        setId: (TaxC object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TaxC object, fb.Builder fbb) {
          final taxNameOffset =
              object.taxName == null ? null : fbb.writeString(object.taxName!);
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final exceptCustomersOffset = object.exceptCustomers == null
              ? null
              : fbb.writeList(object.exceptCustomers!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final taxCodeOffset =
              object.taxCode == null ? null : fbb.writeString(object.taxCode!);
          final taxAccountOffset = object.taxAccount == null
              ? null
              : fbb.writeString(object.taxAccount!);
          fbb.startTable(14);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, taxNameOffset);
          fbb.addOffset(2, idOffset);
          fbb.addOffset(5, orderTypesOffset);
          fbb.addOffset(6, exceptCustomersOffset);
          fbb.addFloat64(7, object.taxPercentage);
          fbb.addBool(8, object.customerTaxable);
          fbb.addOffset(9, taxCodeOffset);
          fbb.addOffset(10, taxAccountOffset);
          fbb.addBool(11, object.isTaxExempt);
          fbb.addBool(12, object.zeroTax);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final taxNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final taxPercentageParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final customerTaxableParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final exceptCustomersParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 16);
          final taxAccountParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final taxCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final object = TaxC(
              id: idParam,
              taxName: taxNameParam,
              taxPercentage: taxPercentageParam,
              orderTypes: orderTypesParam,
              customerTaxable: customerTaxableParam,
              exceptCustomers: exceptCustomersParam,
              taxAccount: taxAccountParam,
              taxCode: taxCodeParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..isTaxExempt =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26)
            ..zeroTax =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);

          return object;
        }),
    TaxGroup: EntityDefinition<TaxGroup>(
        model: _entities[59],
        toOneRelations: (TaxGroup object) => [],
        toManyRelations: (TaxGroup object) => {},
        getId: (TaxGroup object) => object.idSeq,
        setId: (TaxGroup object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TaxGroup object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final typesOffset = object.types == null
              ? null
              : fbb.writeList(
                  object.types!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, fNameOffset);
          fbb.addOffset(5, typesOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final typesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 14);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = TaxGroup(
              id: idParam,
              idSeq: idSeqParam,
              types: typesParam,
              name: nameParam,
              fName: fNameParam);

          return object;
        }),
    TaxInfo: EntityDefinition<TaxInfo>(
        model: _entities[60],
        toOneRelations: (TaxInfo object) => [],
        toManyRelations: (TaxInfo object) => {},
        getId: (TaxInfo object) => object.idSeq,
        setId: (TaxInfo object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TaxInfo object, fb.Builder fbb) {
          final taxGroupIdOffset = object.taxGroupId == null
              ? null
              : fbb.writeString(object.taxGroupId!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, taxGroupIdOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final taxGroupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final object = TaxInfo(taxGroupId: taxGroupIdParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    TaxSetting: EntityDefinition<TaxSetting>(
        model: _entities[61],
        toOneRelations: (TaxSetting object) => [],
        toManyRelations: (TaxSetting object) => {},
        getId: (TaxSetting object) => object.idSeq,
        setId: (TaxSetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TaxSetting object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addBool(1, object.enableSalesTax);
          fbb.addBool(2, object.salesPriceIncludeTax);
          fbb.addBool(3, object.enableCustomerSupplierTax);
          fbb.addFloat64(4, object.taxRoundFactor);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final enableSalesTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final salesPriceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8);
          final enableCustomerSupplierTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final taxRoundFactorParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = TaxSetting(
              enableSalesTax: enableSalesTaxParam,
              salesPriceIncludeTax: salesPriceIncludeTaxParam,
              enableCustomerSupplierTax: enableCustomerSupplierTaxParam,
              taxRoundFactor: taxRoundFactorParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Tenants: EntityDefinition<Tenants>(
        model: _entities[62],
        toOneRelations: (Tenants object) => [],
        toManyRelations: (Tenants object) => {},
        getId: (Tenants object) => object.id,
        setId: (Tenants object, int id) {
          object.id = id;
        },
        objectToFB: (Tenants object, fb.Builder fbb) {
          final tenantIdOffset = object.tenantId == null
              ? null
              : fbb.writeString(object.tenantId!);
          final tenantNameOffset = object.tenantName == null
              ? null
              : fbb.writeString(object.tenantName!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, tenantIdOffset);
          fbb.addOffset(2, tenantNameOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final tenantIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final tenantNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Tenants(
              id: idParam,
              tenantId: tenantIdParam,
              tenantName: tenantNameParam);

          return object;
        }),
    ThrowbackInfo: EntityDefinition<ThrowbackInfo>(
        model: _entities[63],
        toOneRelations: (ThrowbackInfo object) => [],
        toManyRelations: (ThrowbackInfo object) => {},
        getId: (ThrowbackInfo object) => object.idSeq,
        setId: (ThrowbackInfo object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ThrowbackInfo object, fb.Builder fbb) {
          final productRefOffset = object.productRef == null
              ? null
              : fbb.writeString(object.productRef!);
          final refOffset =
              object.ref == null ? null : fbb.writeString(object.ref!);
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, productRefOffset);
          fbb.addFloat64(2, object.quantity);
          fbb.addBool(3, object.isWaste);
          fbb.addOffset(4, refOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final refParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final productRefParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final isWasteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = ThrowbackInfo(
              ref: refParam,
              productRef: productRefParam,
              quantity: quantityParam,
              isWaste: isWasteParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    TimeEvent: EntityDefinition<TimeEvent>(
        model: _entities[64],
        toOneRelations: (TimeEvent object) => [],
        toManyRelations: (TimeEvent object) => {},
        getId: (TimeEvent object) => object.idSeq,
        setId: (TimeEvent object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TimeEvent object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final startTimeOffset = object.startTime == null
              ? null
              : fbb.writeString(object.startTime!);
          final endTimeOffset =
              object.endTime == null ? null : fbb.writeString(object.endTime!);
          final daysOffset =
              object.days == null ? null : fbb.writeListInt64(object.days!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final productsOffset = object.products == null
              ? null
              : fbb.writeList(object.products!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final customersOffset = object.customers == null
              ? null
              : fbb.writeList(object.customers!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final departmentsOffset = object.departments == null
              ? null
              : fbb.writeList(object.departments!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoriesOffset = object.categories == null
              ? null
              : fbb.writeList(object.categories!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(19);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addInt64(4, object.timeEventType);
          fbb.addFloat64(5, object.timeEventValue);
          fbb.addOffset(6, startDateOffset);
          fbb.addOffset(7, endDateOffset);
          fbb.addOffset(8, startTimeOffset);
          fbb.addOffset(9, endTimeOffset);
          fbb.addOffset(10, daysOffset);
          fbb.addOffset(11, orderTypesOffset);
          fbb.addOffset(12, productsOffset);
          fbb.addOffset(13, customersOffset);
          fbb.addOffset(14, departmentsOffset);
          fbb.addInt64(16, object.priority);
          fbb.addOffset(17, categoriesOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final timeEventTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final timeEventValueParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final startTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final endTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final daysParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final productsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 28);
          final object = TimeEvent(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              timeEventType: timeEventTypeParam,
              timeEventValue: timeEventValueParam,
              startDate: startDateParam,
              endDate: endDateParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              days: daysParam,
              orderTypes: orderTypesParam,
              products: productsParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..customers = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..departments = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 32)
            ..priority =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0)
            ..categories = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 38);

          return object;
        }),
    Transaction: EntityDefinition<Transaction>(
        model: _entities[65],
        toOneRelations: (Transaction object) => [],
        toManyRelations: (Transaction object) => {},
        getId: (Transaction object) => object.idSeq,
        setId: (Transaction object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final refIdOffset =
              object.refId == null ? null : fbb.writeString(object.refId!);
          final toAcountOffset = object.toAcount == null
              ? null
              : fbb.writeString(object.toAcount!);
          final createByOffset = object.createBy == null
              ? null
              : fbb.writeString(object.createBy!);
          final dateOffset =
              object.date == null ? null : fbb.writeString(object.date!);
          fbb.startTable(8);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, refIdOffset);
          fbb.addOffset(3, toAcountOffset);
          fbb.addFloat64(4, object.amt);
          fbb.addOffset(5, createByOffset);
          fbb.addOffset(6, dateOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final refIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final toAcountParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final amtParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final createByParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = Transaction(
              id: idParam,
              refId: refIdParam,
              toAcount: toAcountParam,
              amt: amtParam,
              createBy: createByParam,
              date: dateParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Unit: EntityDefinition<Unit>(
        model: _entities[66],
        toOneRelations: (Unit object) => [],
        toManyRelations: (Unit object) => {
              RelInfo<Unit>.toMany(30, object.idSeq!): object.priceList,
              RelInfo<Unit>.toMany(31, object.idSeq!): object.modifiers
            },
        getId: (Unit object) => object.idSeq,
        setId: (Unit object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Unit object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fnameOffset =
              object.fname == null ? null : fbb.writeString(object.fname!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          fbb.startTable(12);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fnameOffset);
          fbb.addOffset(4, barcodeOffset);
          fbb.addFloat64(5, object.price);
          fbb.addFloat64(6, object.cost);
          fbb.addFloat64(7, object.factor);
          fbb.addBool(8, object.defaultForSales);
          fbb.addBool(9, object.defaultForPurchase);
          fbb.addBool(10, object.defaultForStore);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final barcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final costParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final factorParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final defaultForSalesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final defaultForPurchaseParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final defaultForStoreParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fnameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Unit(
              id: idParam,
              barcode: barcodeParam,
              price: priceParam,
              cost: costParam,
              factor: factorParam,
              defaultForSales: defaultForSalesParam,
              defaultForPurchase: defaultForPurchaseParam,
              defaultForStore: defaultForStoreParam,
              name: nameParam,
              fname: fnameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          InternalToManyAccess.setRelInfo<Unit>(
              object.priceList, store, RelInfo<Unit>.toMany(30, object.idSeq!));
          InternalToManyAccess.setRelInfo<Unit>(
              object.modifiers, store, RelInfo<Unit>.toMany(31, object.idSeq!));
          return object;
        }),
    UnitModifer: EntityDefinition<UnitModifer>(
        model: _entities[67],
        toOneRelations: (UnitModifer object) => [],
        toManyRelations: (UnitModifer object) => {
              RelInfo<UnitModifer>.toMany(32, object.idSeq!):
                  object.freeOptions,
              RelInfo<UnitModifer>.toMany(33, object.idSeq!): object.options
            },
        getId: (UnitModifer object) => object.idSeq,
        setId: (UnitModifer object, int id) {
          object.idSeq = id;
        },
        objectToFB: (UnitModifer object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final defulatOptionsOffset = object.defulatOptions == null
              ? null
              : fbb.writeList(object.defulatOptions!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final exceptOptionsOffset = object.exceptOptions == null
              ? null
              : fbb.writeList(object.exceptOptions!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(11);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.minimumOptions);
          fbb.addInt64(3, object.maximumOptions);
          fbb.addBool(4, object.isUnique);
          fbb.addBool(5, object.isRequired);
          fbb.addOffset(6, defulatOptionsOffset);
          fbb.addOffset(7, exceptOptionsOffset);
          fbb.addOffset(8, nameOffset);
          fbb.addOffset(9, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final minimumOptionsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final maximumOptionsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final isUniqueParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12);
          final isRequiredParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final defulatOptionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 16);
          final exceptOptionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 18);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final object = UnitModifer(
              id: idParam,
              minimumOptions: minimumOptionsParam,
              maximumOptions: maximumOptionsParam,
              isUnique: isUniqueParam,
              isRequired: isRequiredParam,
              defulatOptions: defulatOptionsParam,
              exceptOptions: exceptOptionsParam,
              name: nameParam,
              fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          InternalToManyAccess.setRelInfo<UnitModifer>(object.freeOptions,
              store, RelInfo<UnitModifer>.toMany(32, object.idSeq!));
          InternalToManyAccess.setRelInfo<UnitModifer>(object.options, store,
              RelInfo<UnitModifer>.toMany(33, object.idSeq!));
          return object;
        }),
    UserBranche: EntityDefinition<UserBranche>(
        model: _entities[68],
        toOneRelations: (UserBranche object) => [],
        toManyRelations: (UserBranche object) => {},
        getId: (UserBranche object) => object.idSeq,
        setId: (UserBranche object, int id) {
          object.idSeq = id;
        },
        objectToFB: (UserBranche object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final groupsOffset = object.groups == null
              ? null
              : fbb.writeList(
                  object.groups!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, groupsOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final groupsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = UserBranche(id: idParam, groups: groupsParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ViewSettings: EntityDefinition<ViewSettings>(
        model: _entities[69],
        toOneRelations: (ViewSettings object) => [],
        toManyRelations: (ViewSettings object) => {},
        getId: (ViewSettings object) => object.idSeq,
        setId: (ViewSettings object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ViewSettings object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ViewSettings()
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Device: EntityDefinition<Device>(
        model: _entities[70],
        toOneRelations: (Device object) => [object.info, object.setting],
        toManyRelations: (Device object) => {},
        getId: (Device object) => object.id,
        setId: (Device object, int id) {
          object.id = id;
        },
        objectToFB: (Device object, fb.Builder fbb) {
          final deviceIdOffset = object.deviceId == null
              ? null
              : fbb.writeString(object.deviceId!);
          final deviceTypeIdOffset = object.deviceTypeId == null
              ? null
              : fbb.writeString(object.deviceTypeId!);
          final deviceModelIdOffset = object.deviceModelId == null
              ? null
              : fbb.writeString(object.deviceModelId!);
          final deviceTypeCodeOffset = object.deviceTypeCode == null
              ? null
              : fbb.writeString(object.deviceTypeCode!);
          final referenceOffset = object.reference == null
              ? null
              : fbb.writeString(object.reference!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final modelOffset =
              object.model == null ? null : fbb.writeString(object.model!);
          final systemVersionOffset = object.systemVersion == null
              ? null
              : fbb.writeString(object.systemVersion!);
          final appVersionOffset = object.appVersion == null
              ? null
              : fbb.writeString(object.appVersion!);
          final buildOffset =
              object.build == null ? null : fbb.writeString(object.build!);
          final latitudeOffset = object.latitude == null
              ? null
              : fbb.writeString(object.latitude!);
          final longitudeOffset = object.longitude == null
              ? null
              : fbb.writeString(object.longitude!);
          final connectionIPAddressOffset = object.connectionIPAddress == null
              ? null
              : fbb.writeString(object.connectionIPAddress!);
          final connectionTypeOffset = object.connectionType == null
              ? null
              : fbb.writeString(object.connectionType!);
          final imeiOffset =
              object.imei == null ? null : fbb.writeString(object.imei!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final refrencePrefixOffset = object.refrencePrefix == null
              ? null
              : fbb.writeString(object.refrencePrefix!);
          final productsOffset = object.products == null
              ? null
              : fbb.writeList(object.products!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoriesOffset = object.categories == null
              ? null
              : fbb.writeList(object.categories!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final departmentsOffset = object.departments == null
              ? null
              : fbb.writeList(object.departments!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(33);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, deviceIdOffset);
          fbb.addOffset(2, deviceTypeIdOffset);
          fbb.addOffset(3, deviceModelIdOffset);
          fbb.addOffset(4, deviceTypeCodeOffset);
          fbb.addInt64(5, object.masterDeviceNo);
          fbb.addOffset(6, referenceOffset);
          fbb.addOffset(7, nameOffset);
          fbb.addOffset(8, fNameOffset);
          fbb.addBool(9, object.enableOnlineOrderReceiver);
          fbb.addOffset(10, modelOffset);
          fbb.addOffset(11, systemVersionOffset);
          fbb.addOffset(12, appVersionOffset);
          fbb.addOffset(13, buildOffset);
          fbb.addOffset(14, latitudeOffset);
          fbb.addOffset(15, longitudeOffset);
          fbb.addOffset(16, connectionIPAddressOffset);
          fbb.addInt64(17, object.connectionPort);
          fbb.addOffset(18, connectionTypeOffset);
          fbb.addOffset(19, imeiOffset);
          fbb.addOffset(20, orderTypesOffset);
          fbb.addOffset(26, refrencePrefixOffset);
          fbb.addInt64(27, object.info.targetId);
          fbb.addInt64(28, object.setting.targetId);
          fbb.addOffset(29, productsOffset);
          fbb.addOffset(30, categoriesOffset);
          fbb.addOffset(31, departmentsOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final deviceIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final deviceTypeIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final deviceModelIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final masterDeviceNoParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final referenceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final enableOnlineOrderReceiverParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final modelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final systemVersionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final appVersionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final buildParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final latitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final longitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final connectionIPAddressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final connectionPortParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 38);
          final connectionTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 40);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final imeiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final deviceTypeCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final refrencePrefixParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 56);
          final categoriesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 64);
          final departmentsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 66);
          final productsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 62);
          final object = Device(
              id: idParam,
              deviceId: deviceIdParam,
              deviceTypeId: deviceTypeIdParam,
              deviceModelId: deviceModelIdParam,
              masterDeviceNo: masterDeviceNoParam,
              reference: referenceParam,
              name: nameParam,
              fName: fNameParam,
              enableOnlineOrderReceiver: enableOnlineOrderReceiverParam,
              model: modelParam,
              systemVersion: systemVersionParam,
              appVersion: appVersionParam,
              build: buildParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              connectionIPAddress: connectionIPAddressParam,
              connectionPort: connectionPortParam,
              connectionType: connectionTypeParam,
              orderTypes: orderTypesParam,
              imei: imeiParam,
              deviceTypeCode: deviceTypeCodeParam,
              refrencePrefix: refrencePrefixParam,
              categories: categoriesParam,
              departments: departmentsParam,
              products: productsParam);
          object.info.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 58, 0);
          object.info.attach(store);
          object.setting.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 60, 0);
          object.setting.attach(store);
          return object;
        }),
    DeviceSetting: EntityDefinition<DeviceSetting>(
        model: _entities[71],
        toOneRelations: (DeviceSetting object) => [],
        toManyRelations: (DeviceSetting object) => {},
        getId: (DeviceSetting object) => object.idSeq,
        setId: (DeviceSetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (DeviceSetting object, fb.Builder fbb) {
          final newOrderDefaultTypeOffset = object.newOrderDefaultType == null
              ? null
              : fbb.writeString(object.newOrderDefaultType!);
          final printLanguageOffset = object.printLanguage == null
              ? null
              : fbb.writeString(object.printLanguage!);
          final defaultTagOffset = object.defaultTag == null
              ? null
              : fbb.writeString(object.defaultTag!);
          final emailForDailyReportOffset = object.emailForDailyReport == null
              ? null
              : fbb.writeString(object.emailForDailyReport!);
          final emailForShiftReportOffset = object.emailForShiftReport == null
              ? null
              : fbb.writeString(object.emailForShiftReport!);
          final emailForTillReportOffset = object.emailForTillReport == null
              ? null
              : fbb.writeString(object.emailForTillReport!);
          final invoiceNumberPerfixSymobleOffset =
              object.invoiceNumberPerfixSymoble == null
                  ? null
                  : fbb.writeString(object.invoiceNumberPerfixSymoble!);
          final invoiceNumberPerfixOffset = object.invoiceNumberPerfix == null
              ? null
              : fbb.writeString(object.invoiceNumberPerfix!);
          fbb.startTable(24);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addInt64(1, object.dailyStartCallNumber);
          fbb.addInt64(2, object.dailyReCallNumber);
          fbb.addOffset(3, newOrderDefaultTypeOffset);
          fbb.addOffset(4, printLanguageOffset);
          fbb.addOffset(5, defaultTagOffset);
          fbb.addOffset(6, emailForDailyReportOffset);
          fbb.addOffset(7, emailForShiftReportOffset);
          fbb.addOffset(8, emailForTillReportOffset);
          fbb.addBool(9, object.autoConnectToDevices);
          fbb.addBool(10, object.enableBarcodeScanner);
          fbb.addBool(11, object.acceptOnlineOrders);
          fbb.addBool(12, object.sentOnlineOrdersToKitchen);
          fbb.addBool(13, object.printOnlineOrdersUponReceipt);
          fbb.addBool(14, object.disableAutoPrintInvoice);
          fbb.addBool(15, object.readCallNumberFromMasterCasher);
          fbb.addBool(16, object.printReceiptVoucherTransactions);
          fbb.addBool(17, object.forceSelectPriceList);
          fbb.addBool(18, object.forceSelectChareOnProductSale);
          fbb.addBool(19, object.forceRestCallNumberEveryDay);
          fbb.addOffset(20, invoiceNumberPerfixSymobleOffset);
          fbb.addOffset(21, invoiceNumberPerfixOffset);
          fbb.addBool(22, object.refrencePerfix);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final dailyStartCallNumberParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final dailyReCallNumberParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final newOrderDefaultTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final printLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final defaultTagParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final emailForDailyReportParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final emailForShiftReportParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final emailForTillReportParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final autoConnectToDevicesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final enableBarcodeScannerParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final acceptOnlineOrdersParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final sentOnlineOrdersToKitchenParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);
          final printOnlineOrdersUponReceiptParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30);
          final disableAutoPrintInvoiceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final readCallNumberFromMasterCasherParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final printReceiptVoucherTransactionsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final forceSelectPriceListParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final forceSelectChareOnProductSaleParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final forceRestCallNumberEveryDayParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final invoiceNumberPerfixSymobleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final invoiceNumberPerfixParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 46);
          final refrencePerfixParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final object = DeviceSetting(
              idSeq: idSeqParam,
              dailyStartCallNumber: dailyStartCallNumberParam,
              dailyReCallNumber: dailyReCallNumberParam,
              newOrderDefaultType: newOrderDefaultTypeParam,
              printLanguage: printLanguageParam,
              defaultTag: defaultTagParam,
              emailForDailyReport: emailForDailyReportParam,
              emailForShiftReport: emailForShiftReportParam,
              emailForTillReport: emailForTillReportParam,
              autoConnectToDevices: autoConnectToDevicesParam,
              enableBarcodeScanner: enableBarcodeScannerParam,
              acceptOnlineOrders: acceptOnlineOrdersParam,
              sentOnlineOrdersToKitchen: sentOnlineOrdersToKitchenParam,
              printOnlineOrdersUponReceipt: printOnlineOrdersUponReceiptParam,
              disableAutoPrintInvoice: disableAutoPrintInvoiceParam,
              readCallNumberFromMasterCasher:
                  readCallNumberFromMasterCasherParam,
              printReceiptVoucherTransactions:
                  printReceiptVoucherTransactionsParam,
              forceSelectPriceList: forceSelectPriceListParam,
              forceSelectChareOnProductSale: forceSelectChareOnProductSaleParam,
              forceRestCallNumberEveryDay: forceRestCallNumberEveryDayParam,
              invoiceNumberPerfixSymoble: invoiceNumberPerfixSymobleParam,
              invoiceNumberPerfix: invoiceNumberPerfixParam,
              refrencePerfix: refrencePerfixParam);

          return object;
        }),
    Department1: EntityDefinition<Department1>(
        model: _entities[72],
        toOneRelations: (Department1 object) => [],
        toManyRelations: (Department1 object) =>
            {RelInfo<Department1>.toMany(34, object.idSeq!): object.categories},
        getId: (Department1 object) => object.idSeq,
        setId: (Department1 object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Department1 object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addInt64(4, object.displayOrder);
          fbb.addOffset(5, imageUrlOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final displayOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = Department1(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              displayOrder: displayOrderParam,
              imageUrl: imageUrlParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          InternalToManyAccess.setRelInfo<Department1>(object.categories, store,
              RelInfo<Department1>.toMany(34, object.idSeq!));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ActivationInfo] entity fields to define ObjectBox queries.
class ActivationInfo_ {
  /// see [ActivationInfo.id]
  static final id =
      QueryIntegerProperty<ActivationInfo>(_entities[0].properties[0]);

  /// see [ActivationInfo.name]
  static final name =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[1]);

  /// see [ActivationInfo.fName]
  static final fName =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[2]);

  /// see [ActivationInfo.email]
  static final email =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[3]);

  /// see [ActivationInfo.phone]
  static final phone =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[4]);

  /// see [ActivationInfo.mobile]
  static final mobile =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[5]);

  /// see [ActivationInfo.taxRegName]
  static final taxRegName =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[6]);

  /// see [ActivationInfo.fTaxRegName]
  static final fTaxRegName =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[7]);

  /// see [ActivationInfo.taxCode]
  static final taxCode =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[8]);

  /// see [ActivationInfo.onlineOrderStartTime]
  static final onlineOrderStartTime =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[9]);

  /// see [ActivationInfo.onlineOrderEndTime]
  static final onlineOrderEndTime =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[10]);

  /// see [ActivationInfo.branchPrefix]
  static final branchPrefix =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[11]);

  /// see [ActivationInfo.customerService]
  static final customerService =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[12]);

  /// see [ActivationInfo.countryId]
  static final countryId =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[13]);

  /// see [ActivationInfo.cityId]
  static final cityId =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[14]);

  /// see [ActivationInfo.address]
  static final address =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[15]);

  /// see [ActivationInfo.latitude]
  static final latitude =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[16]);

  /// see [ActivationInfo.longitude]
  static final longitude =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[17]);

  /// see [ActivationInfo.headerInvoiceMsg]
  static final headerInvoiceMsg =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[18]);

  /// see [ActivationInfo.footerInvoiceMsg]
  static final footerInvoiceMsg =
      QueryStringProperty<ActivationInfo>(_entities[0].properties[19]);

  /// see [ActivationInfo.receiveOnlineOrders]
  static final receiveOnlineOrders =
      QueryBooleanProperty<ActivationInfo>(_entities[0].properties[20]);
}

/// [Address] entity fields to define ObjectBox queries.
class Address_ {
  /// see [Address.idSeq]
  static final idSeq =
      QueryIntegerProperty<Address>(_entities[1].properties[0]);

  /// see [Address.id]
  static final id = QueryStringProperty<Address>(_entities[1].properties[1]);

  /// see [Address.addressTypeId]
  static final addressTypeId =
      QueryStringProperty<Address>(_entities[1].properties[2]);

  /// see [Address.name]
  static final name = QueryStringProperty<Address>(_entities[1].properties[3]);

  /// see [Address.fName]
  static final fName = QueryStringProperty<Address>(_entities[1].properties[4]);

  /// see [Address.latitude]
  static final latitude =
      QueryDoubleProperty<Address>(_entities[1].properties[5]);

  /// see [Address.longitude]
  static final longitude =
      QueryDoubleProperty<Address>(_entities[1].properties[6]);

  /// see [Address.deliveryZoneId]
  static final deliveryZoneId =
      QueryStringProperty<Address>(_entities[1].properties[7]);

  /// see [Address.description]
  static final description =
      QueryStringProperty<Address>(_entities[1].properties[8]);

  /// see [Address.mainStreet]
  static final mainStreet =
      QueryStringProperty<Address>(_entities[1].properties[9]);

  /// see [Address.byStreet]
  static final byStreet =
      QueryStringProperty<Address>(_entities[1].properties[10]);

  /// see [Address.buildingNo]
  static final buildingNo =
      QueryStringProperty<Address>(_entities[1].properties[11]);

  /// see [Address.floor]
  static final floor =
      QueryStringProperty<Address>(_entities[1].properties[12]);

  /// see [Address.apartmentNo]
  static final apartmentNo =
      QueryStringProperty<Address>(_entities[1].properties[13]);

  /// see [Address.phone]
  static final phone =
      QueryStringProperty<Address>(_entities[1].properties[14]);

  /// see [Address.popularPlace]
  static final popularPlace =
      QueryStringProperty<Address>(_entities[1].properties[15]);

  /// see [Address.zipCode]
  static final zipCode =
      QueryStringProperty<Address>(_entities[1].properties[16]);
}

/// [AppliedModifer] entity fields to define ObjectBox queries.
class AppliedModifer_ {
  /// see [AppliedModifer.idSeq]
  static final idSeq =
      QueryIntegerProperty<AppliedModifer>(_entities[2].properties[0]);

  /// see [AppliedModifer.modifier]
  static final modifier = QueryRelationToOne<AppliedModifer, UnitModifer>(
      _entities[2].properties[1]);

  /// see [AppliedModifer.options]
  static final options = QueryRelationToMany<AppliedModifer, AppliedOption>(
      _entities[2].relations[0]);
}

/// [AppliedOption] entity fields to define ObjectBox queries.
class AppliedOption_ {
  /// see [AppliedOption.idSeq]
  static final idSeq =
      QueryIntegerProperty<AppliedOption>(_entities[3].properties[0]);

  /// see [AppliedOption.quntity]
  static final quntity =
      QueryDoubleProperty<AppliedOption>(_entities[3].properties[1]);

  /// see [AppliedOption.freeQuntity]
  static final freeQuntity =
      QueryDoubleProperty<AppliedOption>(_entities[3].properties[2]);

  /// see [AppliedOption.priceWithTax]
  static final priceWithTax =
      QueryBooleanProperty<AppliedOption>(_entities[3].properties[3]);

  /// see [AppliedOption.option]
  static final option =
      QueryRelationToOne<AppliedOption, Option>(_entities[3].properties[4]);

  /// see [AppliedOption.taxInfo]
  static final taxInfo =
      QueryRelationToOne<AppliedOption, TaxInfo>(_entities[3].properties[5]);
}

/// [AppliedProduct] entity fields to define ObjectBox queries.
class AppliedProduct_ {
  /// see [AppliedProduct.idSeq]
  static final idSeq =
      QueryIntegerProperty<AppliedProduct>(_entities[4].properties[0]);

  /// see [AppliedProduct.product]
  static final product = QueryRelationToOne<AppliedProduct, ExtractProduct>(
      _entities[4].properties[1]);

  /// see [AppliedProduct.unit]
  static final unit =
      QueryRelationToOne<AppliedProduct, Unit>(_entities[4].properties[2]);

  /// see [AppliedProduct.quantity]
  static final quantity =
      QueryDoubleProperty<AppliedProduct>(_entities[4].properties[3]);

  /// see [AppliedProduct.prodRef]
  static final prodRef =
      QueryStringProperty<AppliedProduct>(_entities[4].properties[4]);

  /// see [AppliedProduct.priceWithTax]
  static final priceWithTax =
      QueryBooleanProperty<AppliedProduct>(_entities[4].properties[5]);

  /// see [AppliedProduct.isCansel]
  static final isCansel =
      QueryBooleanProperty<AppliedProduct>(_entities[4].properties[6]);

  /// see [AppliedProduct.msgCansel]
  static final msgCansel =
      QueryStringProperty<AppliedProduct>(_entities[4].properties[7]);

  /// see [AppliedProduct.priceLevel]
  static final priceLevel =
      QueryIntegerProperty<AppliedProduct>(_entities[4].properties[8]);

  /// see [AppliedProduct.event]
  static final event =
      QueryRelationToOne<AppliedProduct, TimeEvent>(_entities[4].properties[9]);

  /// see [AppliedProduct.discount]
  static final discount =
      QueryRelationToOne<AppliedProduct, Discount>(_entities[4].properties[10]);

  /// see [AppliedProduct.promotion]
  static final promotion = QueryRelationToOne<AppliedProduct, Promotion>(
      _entities[4].properties[11]);

  /// see [AppliedProduct.taxInfo]
  static final taxInfo =
      QueryRelationToOne<AppliedProduct, TaxInfo>(_entities[4].properties[12]);

  /// see [AppliedProduct.throwbackInfo]
  static final throwbackInfo =
      QueryRelationToOne<AppliedProduct, ThrowbackInfo>(
          _entities[4].properties[13]);

  /// see [AppliedProduct.giftCardCode]
  static final giftCardCode =
      QueryStringProperty<AppliedProduct>(_entities[4].properties[14]);

  /// see [AppliedProduct.price]
  static final price =
      QueryDoubleProperty<AppliedProduct>(_entities[4].properties[15]);

  /// see [AppliedProduct.optionPrice]
  static final optionPrice =
      QueryDoubleProperty<AppliedProduct>(_entities[4].properties[16]);

  /// see [AppliedProduct.priceDiscount]
  static final priceDiscount =
      QueryDoubleProperty<AppliedProduct>(_entities[4].properties[17]);

  /// see [AppliedProduct.pricePromotion]
  static final pricePromotion =
      QueryDoubleProperty<AppliedProduct>(_entities[4].properties[18]);

  /// see [AppliedProduct.taxPrice]
  static final taxPrice =
      QueryDoubleProperty<AppliedProduct>(_entities[4].properties[19]);

  /// see [AppliedProduct.freeQuntity]
  static final freeQuntity =
      QueryDoubleProperty<AppliedProduct>(_entities[4].properties[20]);

  /// see [AppliedProduct.note]
  static final note =
      QueryStringProperty<AppliedProduct>(_entities[4].properties[21]);

  /// see [AppliedProduct.appliedModifer]
  static final appliedModifer =
      QueryRelationToMany<AppliedProduct, AppliedModifer>(
          _entities[4].relations[0]);
}

/// [BillCopyHistory] entity fields to define ObjectBox queries.
class BillCopyHistory_ {
  /// see [BillCopyHistory.id]
  static final id =
      QueryIntegerProperty<BillCopyHistory>(_entities[5].properties[0]);

  /// see [BillCopyHistory.billRef]
  static final billRef =
      QueryStringProperty<BillCopyHistory>(_entities[5].properties[1]);

  /// see [BillCopyHistory.billNo]
  static final billNo =
      QueryStringProperty<BillCopyHistory>(_entities[5].properties[2]);

  /// see [BillCopyHistory.billeDate]
  static final billeDate =
      QueryStringProperty<BillCopyHistory>(_entities[5].properties[3]);
}

/// [BillCounter] entity fields to define ObjectBox queries.
class BillCounter_ {
  /// see [BillCounter.id]
  static final id =
      QueryIntegerProperty<BillCounter>(_entities[6].properties[0]);

  /// see [BillCounter.dateTimeOpenOn]
  static final dateTimeOpenOn =
      QueryStringProperty<BillCounter>(_entities[6].properties[1]);

  /// see [BillCounter.dateTimeCloseOn]
  static final dateTimeCloseOn =
      QueryStringProperty<BillCounter>(_entities[6].properties[2]);

  /// see [BillCounter.isClosed]
  static final isClosed =
      QueryBooleanProperty<BillCounter>(_entities[6].properties[3]);

  /// see [BillCounter.curentCounter]
  static final curentCounter =
      QueryIntegerProperty<BillCounter>(_entities[6].properties[4]);

  /// see [BillCounter.billPerfex]
  static final billPerfex =
      QueryStringProperty<BillCounter>(_entities[6].properties[5]);

  /// see [BillCounter.billCopyHistory]
  static final billCopyHistory =
      QueryRelationToMany<BillCounter, BillCopyHistory>(
          _entities[6].relations[0]);
}

/// [BillSetting] entity fields to define ObjectBox queries.
class BillSetting_ {
  /// see [BillSetting.id]
  static final id =
      QueryIntegerProperty<BillSetting>(_entities[7].properties[0]);

  /// see [BillSetting.logoUrl]
  static final logoUrl =
      QueryStringProperty<BillSetting>(_entities[7].properties[1]);

  /// see [BillSetting.companyName]
  static final companyName =
      QueryStringProperty<BillSetting>(_entities[7].properties[2]);

  /// see [BillSetting.fCompanyName]
  static final fCompanyName =
      QueryStringProperty<BillSetting>(_entities[7].properties[3]);

  /// see [BillSetting.taxNo]
  static final taxNo =
      QueryStringProperty<BillSetting>(_entities[7].properties[4]);

  /// see [BillSetting.phoneNumber]
  static final phoneNumber =
      QueryStringProperty<BillSetting>(_entities[7].properties[5]);

  /// see [BillSetting.address]
  static final address =
      QueryStringProperty<BillSetting>(_entities[7].properties[6]);

  /// see [BillSetting.fAddress]
  static final fAddress =
      QueryStringProperty<BillSetting>(_entities[7].properties[7]);

  /// see [BillSetting.headerInvoiceMessage]
  static final headerInvoiceMessage =
      QueryStringProperty<BillSetting>(_entities[7].properties[8]);

  /// see [BillSetting.fHeaderInvoiceMessage]
  static final fHeaderInvoiceMessage =
      QueryStringProperty<BillSetting>(_entities[7].properties[9]);

  /// see [BillSetting.footerInvoiceMessage]
  static final footerInvoiceMessage =
      QueryStringProperty<BillSetting>(_entities[7].properties[10]);

  /// see [BillSetting.fFooterInvoiceMessage]
  static final fFooterInvoiceMessage =
      QueryStringProperty<BillSetting>(_entities[7].properties[11]);

  /// see [BillSetting.invoiceRoundFactor]
  static final invoiceRoundFactor =
      QueryIntegerProperty<BillSetting>(_entities[7].properties[12]);

  /// see [BillSetting.enablePrintBundleProductChildren]
  static final enablePrintBundleProductChildren =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[13]);

  /// see [BillSetting.printOrderNumber]
  static final printOrderNumber =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[14]);

  /// see [BillSetting.printCalories]
  static final printCalories =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[15]);

  /// see [BillSetting.printSubTotal]
  static final printSubTotal =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[16]);

  /// see [BillSetting.printRoundDigit]
  static final printRoundDigit =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[17]);

  /// see [BillSetting.printProductUnit]
  static final printProductUnit =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[18]);

  /// see [BillSetting.printProductUnitPrice]
  static final printProductUnitPrice =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[19]);

  /// see [BillSetting.printProductTotalPrice]
  static final printProductTotalPrice =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[20]);

  /// see [BillSetting.printProductDiscountPrice]
  static final printProductDiscountPrice =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[21]);

  /// see [BillSetting.printProductFreeQuantity]
  static final printProductFreeQuantity =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[22]);

  /// see [BillSetting.printProductTotalPriceBeforeTax]
  static final printProductTotalPriceBeforeTax =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[23]);

  /// see [BillSetting.printProductTaxAmount]
  static final printProductTaxAmount =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[24]);

  /// see [BillSetting.printProductTaxPercentage]
  static final printProductTaxPercentage =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[25]);

  /// see [BillSetting.printProductTotalPriceAfterDiscount]
  static final printProductTotalPriceAfterDiscount =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[26]);

  /// see [BillSetting.printProductTotalPriceIncludeTax]
  static final printProductTotalPriceIncludeTax =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[27]);

  /// see [BillSetting.printOrderClosedUser]
  static final printOrderClosedUser =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[28]);

  /// see [BillSetting.printOrderCreatedUser]
  static final printOrderCreatedUser =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[29]);

  /// see [BillSetting.printCheckNumber]
  static final printCheckNumber =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[30]);

  /// see [BillSetting.hideFreeModifierOptions]
  static final hideFreeModifierOptions =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[31]);

  /// see [BillSetting.invoiceTemplate]
  static final invoiceTemplate =
      QueryStringProperty<BillSetting>(_entities[7].properties[32]);

  /// see [BillSetting.refundTemplate]
  static final refundTemplate =
      QueryStringProperty<BillSetting>(_entities[7].properties[33]);

  /// see [BillSetting.autoPrintOnSave]
  static final autoPrintOnSave =
      QueryBooleanProperty<BillSetting>(_entities[7].properties[34]);

  /// see [BillSetting.printlanguage]
  static final printlanguage =
      QueryStringProperty<BillSetting>(_entities[7].properties[35]);

  /// see [BillSetting.defaultLanguage]
  static final defaultLanguage =
      QueryStringProperty<BillSetting>(_entities[7].properties[36]);

  /// see [BillSetting.secondLanguage]
  static final secondLanguage =
      QueryStringProperty<BillSetting>(_entities[7].properties[37]);

  /// see [BillSetting.invoiceTitle]
  static final invoiceTitle =
      QueryStringProperty<BillSetting>(_entities[7].properties[38]);

  /// see [BillSetting.fInvoiceTitle]
  static final fInvoiceTitle =
      QueryStringProperty<BillSetting>(_entities[7].properties[39]);

  /// see [BillSetting.logoData]
  static final logoData =
      QueryRelationToOne<BillSetting, LogoData>(_entities[7].properties[40]);
}

/// [Branch] entity fields to define ObjectBox queries.
class Branch_ {
  /// see [Branch.idSeq]
  static final idSeq = QueryIntegerProperty<Branch>(_entities[8].properties[0]);

  /// see [Branch.id]
  static final id = QueryStringProperty<Branch>(_entities[8].properties[1]);

  /// see [Branch.name]
  static final name = QueryStringProperty<Branch>(_entities[8].properties[2]);

  /// see [Branch.email]
  static final email = QueryStringProperty<Branch>(_entities[8].properties[3]);

  /// see [Branch.phone]
  static final phone = QueryStringProperty<Branch>(_entities[8].properties[4]);

  /// see [Branch.mobile]
  static final mobile = QueryStringProperty<Branch>(_entities[8].properties[5]);

  /// see [Branch.taxRegName]
  static final taxRegName =
      QueryStringProperty<Branch>(_entities[8].properties[6]);

  /// see [Branch.taxCode]
  static final taxCode =
      QueryStringProperty<Branch>(_entities[8].properties[7]);

  /// see [Branch.onlineOrderStartTime]
  static final onlineOrderStartTime =
      QueryStringProperty<Branch>(_entities[8].properties[8]);

  /// see [Branch.onlineOrderEndTime]
  static final onlineOrderEndTime =
      QueryStringProperty<Branch>(_entities[8].properties[9]);

  /// see [Branch.branchPrefix]
  static final branchPrefix =
      QueryStringProperty<Branch>(_entities[8].properties[10]);

  /// see [Branch.customerService]
  static final customerService =
      QueryStringProperty<Branch>(_entities[8].properties[11]);

  /// see [Branch.address]
  static final address =
      QueryStringProperty<Branch>(_entities[8].properties[12]);

  /// see [Branch.headerInvoiceMsg]
  static final headerInvoiceMsg =
      QueryStringProperty<Branch>(_entities[8].properties[13]);

  /// see [Branch.footerInvoiceMsg]
  static final footerInvoiceMsg =
      QueryStringProperty<Branch>(_entities[8].properties[14]);

  /// see [Branch.receiveOnlineOrders]
  static final receiveOnlineOrders =
      QueryBooleanProperty<Branch>(_entities[8].properties[15]);
}

/// [Branches] entity fields to define ObjectBox queries.
class Branches_ {
  /// see [Branches.id]
  static final id = QueryIntegerProperty<Branches>(_entities[9].properties[0]);

  /// see [Branches.tenantId]
  static final tenantId =
      QueryStringProperty<Branches>(_entities[9].properties[1]);

  /// see [Branches.branchId]
  static final branchId =
      QueryStringProperty<Branches>(_entities[9].properties[2]);

  /// see [Branches.branchName]
  static final branchName =
      QueryStringProperty<Branches>(_entities[9].properties[3]);
}

/// [CashierSetting] entity fields to define ObjectBox queries.
class CashierSetting_ {
  /// see [CashierSetting.idSeq]
  static final idSeq =
      QueryIntegerProperty<CashierSetting>(_entities[10].properties[0]);

  /// see [CashierSetting.enableCashSales]
  static final enableCashSales =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[1]);

  /// see [CashierSetting.enableCreditCardSales]
  static final enableCreditCardSales =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[2]);

  /// see [CashierSetting.enableCustomerSales]
  static final enableCustomerSales =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[3]);

  /// see [CashierSetting.enableFreeQuantity]
  static final enableFreeQuantity =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[4]);

  /// see [CashierSetting.enableEditItemName]
  static final enableEditItemName =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[5]);

  /// see [CashierSetting.enableSalesDiscount]
  static final enableSalesDiscount =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[6]);

  /// see [CashierSetting.enableChangePrice]
  static final enableChangePrice =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[7]);

  /// see [CashierSetting.enableProductPackages]
  static final enableProductPackages =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[8]);

  /// see [CashierSetting.enableTablesSystem]
  static final enableTablesSystem =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[9]);

  /// see [CashierSetting.tableGuestCountRequired]
  static final tableGuestCountRequired =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[10]);

  /// see [CashierSetting.tableRequired]
  static final tableRequired =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[11]);

  /// see [CashierSetting.discountPercentageLimit]
  static final discountPercentageLimit =
      QueryDoubleProperty<CashierSetting>(_entities[10].properties[12]);

  /// see [CashierSetting.defaultCustomerId]
  static final defaultCustomerId =
      QueryStringProperty<CashierSetting>(_entities[10].properties[13]);

  /// see [CashierSetting.priceListId]
  static final priceListId =
      QueryStringProperty<CashierSetting>(_entities[10].properties[14]);

  /// see [CashierSetting.daily]
  static final daily =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[15]);

  /// see [CashierSetting.submittingRequestsDelayMinutes]
  static final submittingRequestsDelayMinutes =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[16]);

  /// see [CashierSetting.inactiveUsersLogoutMinutes]
  static final inactiveUsersLogoutMinutes =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[17]);

  /// see [CashierSetting.maximumReturnPeriodMinutes]
  static final maximumReturnPeriodMinutes =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[18]);

  /// see [CashierSetting.requireOrderTypesForOrders]
  static final requireOrderTypesForOrders =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[19]);

  /// see [CashierSetting.roundingType]
  static final roundingType =
      QueryStringProperty<CashierSetting>(_entities[10].properties[20]);

  /// see [CashierSetting.roundDigits]
  static final roundDigits =
      QueryDoubleProperty<CashierSetting>(_entities[10].properties[21]);

  /// see [CashierSetting.kitchenSortingType]
  static final kitchenSortingType =
      QueryStringProperty<CashierSetting>(_entities[10].properties[22]);

  /// see [CashierSetting.printSortingType]
  static final printSortingType =
      QueryStringProperty<CashierSetting>(_entities[10].properties[23]);

  /// see [CashierSetting.activeTips]
  static final activeTips =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[24]);

  /// see [CashierSetting.discountRequireCustomerInfo]
  static final discountRequireCustomerInfo =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[25]);

  /// see [CashierSetting.returnRequireCustomerInfo]
  static final returnRequireCustomerInfo =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[26]);

  /// see [CashierSetting.requireCancelReason]
  static final requireCancelReason =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[27]);

  /// see [CashierSetting.autoSentOrderToKitchenAfterPaid]
  static final autoSentOrderToKitchenAfterPaid =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[28]);

  /// see [CashierSetting.autoSyncDataAtStartOfDay]
  static final autoSyncDataAtStartOfDay =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[29]);

  /// see [CashierSetting.autoPrintProductsReport]
  static final autoPrintProductsReport =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[30]);

  /// see [CashierSetting.autoPrintTillsReport]
  static final autoPrintTillsReport =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[31]);

  /// see [CashierSetting.preventEndingDayBeforeInventoryCount]
  static final preventEndingDayBeforeInventoryCount =
      QueryBooleanProperty<CashierSetting>(_entities[10].properties[32]);

  /// see [CashierSetting.imei]
  static final imei =
      QueryStringProperty<CashierSetting>(_entities[10].properties[33]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.idSeq]
  static final idSeq =
      QueryIntegerProperty<Category>(_entities[11].properties[0]);

  /// see [Category.id]
  static final id = QueryStringProperty<Category>(_entities[11].properties[1]);

  /// see [Category.name]
  static final name =
      QueryStringProperty<Category>(_entities[11].properties[2]);

  /// see [Category.fName]
  static final fName =
      QueryStringProperty<Category>(_entities[11].properties[3]);

  /// see [Category.displayOrder]
  static final displayOrder =
      QueryIntegerProperty<Category>(_entities[11].properties[4]);

  /// see [Category.imageUrl]
  static final imageUrl =
      QueryStringProperty<Category>(_entities[11].properties[5]);
}

/// [Coupon] entity fields to define ObjectBox queries.
class Coupon_ {
  /// see [Coupon.idSeq]
  static final idSeq =
      QueryIntegerProperty<Coupon>(_entities[12].properties[0]);

  /// see [Coupon.id]
  static final id = QueryStringProperty<Coupon>(_entities[12].properties[1]);

  /// see [Coupon.couponCode]
  static final couponCode =
      QueryStringProperty<Coupon>(_entities[12].properties[2]);

  /// see [Coupon.useCountForAll]
  static final useCountForAll =
      QueryIntegerProperty<Coupon>(_entities[12].properties[3]);

  /// see [Coupon.useCountForOne]
  static final useCountForOne =
      QueryIntegerProperty<Coupon>(_entities[12].properties[4]);

  /// see [Coupon.maximumUses]
  static final maximumUses =
      QueryIntegerProperty<Coupon>(_entities[12].properties[5]);

  /// see [Coupon.startDate]
  static final startDate =
      QueryStringProperty<Coupon>(_entities[12].properties[6]);

  /// see [Coupon.endDate]
  static final endDate =
      QueryStringProperty<Coupon>(_entities[12].properties[7]);

  /// see [Coupon.startTime]
  static final startTime =
      QueryStringProperty<Coupon>(_entities[12].properties[8]);

  /// see [Coupon.endTime]
  static final endTime =
      QueryStringProperty<Coupon>(_entities[12].properties[9]);

  /// see [Coupon.discountId]
  static final discountId =
      QueryStringProperty<Coupon>(_entities[12].properties[10]);

  /// see [Coupon.days]
  static final days =
      QueryIntegerVectorProperty<Coupon>(_entities[12].properties[11]);

  /// see [Coupon.couponLevel]
  static final couponLevel =
      QueryIntegerProperty<Coupon>(_entities[12].properties[12]);

  /// see [Coupon.numberOFProducts]
  static final numberOFProducts =
      QueryIntegerProperty<Coupon>(_entities[12].properties[13]);
}

/// [Currencies] entity fields to define ObjectBox queries.
class Currencies_ {
  /// see [Currencies.idSeq]
  static final idSeq =
      QueryIntegerProperty<Currencies>(_entities[13].properties[0]);

  /// see [Currencies.id]
  static final id =
      QueryStringProperty<Currencies>(_entities[13].properties[1]);

  /// see [Currencies.name]
  static final name =
      QueryStringProperty<Currencies>(_entities[13].properties[2]);

  /// see [Currencies.fName]
  static final fName =
      QueryStringProperty<Currencies>(_entities[13].properties[3]);

  /// see [Currencies.currencyCode]
  static final currencyCode =
      QueryStringProperty<Currencies>(_entities[13].properties[4]);

  /// see [Currencies.displayLocale]
  static final displayLocale =
      QueryStringProperty<Currencies>(_entities[13].properties[5]);

  /// see [Currencies.isDefault]
  static final isDefault =
      QueryBooleanProperty<Currencies>(_entities[13].properties[6]);

  /// see [Currencies.customFormatting]
  static final customFormatting =
      QueryStringProperty<Currencies>(_entities[13].properties[7]);

  /// see [Currencies.exchangeRate]
  static final exchangeRate =
      QueryDoubleProperty<Currencies>(_entities[13].properties[8]);

  /// see [Currencies.minExchangeRate]
  static final minExchangeRate =
      QueryDoubleProperty<Currencies>(_entities[13].properties[9]);

  /// see [Currencies.maxExchangeRate]
  static final maxExchangeRate =
      QueryDoubleProperty<Currencies>(_entities[13].properties[10]);

  /// see [Currencies.dens]
  static final dens =
      QueryIntegerVectorProperty<Currencies>(_entities[13].properties[11]);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.idSeq]
  static final idSeq =
      QueryIntegerProperty<Customer>(_entities[14].properties[0]);

  /// see [Customer.id]
  static final id = QueryStringProperty<Customer>(_entities[14].properties[1]);

  /// see [Customer.name]
  static final name =
      QueryStringProperty<Customer>(_entities[14].properties[2]);

  /// see [Customer.fName]
  static final fName =
      QueryStringProperty<Customer>(_entities[14].properties[3]);

  /// see [Customer.mobile]
  static final mobile =
      QueryStringProperty<Customer>(_entities[14].properties[4]);

  /// see [Customer.email]
  static final email =
      QueryStringProperty<Customer>(_entities[14].properties[5]);

  /// see [Customer.debitLimit]
  static final debitLimit =
      QueryDoubleProperty<Customer>(_entities[14].properties[6]);

  /// see [Customer.balance]
  static final balance =
      QueryDoubleProperty<Customer>(_entities[14].properties[7]);

  /// see [Customer.paymentMethodId]
  static final paymentMethodId =
      QueryStringProperty<Customer>(_entities[14].properties[8]);

  /// see [Customer.currencyId]
  static final currencyId =
      QueryStringProperty<Customer>(_entities[14].properties[9]);

  /// see [Customer.taxNumber]
  static final taxNumber =
      QueryStringProperty<Customer>(_entities[14].properties[10]);

  /// see [Customer.taxRegisterationName]
  static final taxRegisterationName =
      QueryStringProperty<Customer>(_entities[14].properties[11]);

  /// see [Customer.inBlackList]
  static final inBlackList =
      QueryBooleanProperty<Customer>(_entities[14].properties[12]);

  /// see [Customer.blackListNote]
  static final blackListNote =
      QueryStringProperty<Customer>(_entities[14].properties[13]);

  /// see [Customer.priceListId]
  static final priceListId =
      QueryStringProperty<Customer>(_entities[14].properties[14]);

  /// see [Customer.enableHouseAccount]
  static final enableHouseAccount =
      QueryBooleanProperty<Customer>(_entities[14].properties[15]);

  /// see [Customer.addersses]
  static final addersses =
      QueryRelationToMany<Customer, Address>(_entities[14].relations[0]);

  /// see [Customer.houseAccountTranscations]
  static final houseAccountTranscations =
      QueryRelationToMany<Customer, Transaction>(_entities[14].relations[1]);
}

/// [DeliveryCompany] entity fields to define ObjectBox queries.
class DeliveryCompany_ {
  /// see [DeliveryCompany.idSeq]
  static final idSeq =
      QueryIntegerProperty<DeliveryCompany>(_entities[15].properties[0]);

  /// see [DeliveryCompany.id]
  static final id =
      QueryStringProperty<DeliveryCompany>(_entities[15].properties[1]);

  /// see [DeliveryCompany.name]
  static final name =
      QueryStringProperty<DeliveryCompany>(_entities[15].properties[2]);

  /// see [DeliveryCompany.fName]
  static final fName =
      QueryStringProperty<DeliveryCompany>(_entities[15].properties[3]);

  /// see [DeliveryCompany.mobile]
  static final mobile =
      QueryStringProperty<DeliveryCompany>(_entities[15].properties[4]);

  /// see [DeliveryCompany.email]
  static final email =
      QueryStringProperty<DeliveryCompany>(_entities[15].properties[5]);

  /// see [DeliveryCompany.countryId]
  static final countryId =
      QueryStringProperty<DeliveryCompany>(_entities[15].properties[6]);

  /// see [DeliveryCompany.imageUrl]
  static final imageUrl =
      QueryStringProperty<DeliveryCompany>(_entities[15].properties[7]);

  /// see [DeliveryCompany.commissionRate]
  static final commissionRate =
      QueryDoubleProperty<DeliveryCompany>(_entities[15].properties[8]);
}

/// [DeliveryCompanyInfo] entity fields to define ObjectBox queries.
class DeliveryCompanyInfo_ {
  /// see [DeliveryCompanyInfo.idSeq]
  static final idSeq =
      QueryIntegerProperty<DeliveryCompanyInfo>(_entities[16].properties[0]);

  /// see [DeliveryCompanyInfo.company]
  static final company =
      QueryRelationToOne<DeliveryCompanyInfo, DeliveryCompany>(
          _entities[16].properties[1]);

  /// see [DeliveryCompanyInfo.orderNumber]
  static final orderNumber =
      QueryStringProperty<DeliveryCompanyInfo>(_entities[16].properties[2]);
}

/// [DeliveryZone] entity fields to define ObjectBox queries.
class DeliveryZone_ {
  /// see [DeliveryZone.idSeq]
  static final idSeq =
      QueryIntegerProperty<DeliveryZone>(_entities[17].properties[0]);

  /// see [DeliveryZone.id]
  static final id =
      QueryStringProperty<DeliveryZone>(_entities[17].properties[1]);

  /// see [DeliveryZone.name]
  static final name =
      QueryStringProperty<DeliveryZone>(_entities[17].properties[2]);

  /// see [DeliveryZone.fName]
  static final fName =
      QueryStringProperty<DeliveryZone>(_entities[17].properties[3]);

  /// see [DeliveryZone.deliveryZoneCoordinate]
  static final deliveryZoneCoordinate =
      QueryStringProperty<DeliveryZone>(_entities[17].properties[4]);

  /// see [DeliveryZone.minimumDeliveryCharge]
  static final minimumDeliveryCharge =
      QueryDoubleProperty<DeliveryZone>(_entities[17].properties[5]);

  /// see [DeliveryZone.deliveryChargePerKM]
  static final deliveryChargePerKM =
      QueryDoubleProperty<DeliveryZone>(_entities[17].properties[6]);
}

/// [Discount] entity fields to define ObjectBox queries.
class Discount_ {
  /// see [Discount.idSeq]
  static final idSeq =
      QueryIntegerProperty<Discount>(_entities[18].properties[0]);

  /// see [Discount.id]
  static final id = QueryStringProperty<Discount>(_entities[18].properties[1]);

  /// see [Discount.name]
  static final name =
      QueryStringProperty<Discount>(_entities[18].properties[2]);

  /// see [Discount.fName]
  static final fName =
      QueryStringProperty<Discount>(_entities[18].properties[3]);

  /// see [Discount.startDate]
  static final startDate =
      QueryStringProperty<Discount>(_entities[18].properties[4]);

  /// see [Discount.endDate]
  static final endDate =
      QueryStringProperty<Discount>(_entities[18].properties[5]);

  /// see [Discount.startTime]
  static final startTime =
      QueryStringProperty<Discount>(_entities[18].properties[6]);

  /// see [Discount.endTime]
  static final endTime =
      QueryStringProperty<Discount>(_entities[18].properties[7]);

  /// see [Discount.discountAppliedTo]
  static final discountAppliedTo =
      QueryIntegerProperty<Discount>(_entities[18].properties[8]);

  /// see [Discount.discountType]
  static final discountType =
      QueryIntegerProperty<Discount>(_entities[18].properties[9]);

  /// see [Discount.discountPercentage]
  static final discountPercentage =
      QueryDoubleProperty<Discount>(_entities[18].properties[10]);

  /// see [Discount.discountAmount]
  static final discountAmount =
      QueryDoubleProperty<Discount>(_entities[18].properties[11]);

  /// see [Discount.maximumDiscountAmount]
  static final maximumDiscountAmount =
      QueryDoubleProperty<Discount>(_entities[18].properties[12]);

  /// see [Discount.minimalOrderAmount]
  static final minimalOrderAmount =
      QueryDoubleProperty<Discount>(_entities[18].properties[13]);

  /// see [Discount.taxable]
  static final taxable =
      QueryBooleanProperty<Discount>(_entities[18].properties[14]);

  /// see [Discount.productIDs]
  static final productIDs =
      QueryStringVectorProperty<Discount>(_entities[18].properties[15]);

  /// see [Discount.days]
  static final days =
      QueryIntegerVectorProperty<Discount>(_entities[18].properties[16]);

  /// see [Discount.orderTypes]
  static final orderTypes =
      QueryIntegerVectorProperty<Discount>(_entities[18].properties[17]);

  /// see [Discount.priceList]
  static final priceList =
      QueryStringVectorProperty<Discount>(_entities[18].properties[18]);

  /// see [Discount.customers]
  static final customers =
      QueryStringVectorProperty<Discount>(_entities[18].properties[19]);

  /// see [Discount.departments]
  static final departments =
      QueryStringVectorProperty<Discount>(_entities[18].properties[20]);

  /// see [Discount.categoeries]
  static final categoeries =
      QueryStringVectorProperty<Discount>(_entities[18].properties[21]);
}

/// [ExtractCategory] entity fields to define ObjectBox queries.
class ExtractCategory_ {
  /// see [ExtractCategory.idSeq]
  static final idSeq =
      QueryIntegerProperty<ExtractCategory>(_entities[19].properties[0]);

  /// see [ExtractCategory.id]
  static final id =
      QueryStringProperty<ExtractCategory>(_entities[19].properties[1]);

  /// see [ExtractCategory.order]
  static final order =
      QueryIntegerProperty<ExtractCategory>(_entities[19].properties[2]);

  /// see [ExtractCategory.image]
  static final image =
      QueryStringProperty<ExtractCategory>(_entities[19].properties[3]);

  /// see [ExtractCategory.name]
  static final name =
      QueryStringProperty<ExtractCategory>(_entities[19].properties[4]);

  /// see [ExtractCategory.fName]
  static final fName =
      QueryStringProperty<ExtractCategory>(_entities[19].properties[5]);
}

/// [ExtractDepartment] entity fields to define ObjectBox queries.
class ExtractDepartment_ {
  /// see [ExtractDepartment.idSeq]
  static final idSeq =
      QueryIntegerProperty<ExtractDepartment>(_entities[20].properties[0]);

  /// see [ExtractDepartment.id]
  static final id =
      QueryStringProperty<ExtractDepartment>(_entities[20].properties[1]);

  /// see [ExtractDepartment.order]
  static final order =
      QueryIntegerProperty<ExtractDepartment>(_entities[20].properties[2]);

  /// see [ExtractDepartment.image]
  static final image =
      QueryStringProperty<ExtractDepartment>(_entities[20].properties[3]);

  /// see [ExtractDepartment.name]
  static final name =
      QueryStringProperty<ExtractDepartment>(_entities[20].properties[4]);

  /// see [ExtractDepartment.fName]
  static final fName =
      QueryStringProperty<ExtractDepartment>(_entities[20].properties[5]);

  /// see [ExtractDepartment.categories]
  static final categories =
      QueryRelationToMany<ExtractDepartment, ExtractCategory>(
          _entities[20].relations[0]);
}

/// [ExtractProduct] entity fields to define ObjectBox queries.
class ExtractProduct_ {
  /// see [ExtractProduct.idSeq]
  static final idSeq =
      QueryIntegerProperty<ExtractProduct>(_entities[21].properties[0]);

  /// see [ExtractProduct.id]
  static final id =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[1]);

  /// see [ExtractProduct.name]
  static final name =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[2]);

  /// see [ExtractProduct.fName]
  static final fName =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[3]);

  /// see [ExtractProduct.sku]
  static final sku =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[4]);

  /// see [ExtractProduct.barcode]
  static final barcode =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[5]);

  /// see [ExtractProduct.productTypeId]
  static final productTypeId =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[6]);

  /// see [ExtractProduct.costType]
  static final costType =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[7]);

  /// see [ExtractProduct.priceType]
  static final priceType =
      QueryIntegerProperty<ExtractProduct>(_entities[21].properties[8]);

  /// see [ExtractProduct.salesMethod]
  static final salesMethod =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[9]);

  /// see [ExtractProduct.price]
  static final price =
      QueryDoubleProperty<ExtractProduct>(_entities[21].properties[10]);

  /// see [ExtractProduct.cost]
  static final cost =
      QueryDoubleProperty<ExtractProduct>(_entities[21].properties[11]);

  /// see [ExtractProduct.preparationTime]
  static final preparationTime =
      QueryIntegerProperty<ExtractProduct>(_entities[21].properties[12]);

  /// see [ExtractProduct.activeQRScan]
  static final activeQRScan =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[13]);

  /// see [ExtractProduct.qrScanOnSameDate]
  static final qrScanOnSameDate =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[14]);

  /// see [ExtractProduct.enableSalesDiscount]
  static final enableSalesDiscount =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[15]);

  /// see [ExtractProduct.discountPercentageLimit]
  static final discountPercentageLimit =
      QueryDoubleProperty<ExtractProduct>(_entities[21].properties[16]);

  /// see [ExtractProduct.enableFreeQuantity]
  static final enableFreeQuantity =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[17]);

  /// see [ExtractProduct.enableDateExpire]
  static final enableDateExpire =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[18]);

  /// see [ExtractProduct.enableIMEISerial]
  static final enableIMEISerial =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[19]);

  /// see [ExtractProduct.enableWeights]
  static final enableWeights =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[20]);

  /// see [ExtractProduct.scanPriceFromScale]
  static final scanPriceFromScale =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[21]);

  /// see [ExtractProduct.scalePriceIncludeTax]
  static final scalePriceIncludeTax =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[22]);

  /// see [ExtractProduct.independentPrinting]
  static final independentPrinting =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[23]);

  /// see [ExtractProduct.calculateQuantityFromTotalPrice]
  static final calculateQuantityFromTotalPrice =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[24]);

  /// see [ExtractProduct.reservationRequired]
  static final reservationRequired =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[25]);

  /// see [ExtractProduct.scaleBarcodeDigits]
  static final scaleBarcodeDigits =
      QueryIntegerProperty<ExtractProduct>(_entities[21].properties[26]);

  /// see [ExtractProduct.scaleProductCodeDigits]
  static final scaleProductCodeDigits =
      QueryIntegerProperty<ExtractProduct>(_entities[21].properties[27]);

  /// see [ExtractProduct.scaleIntDigits]
  static final scaleIntDigits =
      QueryIntegerProperty<ExtractProduct>(_entities[21].properties[28]);

  /// see [ExtractProduct.scaledecimalDigits]
  static final scaledecimalDigits =
      QueryIntegerProperty<ExtractProduct>(_entities[21].properties[29]);

  /// see [ExtractProduct.scaleProductCodeFirstInBracode]
  static final scaleProductCodeFirstInBracode =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[30]);

  /// see [ExtractProduct.availableStartDateTime]
  static final availableStartDateTime =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[31]);

  /// see [ExtractProduct.availableEndDateTime]
  static final availableEndDateTime =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[32]);

  /// see [ExtractProduct.description]
  static final description =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[33]);

  /// see [ExtractProduct.fDescription]
  static final fDescription =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[34]);

  /// see [ExtractProduct.imageUrl]
  static final imageUrl =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[35]);

  /// see [ExtractProduct.calories]
  static final calories =
      QueryIntegerProperty<ExtractProduct>(_entities[21].properties[36]);

  /// see [ExtractProduct.minimumLevel]
  static final minimumLevel =
      QueryIntegerProperty<ExtractProduct>(_entities[21].properties[37]);

  /// see [ExtractProduct.maximumLevel]
  static final maximumLevel =
      QueryIntegerProperty<ExtractProduct>(_entities[21].properties[38]);

  /// see [ExtractProduct.departmentId]
  static final departmentId =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[39]);

  /// see [ExtractProduct.active]
  static final active =
      QueryBooleanProperty<ExtractProduct>(_entities[21].properties[40]);

  /// see [ExtractProduct.taxGroupId]
  static final taxGroupId =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[41]);

  /// see [ExtractProduct.productNature]
  static final productNature =
      QueryIntegerProperty<ExtractProduct>(_entities[21].properties[42]);

  /// see [ExtractProduct.subName]
  static final subName =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[43]);

  /// see [ExtractProduct.fSubName]
  static final fSubName =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[44]);

  /// see [ExtractProduct.promotionalName]
  static final promotionalName =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[45]);

  /// see [ExtractProduct.fPromotionalName]
  static final fPromotionalName =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[46]);

  /// see [ExtractProduct.tags]
  static final tags =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[47]);

  /// see [ExtractProduct.fTags]
  static final fTags =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[48]);

  /// see [ExtractProduct.categoryId]
  static final categoryId =
      QueryStringProperty<ExtractProduct>(_entities[21].properties[49]);

  /// see [ExtractProduct.units]
  static final units =
      QueryRelationToMany<ExtractProduct, Unit>(_entities[21].relations[0]);

  /// see [ExtractProduct.groups]
  static final groups =
      QueryRelationToMany<ExtractProduct, Group>(_entities[21].relations[1]);
}

/// [Fee] entity fields to define ObjectBox queries.
class Fee_ {
  /// see [Fee.idSeq]
  static final idSeq = QueryIntegerProperty<Fee>(_entities[22].properties[0]);

  /// see [Fee.id]
  static final id = QueryStringProperty<Fee>(_entities[22].properties[1]);

  /// see [Fee.name]
  static final name = QueryStringProperty<Fee>(_entities[22].properties[2]);

  /// see [Fee.fName]
  static final fName = QueryStringProperty<Fee>(_entities[22].properties[3]);

  /// see [Fee.value]
  static final value = QueryDoubleProperty<Fee>(_entities[22].properties[4]);

  /// see [Fee.orderTypes]
  static final orderTypes =
      QueryIntegerVectorProperty<Fee>(_entities[22].properties[5]);

  /// see [Fee.days]
  static final days =
      QueryIntegerVectorProperty<Fee>(_entities[22].properties[6]);

  /// see [Fee.applyAuto]
  static final applyAuto =
      QueryBooleanProperty<Fee>(_entities[22].properties[7]);

  /// see [Fee.applyToSubtotal]
  static final applyToSubtotal =
      QueryBooleanProperty<Fee>(_entities[22].properties[8]);

  /// see [Fee.type]
  static final type = QueryIntegerProperty<Fee>(_entities[22].properties[9]);

  /// see [Fee.valueType]
  static final valueType =
      QueryIntegerProperty<Fee>(_entities[22].properties[10]);

  /// see [Fee.percentage]
  static final percentage =
      QueryDoubleProperty<Fee>(_entities[22].properties[11]);

  /// see [Fee.products]
  static final products =
      QueryStringVectorProperty<Fee>(_entities[22].properties[12]);

  /// see [Fee.taxGroupId]
  static final taxGroupId =
      QueryStringProperty<Fee>(_entities[22].properties[13]);

  /// see [Fee.applyForProducts]
  static final applyForProducts =
      QueryBooleanProperty<Fee>(_entities[22].properties[14]);

  /// see [Fee.printSeparatelyInTotalInvoice]
  static final printSeparatelyInTotalInvoice =
      QueryBooleanProperty<Fee>(_entities[22].properties[15]);

  /// see [Fee.amountIncludeInProductPrice]
  static final amountIncludeInProductPrice =
      QueryBooleanProperty<Fee>(_entities[22].properties[16]);

  /// see [Fee.minAmountPerProduct]
  static final minAmountPerProduct =
      QueryDoubleProperty<Fee>(_entities[22].properties[17]);

  /// see [Fee.maxAmountPerProduct]
  static final maxAmountPerProduct =
      QueryDoubleProperty<Fee>(_entities[22].properties[18]);
}

/// [FeeTaxInfo] entity fields to define ObjectBox queries.
class FeeTaxInfo_ {
  /// see [FeeTaxInfo.idSeq]
  static final idSeq =
      QueryIntegerProperty<FeeTaxInfo>(_entities[23].properties[0]);

  /// see [FeeTaxInfo.taxGroupId]
  static final taxGroupId =
      QueryStringProperty<FeeTaxInfo>(_entities[23].properties[1]);

  /// see [FeeTaxInfo.value]
  static final value =
      QueryDoubleProperty<FeeTaxInfo>(_entities[23].properties[2]);
}

/// [FeeValue] entity fields to define ObjectBox queries.
class FeeValue_ {
  /// see [FeeValue.idSeq]
  static final idSeq =
      QueryIntegerProperty<FeeValue>(_entities[24].properties[0]);

  /// see [FeeValue.feeId]
  static final feeId =
      QueryStringProperty<FeeValue>(_entities[24].properties[1]);

  /// see [FeeValue.value]
  static final value =
      QueryDoubleProperty<FeeValue>(_entities[24].properties[2]);

  /// see [FeeValue.applyAuto]
  static final applyAuto =
      QueryBooleanProperty<FeeValue>(_entities[24].properties[3]);

  /// see [FeeValue.taxInfo]
  static final taxInfo =
      QueryRelationToOne<FeeValue, FeeTaxInfo>(_entities[24].properties[4]);
}

/// [FreeOption] entity fields to define ObjectBox queries.
class FreeOption_ {
  /// see [FreeOption.idSeq]
  static final idSeq =
      QueryIntegerProperty<FreeOption>(_entities[25].properties[0]);

  /// see [FreeOption.optionId]
  static final optionId =
      QueryStringProperty<FreeOption>(_entities[25].properties[1]);

  /// see [FreeOption.freeQuantity]
  static final freeQuantity =
      QueryDoubleProperty<FreeOption>(_entities[25].properties[2]);
}

/// [Group] entity fields to define ObjectBox queries.
class Group_ {
  /// see [Group.idSeq]
  static final idSeq = QueryIntegerProperty<Group>(_entities[26].properties[0]);

  /// see [Group.id]
  static final id = QueryStringProperty<Group>(_entities[26].properties[1]);

  /// see [Group.groupId]
  static final groupId =
      QueryStringProperty<Group>(_entities[26].properties[2]);

  /// see [Group.groupName]
  static final groupName =
      QueryStringProperty<Group>(_entities[26].properties[3]);

  /// see [Group.reference]
  static final reference =
      QueryStringProperty<Group>(_entities[26].properties[4]);
}

/// [Ingredient] entity fields to define ObjectBox queries.
class Ingredient_ {
  /// see [Ingredient.idSeq]
  static final idSeq =
      QueryIntegerProperty<Ingredient>(_entities[27].properties[0]);

  /// see [Ingredient.isActive]
  static final isActive =
      QueryBooleanProperty<Ingredient>(_entities[27].properties[1]);

  /// see [Ingredient.displayOrder]
  static final displayOrder =
      QueryIntegerProperty<Ingredient>(_entities[27].properties[2]);

  /// see [Ingredient.id]
  static final id =
      QueryStringProperty<Ingredient>(_entities[27].properties[3]);

  /// see [Ingredient.ingredientItemId]
  static final ingredientItemId =
      QueryStringProperty<Ingredient>(_entities[27].properties[4]);

  /// see [Ingredient.ingredientItemName]
  static final ingredientItemName =
      QueryStringProperty<Ingredient>(_entities[27].properties[5]);

  /// see [Ingredient.barcode]
  static final barcode =
      QueryStringProperty<Ingredient>(_entities[27].properties[6]);

  /// see [Ingredient.unitOfMeasureName]
  static final unitOfMeasureName =
      QueryStringProperty<Ingredient>(_entities[27].properties[7]);

  /// see [Ingredient.warehouseToIngredientFactor]
  static final warehouseToIngredientFactor =
      QueryDoubleProperty<Ingredient>(_entities[27].properties[8]);

  /// see [Ingredient.quantity]
  static final quantity =
      QueryDoubleProperty<Ingredient>(_entities[27].properties[9]);

  /// see [Ingredient.wasteQuantity]
  static final wasteQuantity =
      QueryDoubleProperty<Ingredient>(_entities[27].properties[10]);

  /// see [Ingredient.unitCost]
  static final unitCost =
      QueryDoubleProperty<Ingredient>(_entities[27].properties[11]);

  /// see [Ingredient.estimatedUnitCost]
  static final estimatedUnitCost =
      QueryDoubleProperty<Ingredient>(_entities[27].properties[12]);

  /// see [Ingredient.yieldPercentage]
  static final yieldPercentage =
      QueryDoubleProperty<Ingredient>(_entities[27].properties[13]);

  /// see [Ingredient.orderTypes]
  static final orderTypes =
      QueryStringVectorProperty<Ingredient>(_entities[27].properties[14]);
}

/// [LoginHistory] entity fields to define ObjectBox queries.
class LoginHistory_ {
  /// see [LoginHistory.id]
  static final id =
      QueryIntegerProperty<LoginHistory>(_entities[28].properties[0]);

  /// see [LoginHistory.idIdentity]
  static final idIdentity =
      QueryIntegerProperty<LoginHistory>(_entities[28].properties[1]);

  /// see [LoginHistory.loginTime]
  static final loginTime =
      QueryStringProperty<LoginHistory>(_entities[28].properties[2]);

  /// see [LoginHistory.logoutTime]
  static final logoutTime =
      QueryStringProperty<LoginHistory>(_entities[28].properties[3]);

  /// see [LoginHistory.usertId]
  static final usertId =
      QueryStringProperty<LoginHistory>(_entities[28].properties[4]);

  /// see [LoginHistory.deviceNo]
  static final deviceNo =
      QueryStringProperty<LoginHistory>(_entities[28].properties[5]);

  /// see [LoginHistory.deviceRef]
  static final deviceRef =
      QueryStringProperty<LoginHistory>(_entities[28].properties[6]);
}

/// [LogoData] entity fields to define ObjectBox queries.
class LogoData_ {
  /// see [LogoData.id]
  static final id = QueryIntegerProperty<LogoData>(_entities[29].properties[0]);

  /// see [LogoData.logoUrl]
  static final logoUrl =
      QueryStringProperty<LogoData>(_entities[29].properties[1]);

  /// see [LogoData.logoData]
  static final logoData =
      QueryByteVectorProperty<LogoData>(_entities[29].properties[2]);
}

/// [LoyaltySetting] entity fields to define ObjectBox queries.
class LoyaltySetting_ {
  /// see [LoyaltySetting.idSeq]
  static final idSeq =
      QueryIntegerProperty<LoyaltySetting>(_entities[30].properties[0]);

  /// see [LoyaltySetting.enableSystem]
  static final enableSystem =
      QueryBooleanProperty<LoyaltySetting>(_entities[30].properties[1]);

  /// see [LoyaltySetting.loyaltyMethod]
  static final loyaltyMethod =
      QueryStringProperty<LoyaltySetting>(_entities[30].properties[2]);

  /// see [LoyaltySetting.lowestOrderPrice]
  static final lowestOrderPrice =
      QueryDoubleProperty<LoyaltySetting>(_entities[30].properties[3]);

  /// see [LoyaltySetting.delayInEarningPointsMinutes]
  static final delayInEarningPointsMinutes =
      QueryDoubleProperty<LoyaltySetting>(_entities[30].properties[4]);

  /// see [LoyaltySetting.bonusType]
  static final bonusType =
      QueryStringProperty<LoyaltySetting>(_entities[30].properties[5]);

  /// see [LoyaltySetting.bonusValue]
  static final bonusValue =
      QueryDoubleProperty<LoyaltySetting>(_entities[30].properties[6]);

  /// see [LoyaltySetting.maximumBonusLimit]
  static final maximumBonusLimit =
      QueryDoubleProperty<LoyaltySetting>(_entities[30].properties[7]);

  /// see [LoyaltySetting.requiredBonusPoint]
  static final requiredBonusPoint =
      QueryDoubleProperty<LoyaltySetting>(_entities[30].properties[8]);

  /// see [LoyaltySetting.bonusValidityDays]
  static final bonusValidityDays =
      QueryDoubleProperty<LoyaltySetting>(_entities[30].properties[9]);

  /// see [LoyaltySetting.enableSMSNotifications]
  static final enableSMSNotifications =
      QueryBooleanProperty<LoyaltySetting>(_entities[30].properties[10]);

  /// see [LoyaltySetting.displayBonusOnNewOrder]
  static final displayBonusOnNewOrder =
      QueryBooleanProperty<LoyaltySetting>(_entities[30].properties[11]);

  /// see [LoyaltySetting.printBonusBalanceOnNewOrder]
  static final printBonusBalanceOnNewOrder =
      QueryBooleanProperty<LoyaltySetting>(_entities[30].properties[12]);
}

/// [Menu] entity fields to define ObjectBox queries.
class Menu_ {
  /// see [Menu.idSeq]
  static final idSeq = QueryIntegerProperty<Menu>(_entities[31].properties[0]);

  /// see [Menu.id]
  static final id = QueryStringProperty<Menu>(_entities[31].properties[1]);

  /// see [Menu.name]
  static final name = QueryStringProperty<Menu>(_entities[31].properties[2]);

  /// see [Menu.fName]
  static final fName = QueryStringProperty<Menu>(_entities[31].properties[3]);

  /// see [Menu.departments]
  static final departments =
      QueryRelationToMany<Menu, MenuDepartment>(_entities[31].relations[0]);

  /// see [Menu.categories]
  static final categories =
      QueryRelationToMany<Menu, MenuCategory>(_entities[31].relations[1]);

  /// see [Menu.products]
  static final products =
      QueryRelationToMany<Menu, MenuProduct>(_entities[31].relations[2]);

  /// see [Menu.giftCards]
  static final giftCards =
      QueryRelationToMany<Menu, MenuGiftCard>(_entities[31].relations[3]);
}

/// [MenuCategory] entity fields to define ObjectBox queries.
class MenuCategory_ {
  /// see [MenuCategory.idSeq]
  static final idSeq =
      QueryIntegerProperty<MenuCategory>(_entities[32].properties[0]);

  /// see [MenuCategory.id]
  static final id =
      QueryStringProperty<MenuCategory>(_entities[32].properties[1]);

  /// see [MenuCategory.order]
  static final order =
      QueryIntegerProperty<MenuCategory>(_entities[32].properties[2]);
}

/// [MenuDepartment] entity fields to define ObjectBox queries.
class MenuDepartment_ {
  /// see [MenuDepartment.idSeq]
  static final idSeq =
      QueryIntegerProperty<MenuDepartment>(_entities[33].properties[0]);

  /// see [MenuDepartment.id]
  static final id =
      QueryStringProperty<MenuDepartment>(_entities[33].properties[1]);

  /// see [MenuDepartment.order]
  static final order =
      QueryIntegerProperty<MenuDepartment>(_entities[33].properties[2]);
}

/// [MenuGiftCard] entity fields to define ObjectBox queries.
class MenuGiftCard_ {
  /// see [MenuGiftCard.idSeq]
  static final idSeq =
      QueryIntegerProperty<MenuGiftCard>(_entities[34].properties[0]);

  /// see [MenuGiftCard.id]
  static final id =
      QueryStringProperty<MenuGiftCard>(_entities[34].properties[1]);

  /// see [MenuGiftCard.order]
  static final order =
      QueryIntegerProperty<MenuGiftCard>(_entities[34].properties[2]);
}

/// [MenuProduct] entity fields to define ObjectBox queries.
class MenuProduct_ {
  /// see [MenuProduct.idSeq]
  static final idSeq =
      QueryIntegerProperty<MenuProduct>(_entities[35].properties[0]);

  /// see [MenuProduct.id]
  static final id =
      QueryStringProperty<MenuProduct>(_entities[35].properties[1]);

  /// see [MenuProduct.order]
  static final order =
      QueryIntegerProperty<MenuProduct>(_entities[35].properties[2]);
}

/// [Modifier] entity fields to define ObjectBox queries.
class Modifier_ {
  /// see [Modifier.idSeq]
  static final idSeq =
      QueryIntegerProperty<Modifier>(_entities[36].properties[0]);

  /// see [Modifier.id]
  static final id = QueryStringProperty<Modifier>(_entities[36].properties[1]);

  /// see [Modifier.minimumOptions]
  static final minimumOptions =
      QueryIntegerProperty<Modifier>(_entities[36].properties[2]);

  /// see [Modifier.maximumOptions]
  static final maximumOptions =
      QueryIntegerProperty<Modifier>(_entities[36].properties[3]);

  /// see [Modifier.name]
  static final name =
      QueryStringProperty<Modifier>(_entities[36].properties[4]);

  /// see [Modifier.fname]
  static final fname =
      QueryStringProperty<Modifier>(_entities[36].properties[5]);

  /// see [Modifier.isUnique]
  static final isUnique =
      QueryBooleanProperty<Modifier>(_entities[36].properties[6]);

  /// see [Modifier.options]
  static final options =
      QueryRelationToMany<Modifier, Option>(_entities[36].relations[0]);
}

/// [Option] entity fields to define ObjectBox queries.
class Option_ {
  /// see [Option.idSeq]
  static final idSeq =
      QueryIntegerProperty<Option>(_entities[37].properties[0]);

  /// see [Option.id]
  static final id = QueryStringProperty<Option>(_entities[37].properties[1]);

  /// see [Option.costType]
  static final costType =
      QueryStringProperty<Option>(_entities[37].properties[2]);

  /// see [Option.modifierType]
  static final modifierType =
      QueryStringProperty<Option>(_entities[37].properties[3]);

  /// see [Option.instructionType]
  static final instructionType =
      QueryIntegerProperty<Option>(_entities[37].properties[4]);

  /// see [Option.price]
  static final price = QueryDoubleProperty<Option>(_entities[37].properties[5]);

  /// see [Option.cost]
  static final cost = QueryDoubleProperty<Option>(_entities[37].properties[6]);

  /// see [Option.calories]
  static final calories =
      QueryDoubleProperty<Option>(_entities[37].properties[7]);

  /// see [Option.inStock]
  static final inStock =
      QueryBooleanProperty<Option>(_entities[37].properties[8]);

  /// see [Option.isDefault]
  static final isDefault =
      QueryBooleanProperty<Option>(_entities[37].properties[9]);

  /// see [Option.displayOrder]
  static final displayOrder =
      QueryIntegerProperty<Option>(_entities[37].properties[10]);

  /// see [Option.name]
  static final name = QueryStringProperty<Option>(_entities[37].properties[11]);

  /// see [Option.fname]
  static final fname =
      QueryStringProperty<Option>(_entities[37].properties[12]);

  /// see [Option.taxGroupId]
  static final taxGroupId =
      QueryStringProperty<Option>(_entities[37].properties[13]);
}

/// [OrderC] entity fields to define ObjectBox queries.
class OrderC_ {
  /// see [OrderC.idSeq]
  static final idSeq =
      QueryIntegerProperty<OrderC>(_entities[38].properties[0]);

  /// see [OrderC.invoiceNumber]
  static final invoiceNumber =
      QueryStringProperty<OrderC>(_entities[38].properties[1]);

  /// see [OrderC.deviceId]
  static final deviceId =
      QueryStringProperty<OrderC>(_entities[38].properties[2]);

  /// see [OrderC.startDate]
  static final startDate =
      QueryIntegerProperty<OrderC>(_entities[38].properties[3]);

  /// see [OrderC.timeOfReceipt]
  static final timeOfReceipt =
      QueryIntegerProperty<OrderC>(_entities[38].properties[4]);

  /// see [OrderC.parentOrderId]
  static final parentOrderId =
      QueryStringProperty<OrderC>(_entities[38].properties[5]);

  /// see [OrderC.splitIndex]
  static final splitIndex =
      QueryIntegerProperty<OrderC>(_entities[38].properties[6]);

  /// see [OrderC.orderRef]
  static final orderRef =
      QueryStringProperty<OrderC>(_entities[38].properties[7]);

  /// see [OrderC.callName]
  static final callName =
      QueryStringProperty<OrderC>(_entities[38].properties[8]);

  /// see [OrderC.orderType]
  static final orderType =
      QueryIntegerProperty<OrderC>(_entities[38].properties[9]);

  /// see [OrderC.status]
  static final status =
      QueryIntegerProperty<OrderC>(_entities[38].properties[10]);

  /// see [OrderC.orderSource]
  static final orderSource =
      QueryIntegerProperty<OrderC>(_entities[38].properties[11]);

  /// see [OrderC.endTime]
  static final endTime =
      QueryIntegerProperty<OrderC>(_entities[38].properties[12]);

  /// see [OrderC.deliveryCompanyInfo]
  static final deliveryCompanyInfo =
      QueryRelationToOne<OrderC, DeliveryCompanyInfo>(
          _entities[38].properties[13]);

  /// see [OrderC.selectedPriceListId]
  static final selectedPriceListId =
      QueryStringProperty<OrderC>(_entities[38].properties[14]);

  /// see [OrderC.tableId]
  static final tableId =
      QueryStringProperty<OrderC>(_entities[38].properties[15]);

  /// see [OrderC.tableCaption]
  static final tableCaption =
      QueryStringProperty<OrderC>(_entities[38].properties[16]);

  /// see [OrderC.numberVistor]
  static final numberVistor =
      QueryIntegerProperty<OrderC>(_entities[38].properties[17]);

  /// see [OrderC.customer]
  static final customer =
      QueryRelationToOne<OrderC, Customer>(_entities[38].properties[18]);

  /// see [OrderC.address]
  static final address =
      QueryRelationToOne<OrderC, Address>(_entities[38].properties[19]);

  /// see [OrderC.promotion]
  static final promotion =
      QueryRelationToOne<OrderC, Promotion>(_entities[38].properties[20]);

  /// see [OrderC.discount]
  static final discount =
      QueryRelationToOne<OrderC, Discount>(_entities[38].properties[21]);

  /// see [OrderC.priceDiscount]
  static final priceDiscount =
      QueryDoubleProperty<OrderC>(_entities[38].properties[22]);

  /// see [OrderC.pricePromotion]
  static final pricePromotion =
      QueryDoubleProperty<OrderC>(_entities[38].properties[23]);

  /// see [OrderC.note]
  static final note = QueryStringProperty<OrderC>(_entities[38].properties[24]);

  /// see [OrderC.kitchenNote]
  static final kitchenNote =
      QueryStringProperty<OrderC>(_entities[38].properties[25]);

  /// see [OrderC.msgCansel]
  static final msgCansel =
      QueryStringProperty<OrderC>(_entities[38].properties[26]);

  /// see [OrderC.subTotal]
  static final subTotal =
      QueryDoubleProperty<OrderC>(_entities[38].properties[27]);

  /// see [OrderC.checksum]
  static final checksum =
      QueryStringProperty<OrderC>(_entities[38].properties[28]);

  /// see [OrderC.masterChecksum]
  static final masterChecksum =
      QueryStringProperty<OrderC>(_entities[38].properties[29]);

  /// see [OrderC.serverChecksum]
  static final serverChecksum =
      QueryStringProperty<OrderC>(_entities[38].properties[30]);

  /// see [OrderC.totalFee]
  static final totalFee =
      QueryDoubleProperty<OrderC>(_entities[38].properties[31]);

  /// see [OrderC.taxPrice]
  static final taxPrice =
      QueryDoubleProperty<OrderC>(_entities[38].properties[32]);

  /// see [OrderC.totalDiscountForOrderAndProduct]
  static final totalDiscountForOrderAndProduct =
      QueryDoubleProperty<OrderC>(_entities[38].properties[33]);

  /// see [OrderC.totalPaid]
  static final totalPaid =
      QueryDoubleProperty<OrderC>(_entities[38].properties[34]);

  /// see [OrderC.shiftId]
  static final shiftId =
      QueryStringProperty<OrderC>(_entities[38].properties[35]);

  /// see [OrderC.tillId]
  static final tillId =
      QueryStringProperty<OrderC>(_entities[38].properties[36]);

  /// see [OrderC.products]
  static final products =
      QueryRelationToMany<OrderC, AppliedProduct>(_entities[38].relations[0]);

  /// see [OrderC.fees]
  static final fees =
      QueryRelationToMany<OrderC, Fee>(_entities[38].relations[1]);

  /// see [OrderC.feeValues]
  static final feeValues =
      QueryRelationToMany<OrderC, FeeValue>(_entities[38].relations[2]);

  /// see [OrderC.payments]
  static final payments =
      QueryRelationToMany<OrderC, PaymentValue>(_entities[38].relations[3]);
}

/// [PaymentMethod] entity fields to define ObjectBox queries.
class PaymentMethod_ {
  /// see [PaymentMethod.idSeq]
  static final idSeq =
      QueryIntegerProperty<PaymentMethod>(_entities[39].properties[0]);

  /// see [PaymentMethod.id]
  static final id =
      QueryStringProperty<PaymentMethod>(_entities[39].properties[1]);

  /// see [PaymentMethod.name]
  static final name =
      QueryStringProperty<PaymentMethod>(_entities[39].properties[2]);

  /// see [PaymentMethod.fName]
  static final fName =
      QueryStringProperty<PaymentMethod>(_entities[39].properties[3]);

  /// see [PaymentMethod.paymentType]
  static final paymentType =
      QueryIntegerProperty<PaymentMethod>(_entities[39].properties[4]);

  /// see [PaymentMethod.displayOrder]
  static final displayOrder =
      QueryIntegerProperty<PaymentMethod>(_entities[39].properties[5]);

  /// see [PaymentMethod.isActive]
  static final isActive =
      QueryBooleanProperty<PaymentMethod>(_entities[39].properties[6]);

  /// see [PaymentMethod.isDeleted]
  static final isDeleted =
      QueryBooleanProperty<PaymentMethod>(_entities[39].properties[7]);

  /// see [PaymentMethod.autoOpenCashDrawer]
  static final autoOpenCashDrawer =
      QueryBooleanProperty<PaymentMethod>(_entities[39].properties[8]);
}

/// [PaymentValue] entity fields to define ObjectBox queries.
class PaymentValue_ {
  /// see [PaymentValue.idSeq]
  static final idSeq =
      QueryIntegerProperty<PaymentValue>(_entities[40].properties[0]);

  /// see [PaymentValue.refreance]
  static final refreance =
      QueryStringProperty<PaymentValue>(_entities[40].properties[1]);

  /// see [PaymentValue.method]
  static final method = QueryRelationToOne<PaymentValue, PaymentMethod>(
      _entities[40].properties[2]);

  /// see [PaymentValue.amt]
  static final amt =
      QueryDoubleProperty<PaymentValue>(_entities[40].properties[3]);

  /// see [PaymentValue.remainAmt]
  static final remainAmt =
      QueryDoubleProperty<PaymentValue>(_entities[40].properties[4]);

  /// see [PaymentValue.exchangeRate]
  static final exchangeRate =
      QueryDoubleProperty<PaymentValue>(_entities[40].properties[5]);

  /// see [PaymentValue.amountCurecny]
  static final amountCurecny =
      QueryDoubleProperty<PaymentValue>(_entities[40].properties[6]);

  /// see [PaymentValue.currencyCode]
  static final currencyCode =
      QueryStringProperty<PaymentValue>(_entities[40].properties[7]);
}

/// [PolicySetting] entity fields to define ObjectBox queries.
class PolicySetting_ {
  /// see [PolicySetting.idSeq]
  static final idSeq =
      QueryIntegerProperty<PolicySetting>(_entities[41].properties[0]);

  /// see [PolicySetting.enableOrderCancelation]
  static final enableOrderCancelation =
      QueryBooleanProperty<PolicySetting>(_entities[41].properties[1]);

  /// see [PolicySetting.enablePosRefund]
  static final enablePosRefund =
      QueryBooleanProperty<PolicySetting>(_entities[41].properties[2]);

  /// see [PolicySetting.enableUsingExpiredTicket]
  static final enableUsingExpiredTicket =
      QueryBooleanProperty<PolicySetting>(_entities[41].properties[3]);

  /// see [PolicySetting.orderPolicyAR]
  static final orderPolicyAR =
      QueryStringProperty<PolicySetting>(_entities[41].properties[4]);

  /// see [PolicySetting.orderPolicyEN]
  static final orderPolicyEN =
      QueryStringProperty<PolicySetting>(_entities[41].properties[5]);
}

/// [PosUser] entity fields to define ObjectBox queries.
class PosUser_ {
  /// see [PosUser.id]
  static final id = QueryIntegerProperty<PosUser>(_entities[42].properties[0]);

  /// see [PosUser.idUser]
  static final idUser =
      QueryStringProperty<PosUser>(_entities[42].properties[1]);

  /// see [PosUser.fullName]
  static final fullName =
      QueryStringProperty<PosUser>(_entities[42].properties[2]);

  /// see [PosUser.phoneNumber]
  static final phoneNumber =
      QueryStringProperty<PosUser>(_entities[42].properties[3]);

  /// see [PosUser.pinMD5]
  static final pinMD5 =
      QueryStringProperty<PosUser>(_entities[42].properties[4]);

  /// see [PosUser.tenants]
  static final tenants =
      QueryRelationToMany<PosUser, Tenants>(_entities[42].relations[0]);

  /// see [PosUser.branches]
  static final branches =
      QueryRelationToMany<PosUser, Branches>(_entities[42].relations[1]);
}

/// [PosUser1] entity fields to define ObjectBox queries.
class PosUser1_ {
  /// see [PosUser1.idSeq]
  static final idSeq =
      QueryIntegerProperty<PosUser1>(_entities[43].properties[0]);

  /// see [PosUser1.id]
  static final id = QueryStringProperty<PosUser1>(_entities[43].properties[1]);

  /// see [PosUser1.name2]
  static final name2 =
      QueryStringProperty<PosUser1>(_entities[43].properties[2]);

  /// see [PosUser1.phoneNumber3]
  static final phoneNumber3 =
      QueryStringProperty<PosUser1>(_entities[43].properties[3]);

  /// see [PosUser1.passwordHash4]
  static final passwordHash4 =
      QueryStringProperty<PosUser1>(_entities[43].properties[4]);

  /// see [PosUser1.pin5]
  static final pin5 =
      QueryIntegerProperty<PosUser1>(_entities[43].properties[5]);

  /// see [PosUser1.pinMD56]
  static final pinMD56 =
      QueryStringProperty<PosUser1>(_entities[43].properties[6]);

  /// see [PosUser1.imageUrl7]
  static final imageUrl7 =
      QueryStringProperty<PosUser1>(_entities[43].properties[7]);

  /// see [PosUser1.orderTypes]
  static final orderTypes =
      QueryStringVectorProperty<PosUser1>(_entities[43].properties[8]);

  /// see [PosUser1.branches]
  static final branches =
      QueryRelationToMany<PosUser1, UserBranche>(_entities[43].relations[0]);

  /// see [PosUser1.roles]
  static final roles =
      QueryRelationToMany<PosUser1, Roles>(_entities[43].relations[1]);
}

/// [PriceList] entity fields to define ObjectBox queries.
class PriceList_ {
  /// see [PriceList.idSeq]
  static final idSeq =
      QueryIntegerProperty<PriceList>(_entities[44].properties[0]);

  /// see [PriceList.id]
  static final id = QueryStringProperty<PriceList>(_entities[44].properties[1]);

  /// see [PriceList.name]
  static final name =
      QueryStringProperty<PriceList>(_entities[44].properties[2]);

  /// see [PriceList.fName]
  static final fName =
      QueryStringProperty<PriceList>(_entities[44].properties[3]);

  /// see [PriceList.priceIncludeTax]
  static final priceIncludeTax =
      QueryBooleanProperty<PriceList>(_entities[44].properties[4]);
}

/// [PriceListValue] entity fields to define ObjectBox queries.
class PriceListValue_ {
  /// see [PriceListValue.idSeq]
  static final idSeq =
      QueryIntegerProperty<PriceListValue>(_entities[45].properties[0]);

  /// see [PriceListValue.id]
  static final id =
      QueryStringProperty<PriceListValue>(_entities[45].properties[1]);

  /// see [PriceListValue.price]
  static final price =
      QueryDoubleProperty<PriceListValue>(_entities[45].properties[2]);

  /// see [PriceListValue.slaps]
  static final slaps =
      QueryRelationToMany<PriceListValue, Slaps>(_entities[45].relations[0]);
}

/// [Printer] entity fields to define ObjectBox queries.
class Printer_ {
  /// see [Printer.idSeq]
  static final idSeq =
      QueryIntegerProperty<Printer>(_entities[46].properties[0]);

  /// see [Printer.id]
  static final id = QueryStringProperty<Printer>(_entities[46].properties[1]);

  /// see [Printer.name]
  static final name = QueryStringProperty<Printer>(_entities[46].properties[2]);

  /// see [Printer.fName]
  static final fName =
      QueryStringProperty<Printer>(_entities[46].properties[3]);

  /// see [Printer.deviceId]
  static final deviceId =
      QueryStringProperty<Printer>(_entities[46].properties[4]);

  /// see [Printer.printerModelId]
  static final printerModelId =
      QueryStringProperty<Printer>(_entities[46].properties[5]);

  /// see [Printer.connectionType]
  static final connectionType =
      QueryIntegerProperty<Printer>(_entities[46].properties[6]);

  /// see [Printer.ipAddress]
  static final ipAddress =
      QueryStringProperty<Printer>(_entities[46].properties[7]);

  /// see [Printer.printerType]
  static final printerType =
      QueryIntegerProperty<Printer>(_entities[46].properties[8]);

  /// see [Printer.printTo]
  static final printTo =
      QueryIntegerProperty<Printer>(_entities[46].properties[9]);

  /// see [Printer.port]
  static final port =
      QueryIntegerProperty<Printer>(_entities[46].properties[10]);

  /// see [Printer.products]
  static final products =
      QueryStringVectorProperty<Printer>(_entities[46].properties[11]);

  /// see [Printer.departments]
  static final departments =
      QueryStringVectorProperty<Printer>(_entities[46].properties[12]);

  /// see [Printer.categories]
  static final categories =
      QueryStringVectorProperty<Printer>(_entities[46].properties[13]);

  /// see [Printer.orderTypes]
  static final orderTypes =
      QueryIntegerVectorProperty<Printer>(_entities[46].properties[14]);

  /// see [Printer.settings]
  static final settings =
      QueryRelationToMany<Printer, PrinterSetting>(_entities[46].relations[0]);
}

/// [PrinterSetting] entity fields to define ObjectBox queries.
class PrinterSetting_ {
  /// see [PrinterSetting.idSeq]
  static final idSeq =
      QueryIntegerProperty<PrinterSetting>(_entities[47].properties[0]);

  /// see [PrinterSetting.id]
  static final id =
      QueryStringProperty<PrinterSetting>(_entities[47].properties[1]);

  /// see [PrinterSetting.printerId]
  static final printerId =
      QueryStringProperty<PrinterSetting>(_entities[47].properties[2]);

  /// see [PrinterSetting.paperSize]
  static final paperSize =
      QueryStringProperty<PrinterSetting>(_entities[47].properties[3]);

  /// see [PrinterSetting.scale]
  static final scale =
      QueryIntegerProperty<PrinterSetting>(_entities[47].properties[4]);

  /// see [PrinterSetting.imageCutterFactor]
  static final imageCutterFactor =
      QueryIntegerProperty<PrinterSetting>(_entities[47].properties[5]);

  /// see [PrinterSetting.cutterCommandCode]
  static final cutterCommandCode =
      QueryStringProperty<PrinterSetting>(_entities[47].properties[6]);

  /// see [PrinterSetting.autoPrint]
  static final autoPrint =
      QueryBooleanProperty<PrinterSetting>(_entities[47].properties[7]);

  /// see [PrinterSetting.numberOfCopy]
  static final numberOfCopy =
      QueryIntegerProperty<PrinterSetting>(_entities[47].properties[8]);
}

/// [Product1] entity fields to define ObjectBox queries.
class Product1_ {
  /// see [Product1.idSeq]
  static final idSeq =
      QueryIntegerProperty<Product1>(_entities[48].properties[0]);

  /// see [Product1.id]
  static final id = QueryStringProperty<Product1>(_entities[48].properties[1]);

  /// see [Product1.name]
  static final name =
      QueryStringProperty<Product1>(_entities[48].properties[2]);

  /// see [Product1.fName]
  static final fName =
      QueryStringProperty<Product1>(_entities[48].properties[3]);

  /// see [Product1.sku]
  static final sku = QueryStringProperty<Product1>(_entities[48].properties[4]);

  /// see [Product1.barcode]
  static final barcode =
      QueryStringProperty<Product1>(_entities[48].properties[5]);

  /// see [Product1.productTypeId]
  static final productTypeId =
      QueryStringProperty<Product1>(_entities[48].properties[6]);

  /// see [Product1.costType]
  static final costType =
      QueryStringProperty<Product1>(_entities[48].properties[7]);

  /// see [Product1.priceType]
  static final priceType =
      QueryIntegerProperty<Product1>(_entities[48].properties[8]);

  /// see [Product1.salesMethod]
  static final salesMethod =
      QueryStringProperty<Product1>(_entities[48].properties[9]);

  /// see [Product1.price]
  static final price =
      QueryDoubleProperty<Product1>(_entities[48].properties[10]);

  /// see [Product1.cost]
  static final cost =
      QueryDoubleProperty<Product1>(_entities[48].properties[11]);

  /// see [Product1.preparationTime]
  static final preparationTime =
      QueryIntegerProperty<Product1>(_entities[48].properties[12]);

  /// see [Product1.activeQRScan]
  static final activeQRScan =
      QueryBooleanProperty<Product1>(_entities[48].properties[13]);

  /// see [Product1.qrScanOnSameDate]
  static final qrScanOnSameDate =
      QueryBooleanProperty<Product1>(_entities[48].properties[14]);

  /// see [Product1.enableSalesDiscount]
  static final enableSalesDiscount =
      QueryBooleanProperty<Product1>(_entities[48].properties[15]);

  /// see [Product1.discountPercentageLimit]
  static final discountPercentageLimit =
      QueryDoubleProperty<Product1>(_entities[48].properties[16]);

  /// see [Product1.enableFreeQuantity]
  static final enableFreeQuantity =
      QueryBooleanProperty<Product1>(_entities[48].properties[17]);

  /// see [Product1.enableDateExpire]
  static final enableDateExpire =
      QueryBooleanProperty<Product1>(_entities[48].properties[18]);

  /// see [Product1.enableIMEISerial]
  static final enableIMEISerial =
      QueryBooleanProperty<Product1>(_entities[48].properties[19]);

  /// see [Product1.enableWeights]
  static final enableWeights =
      QueryBooleanProperty<Product1>(_entities[48].properties[20]);

  /// see [Product1.scanPriceFromScale]
  static final scanPriceFromScale =
      QueryBooleanProperty<Product1>(_entities[48].properties[21]);

  /// see [Product1.scalePriceIncludeTax]
  static final scalePriceIncludeTax =
      QueryBooleanProperty<Product1>(_entities[48].properties[22]);

  /// see [Product1.independentPrinting]
  static final independentPrinting =
      QueryBooleanProperty<Product1>(_entities[48].properties[23]);

  /// see [Product1.calculateQuantityFromTotalPrice]
  static final calculateQuantityFromTotalPrice =
      QueryBooleanProperty<Product1>(_entities[48].properties[24]);

  /// see [Product1.reservationRequired]
  static final reservationRequired =
      QueryBooleanProperty<Product1>(_entities[48].properties[25]);

  /// see [Product1.scaleBarcodeDigits]
  static final scaleBarcodeDigits =
      QueryIntegerProperty<Product1>(_entities[48].properties[26]);

  /// see [Product1.scaleProductCodeDigits]
  static final scaleProductCodeDigits =
      QueryIntegerProperty<Product1>(_entities[48].properties[27]);

  /// see [Product1.scaleIntDigits]
  static final scaleIntDigits =
      QueryIntegerProperty<Product1>(_entities[48].properties[28]);

  /// see [Product1.scaledecimalDigits]
  static final scaledecimalDigits =
      QueryIntegerProperty<Product1>(_entities[48].properties[29]);

  /// see [Product1.scaleProductCodeFirstInBracode]
  static final scaleProductCodeFirstInBracode =
      QueryBooleanProperty<Product1>(_entities[48].properties[30]);

  /// see [Product1.availableStartDateTime]
  static final availableStartDateTime =
      QueryStringProperty<Product1>(_entities[48].properties[31]);

  /// see [Product1.availableEndDateTime]
  static final availableEndDateTime =
      QueryStringProperty<Product1>(_entities[48].properties[32]);

  /// see [Product1.description]
  static final description =
      QueryStringProperty<Product1>(_entities[48].properties[33]);

  /// see [Product1.fDescription]
  static final fDescription =
      QueryStringProperty<Product1>(_entities[48].properties[34]);

  /// see [Product1.imageUrl]
  static final imageUrl =
      QueryStringProperty<Product1>(_entities[48].properties[35]);

  /// see [Product1.calories]
  static final calories =
      QueryIntegerProperty<Product1>(_entities[48].properties[36]);

  /// see [Product1.minimumLevel]
  static final minimumLevel =
      QueryIntegerProperty<Product1>(_entities[48].properties[37]);

  /// see [Product1.maximumLevel]
  static final maximumLevel =
      QueryIntegerProperty<Product1>(_entities[48].properties[38]);

  /// see [Product1.departmentId]
  static final departmentId =
      QueryStringProperty<Product1>(_entities[48].properties[39]);

  /// see [Product1.active]
  static final active =
      QueryBooleanProperty<Product1>(_entities[48].properties[40]);

  /// see [Product1.taxGroupId]
  static final taxGroupId =
      QueryStringProperty<Product1>(_entities[48].properties[41]);

  /// see [Product1.productNature]
  static final productNature =
      QueryIntegerProperty<Product1>(_entities[48].properties[42]);

  /// see [Product1.subName]
  static final subName =
      QueryStringProperty<Product1>(_entities[48].properties[43]);

  /// see [Product1.fSubName]
  static final fSubName =
      QueryStringProperty<Product1>(_entities[48].properties[44]);

  /// see [Product1.promotionalName]
  static final promotionalName =
      QueryStringProperty<Product1>(_entities[48].properties[45]);

  /// see [Product1.fPromotionalName]
  static final fPromotionalName =
      QueryStringProperty<Product1>(_entities[48].properties[46]);

  /// see [Product1.tags]
  static final tags =
      QueryStringProperty<Product1>(_entities[48].properties[47]);

  /// see [Product1.fTags]
  static final fTags =
      QueryStringProperty<Product1>(_entities[48].properties[48]);

  /// see [Product1.categoryId]
  static final categoryId =
      QueryStringProperty<Product1>(_entities[48].properties[49]);

  /// see [Product1.units]
  static final units =
      QueryRelationToMany<Product1, Unit>(_entities[48].relations[0]);

  /// see [Product1.modifiers]
  static final modifiers =
      QueryRelationToMany<Product1, Modifier>(_entities[48].relations[1]);

  /// see [Product1.ingredients]
  static final ingredients =
      QueryRelationToMany<Product1, Ingredient>(_entities[48].relations[2]);

  /// see [Product1.groups]
  static final groups =
      QueryRelationToMany<Product1, Group>(_entities[48].relations[3]);
}

/// [ProductPriceList] entity fields to define ObjectBox queries.
class ProductPriceList_ {
  /// see [ProductPriceList.idSeq]
  static final idSeq =
      QueryIntegerProperty<ProductPriceList>(_entities[49].properties[0]);

  /// see [ProductPriceList.id]
  static final id =
      QueryStringProperty<ProductPriceList>(_entities[49].properties[1]);

  /// see [ProductPriceList.price]
  static final price =
      QueryDoubleProperty<ProductPriceList>(_entities[49].properties[2]);
}

/// [Promotion] entity fields to define ObjectBox queries.
class Promotion_ {
  /// see [Promotion.idSeq]
  static final idSeq =
      QueryIntegerProperty<Promotion>(_entities[50].properties[0]);

  /// see [Promotion.id]
  static final id = QueryStringProperty<Promotion>(_entities[50].properties[1]);

  /// see [Promotion.name]
  static final name =
      QueryStringProperty<Promotion>(_entities[50].properties[2]);

  /// see [Promotion.fName]
  static final fName =
      QueryStringProperty<Promotion>(_entities[50].properties[3]);

  /// see [Promotion.startDate]
  static final startDate =
      QueryStringProperty<Promotion>(_entities[50].properties[4]);

  /// see [Promotion.endDate]
  static final endDate =
      QueryStringProperty<Promotion>(_entities[50].properties[5]);

  /// see [Promotion.startTime]
  static final startTime =
      QueryStringProperty<Promotion>(_entities[50].properties[6]);

  /// see [Promotion.endTime]
  static final endTime =
      QueryStringProperty<Promotion>(_entities[50].properties[7]);

  /// see [Promotion.promotionType]
  static final promotionType =
      QueryIntegerProperty<Promotion>(_entities[50].properties[8]);

  /// see [Promotion.discountType]
  static final discountType =
      QueryIntegerProperty<Promotion>(_entities[50].properties[9]);

  /// see [Promotion.discountPercentage]
  static final discountPercentage =
      QueryDoubleProperty<Promotion>(_entities[50].properties[10]);

  /// see [Promotion.discountAmount]
  static final discountAmount =
      QueryDoubleProperty<Promotion>(_entities[50].properties[11]);

  /// see [Promotion.maximumDiscountAmount]
  static final maximumDiscountAmount =
      QueryDoubleProperty<Promotion>(_entities[50].properties[12]);

  /// see [Promotion.promotionApplyType]
  static final promotionApplyType =
      QueryIntegerProperty<Promotion>(_entities[50].properties[13]);

  /// see [Promotion.customerQuantity]
  static final customerQuantity =
      QueryDoubleProperty<Promotion>(_entities[50].properties[14]);

  /// see [Promotion.customerAmount]
  static final customerAmount =
      QueryDoubleProperty<Promotion>(_entities[50].properties[15]);

  /// see [Promotion.promotionApplyToType]
  static final promotionApplyToType =
      QueryIntegerProperty<Promotion>(_entities[50].properties[16]);

  /// see [Promotion.days]
  static final days =
      QueryIntegerVectorProperty<Promotion>(_entities[50].properties[17]);

  /// see [Promotion.orderTypes]
  static final orderTypes =
      QueryIntegerVectorProperty<Promotion>(_entities[50].properties[18]);

  /// see [Promotion.purchaseProducts]
  static final purchaseProducts =
      QueryStringVectorProperty<Promotion>(_entities[50].properties[19]);

  /// see [Promotion.discountProducts]
  static final discountProducts =
      QueryStringVectorProperty<Promotion>(_entities[50].properties[20]);

  /// see [Promotion.priority]
  static final priority =
      QueryIntegerProperty<Promotion>(_entities[50].properties[21]);
}

/// [ReasonsCanceling] entity fields to define ObjectBox queries.
class ReasonsCanceling_ {
  /// see [ReasonsCanceling.idSeq]
  static final idSeq =
      QueryIntegerProperty<ReasonsCanceling>(_entities[51].properties[0]);

  /// see [ReasonsCanceling.id]
  static final id =
      QueryStringProperty<ReasonsCanceling>(_entities[51].properties[1]);

  /// see [ReasonsCanceling.name]
  static final name =
      QueryStringProperty<ReasonsCanceling>(_entities[51].properties[2]);

  /// see [ReasonsCanceling.fName]
  static final fName =
      QueryStringProperty<ReasonsCanceling>(_entities[51].properties[3]);
}

/// [ReasonsDrawerOpen] entity fields to define ObjectBox queries.
class ReasonsDrawerOpen_ {
  /// see [ReasonsDrawerOpen.idSeq]
  static final idSeq =
      QueryIntegerProperty<ReasonsDrawerOpen>(_entities[52].properties[0]);

  /// see [ReasonsDrawerOpen.id]
  static final id =
      QueryStringProperty<ReasonsDrawerOpen>(_entities[52].properties[1]);

  /// see [ReasonsDrawerOpen.name]
  static final name =
      QueryStringProperty<ReasonsDrawerOpen>(_entities[52].properties[2]);

  /// see [ReasonsDrawerOpen.fName]
  static final fName =
      QueryStringProperty<ReasonsDrawerOpen>(_entities[52].properties[3]);
}

/// [ResturantSection] entity fields to define ObjectBox queries.
class ResturantSection_ {
  /// see [ResturantSection.idSeq]
  static final idSeq =
      QueryIntegerProperty<ResturantSection>(_entities[53].properties[0]);

  /// see [ResturantSection.id]
  static final id =
      QueryStringProperty<ResturantSection>(_entities[53].properties[1]);

  /// see [ResturantSection.name]
  static final name =
      QueryStringProperty<ResturantSection>(_entities[53].properties[2]);

  /// see [ResturantSection.fName]
  static final fName =
      QueryStringProperty<ResturantSection>(_entities[53].properties[3]);

  /// see [ResturantSection.tables]
  static final tables =
      QueryRelationToMany<ResturantSection, Table>(_entities[53].relations[0]);
}

/// [Roles] entity fields to define ObjectBox queries.
class Roles_ {
  /// see [Roles.idSeq]
  static final idSeq = QueryIntegerProperty<Roles>(_entities[54].properties[0]);

  /// see [Roles.id]
  static final id = QueryStringProperty<Roles>(_entities[54].properties[1]);

  /// see [Roles.name]
  static final name = QueryStringProperty<Roles>(_entities[54].properties[2]);

  /// see [Roles.claims]
  static final claims =
      QueryStringVectorProperty<Roles>(_entities[54].properties[3]);
}

/// [Shift] entity fields to define ObjectBox queries.
class Shift_ {
  /// see [Shift.id]
  static final id = QueryIntegerProperty<Shift>(_entities[55].properties[0]);

  /// see [Shift.shiftId]
  static final shiftId =
      QueryStringProperty<Shift>(_entities[55].properties[1]);

  /// see [Shift.reference]
  static final reference =
      QueryStringProperty<Shift>(_entities[55].properties[2]);

  /// see [Shift.userId]
  static final userId = QueryStringProperty<Shift>(_entities[55].properties[3]);

  /// see [Shift.userName]
  static final userName =
      QueryStringProperty<Shift>(_entities[55].properties[4]);

  /// see [Shift.branchName]
  static final branchName =
      QueryStringProperty<Shift>(_entities[55].properties[5]);

  /// see [Shift.clockedInDateAt]
  static final clockedInDateAt =
      QueryStringProperty<Shift>(_entities[55].properties[6]);

  /// see [Shift.clockedInTimeAt]
  static final clockedInTimeAt =
      QueryStringProperty<Shift>(_entities[55].properties[7]);

  /// see [Shift.clockedOutDateAt]
  static final clockedOutDateAt =
      QueryStringProperty<Shift>(_entities[55].properties[8]);

  /// see [Shift.clockedOutTimeAt]
  static final clockedOutTimeAt =
      QueryStringProperty<Shift>(_entities[55].properties[9]);

  /// see [Shift.isClockedOut]
  static final isClockedOut =
      QueryBooleanProperty<Shift>(_entities[55].properties[10]);

  /// see [Shift.isSync]
  static final isSync =
      QueryBooleanProperty<Shift>(_entities[55].properties[11]);
}

/// [Slaps] entity fields to define ObjectBox queries.
class Slaps_ {
  /// see [Slaps.idSeq]
  static final idSeq = QueryIntegerProperty<Slaps>(_entities[56].properties[0]);

  /// see [Slaps.from]
  static final from = QueryDoubleProperty<Slaps>(_entities[56].properties[1]);

  /// see [Slaps.to]
  static final to = QueryDoubleProperty<Slaps>(_entities[56].properties[2]);

  /// see [Slaps.price]
  static final price = QueryDoubleProperty<Slaps>(_entities[56].properties[3]);

  /// see [Slaps.timeEventId]
  static final timeEventId =
      QueryStringProperty<Slaps>(_entities[56].properties[4]);
}

/// [Table] entity fields to define ObjectBox queries.
class Table_ {
  /// see [Table.idSeq]
  static final idSeq = QueryIntegerProperty<Table>(_entities[57].properties[0]);

  /// see [Table.id]
  static final id = QueryStringProperty<Table>(_entities[57].properties[1]);

  /// see [Table.tableNumber]
  static final tableNumber =
      QueryIntegerProperty<Table>(_entities[57].properties[2]);

  /// see [Table.tableCode]
  static final tableCode =
      QueryStringProperty<Table>(_entities[57].properties[3]);

  /// see [Table.numberOfIndividuals]
  static final numberOfIndividuals =
      QueryIntegerProperty<Table>(_entities[57].properties[4]);

  /// see [Table.minumumReservationPrice]
  static final minumumReservationPrice =
      QueryIntegerProperty<Table>(_entities[57].properties[5]);

  /// see [Table.status]
  static final status =
      QueryIntegerProperty<Table>(_entities[57].properties[6]);

  /// see [Table.shape]
  static final shape = QueryIntegerProperty<Table>(_entities[57].properties[7]);

  /// see [Table.offsetX]
  static final offsetX =
      QueryIntegerProperty<Table>(_entities[57].properties[8]);

  /// see [Table.offsetY]
  static final offsetY =
      QueryIntegerProperty<Table>(_entities[57].properties[9]);
}

/// [TaxC] entity fields to define ObjectBox queries.
class TaxC_ {
  /// see [TaxC.idSeq]
  static final idSeq = QueryIntegerProperty<TaxC>(_entities[58].properties[0]);

  /// see [TaxC.taxName]
  static final taxName = QueryStringProperty<TaxC>(_entities[58].properties[1]);

  /// see [TaxC.id]
  static final id = QueryStringProperty<TaxC>(_entities[58].properties[2]);

  /// see [TaxC.orderTypes]
  static final orderTypes =
      QueryIntegerVectorProperty<TaxC>(_entities[58].properties[3]);

  /// see [TaxC.exceptCustomers]
  static final exceptCustomers =
      QueryStringVectorProperty<TaxC>(_entities[58].properties[4]);

  /// see [TaxC.taxPercentage]
  static final taxPercentage =
      QueryDoubleProperty<TaxC>(_entities[58].properties[5]);

  /// see [TaxC.customerTaxable]
  static final customerTaxable =
      QueryBooleanProperty<TaxC>(_entities[58].properties[6]);

  /// see [TaxC.taxCode]
  static final taxCode = QueryStringProperty<TaxC>(_entities[58].properties[7]);

  /// see [TaxC.taxAccount]
  static final taxAccount =
      QueryStringProperty<TaxC>(_entities[58].properties[8]);

  /// see [TaxC.isTaxExempt]
  static final isTaxExempt =
      QueryBooleanProperty<TaxC>(_entities[58].properties[9]);

  /// see [TaxC.zeroTax]
  static final zeroTax =
      QueryBooleanProperty<TaxC>(_entities[58].properties[10]);
}

/// [TaxGroup] entity fields to define ObjectBox queries.
class TaxGroup_ {
  /// see [TaxGroup.idSeq]
  static final idSeq =
      QueryIntegerProperty<TaxGroup>(_entities[59].properties[0]);

  /// see [TaxGroup.id]
  static final id = QueryStringProperty<TaxGroup>(_entities[59].properties[1]);

  /// see [TaxGroup.name]
  static final name =
      QueryStringProperty<TaxGroup>(_entities[59].properties[2]);

  /// see [TaxGroup.fName]
  static final fName =
      QueryStringProperty<TaxGroup>(_entities[59].properties[3]);

  /// see [TaxGroup.types]
  static final types =
      QueryStringVectorProperty<TaxGroup>(_entities[59].properties[4]);
}

/// [TaxInfo] entity fields to define ObjectBox queries.
class TaxInfo_ {
  /// see [TaxInfo.idSeq]
  static final idSeq =
      QueryIntegerProperty<TaxInfo>(_entities[60].properties[0]);

  /// see [TaxInfo.taxGroupId]
  static final taxGroupId =
      QueryStringProperty<TaxInfo>(_entities[60].properties[1]);
}

/// [TaxSetting] entity fields to define ObjectBox queries.
class TaxSetting_ {
  /// see [TaxSetting.idSeq]
  static final idSeq =
      QueryIntegerProperty<TaxSetting>(_entities[61].properties[0]);

  /// see [TaxSetting.enableSalesTax]
  static final enableSalesTax =
      QueryBooleanProperty<TaxSetting>(_entities[61].properties[1]);

  /// see [TaxSetting.salesPriceIncludeTax]
  static final salesPriceIncludeTax =
      QueryBooleanProperty<TaxSetting>(_entities[61].properties[2]);

  /// see [TaxSetting.enableCustomerSupplierTax]
  static final enableCustomerSupplierTax =
      QueryBooleanProperty<TaxSetting>(_entities[61].properties[3]);

  /// see [TaxSetting.taxRoundFactor]
  static final taxRoundFactor =
      QueryDoubleProperty<TaxSetting>(_entities[61].properties[4]);
}

/// [Tenants] entity fields to define ObjectBox queries.
class Tenants_ {
  /// see [Tenants.id]
  static final id = QueryIntegerProperty<Tenants>(_entities[62].properties[0]);

  /// see [Tenants.tenantId]
  static final tenantId =
      QueryStringProperty<Tenants>(_entities[62].properties[1]);

  /// see [Tenants.tenantName]
  static final tenantName =
      QueryStringProperty<Tenants>(_entities[62].properties[2]);
}

/// [ThrowbackInfo] entity fields to define ObjectBox queries.
class ThrowbackInfo_ {
  /// see [ThrowbackInfo.idSeq]
  static final idSeq =
      QueryIntegerProperty<ThrowbackInfo>(_entities[63].properties[0]);

  /// see [ThrowbackInfo.productRef]
  static final productRef =
      QueryStringProperty<ThrowbackInfo>(_entities[63].properties[1]);

  /// see [ThrowbackInfo.quantity]
  static final quantity =
      QueryDoubleProperty<ThrowbackInfo>(_entities[63].properties[2]);

  /// see [ThrowbackInfo.isWaste]
  static final isWaste =
      QueryBooleanProperty<ThrowbackInfo>(_entities[63].properties[3]);

  /// see [ThrowbackInfo.ref]
  static final ref =
      QueryStringProperty<ThrowbackInfo>(_entities[63].properties[4]);
}

/// [TimeEvent] entity fields to define ObjectBox queries.
class TimeEvent_ {
  /// see [TimeEvent.idSeq]
  static final idSeq =
      QueryIntegerProperty<TimeEvent>(_entities[64].properties[0]);

  /// see [TimeEvent.id]
  static final id = QueryStringProperty<TimeEvent>(_entities[64].properties[1]);

  /// see [TimeEvent.name]
  static final name =
      QueryStringProperty<TimeEvent>(_entities[64].properties[2]);

  /// see [TimeEvent.fName]
  static final fName =
      QueryStringProperty<TimeEvent>(_entities[64].properties[3]);

  /// see [TimeEvent.timeEventType]
  static final timeEventType =
      QueryIntegerProperty<TimeEvent>(_entities[64].properties[4]);

  /// see [TimeEvent.timeEventValue]
  static final timeEventValue =
      QueryDoubleProperty<TimeEvent>(_entities[64].properties[5]);

  /// see [TimeEvent.startDate]
  static final startDate =
      QueryStringProperty<TimeEvent>(_entities[64].properties[6]);

  /// see [TimeEvent.endDate]
  static final endDate =
      QueryStringProperty<TimeEvent>(_entities[64].properties[7]);

  /// see [TimeEvent.startTime]
  static final startTime =
      QueryStringProperty<TimeEvent>(_entities[64].properties[8]);

  /// see [TimeEvent.endTime]
  static final endTime =
      QueryStringProperty<TimeEvent>(_entities[64].properties[9]);

  /// see [TimeEvent.days]
  static final days =
      QueryIntegerVectorProperty<TimeEvent>(_entities[64].properties[10]);

  /// see [TimeEvent.orderTypes]
  static final orderTypes =
      QueryIntegerVectorProperty<TimeEvent>(_entities[64].properties[11]);

  /// see [TimeEvent.products]
  static final products =
      QueryStringVectorProperty<TimeEvent>(_entities[64].properties[12]);

  /// see [TimeEvent.customers]
  static final customers =
      QueryStringVectorProperty<TimeEvent>(_entities[64].properties[13]);

  /// see [TimeEvent.departments]
  static final departments =
      QueryStringVectorProperty<TimeEvent>(_entities[64].properties[14]);

  /// see [TimeEvent.priority]
  static final priority =
      QueryIntegerProperty<TimeEvent>(_entities[64].properties[15]);

  /// see [TimeEvent.categories]
  static final categories =
      QueryStringVectorProperty<TimeEvent>(_entities[64].properties[16]);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// see [Transaction.idSeq]
  static final idSeq =
      QueryIntegerProperty<Transaction>(_entities[65].properties[0]);

  /// see [Transaction.id]
  static final id =
      QueryStringProperty<Transaction>(_entities[65].properties[1]);

  /// see [Transaction.refId]
  static final refId =
      QueryStringProperty<Transaction>(_entities[65].properties[2]);

  /// see [Transaction.toAcount]
  static final toAcount =
      QueryStringProperty<Transaction>(_entities[65].properties[3]);

  /// see [Transaction.amt]
  static final amt =
      QueryDoubleProperty<Transaction>(_entities[65].properties[4]);

  /// see [Transaction.createBy]
  static final createBy =
      QueryStringProperty<Transaction>(_entities[65].properties[5]);

  /// see [Transaction.date]
  static final date =
      QueryStringProperty<Transaction>(_entities[65].properties[6]);
}

/// [Unit] entity fields to define ObjectBox queries.
class Unit_ {
  /// see [Unit.idSeq]
  static final idSeq = QueryIntegerProperty<Unit>(_entities[66].properties[0]);

  /// see [Unit.id]
  static final id = QueryStringProperty<Unit>(_entities[66].properties[1]);

  /// see [Unit.name]
  static final name = QueryStringProperty<Unit>(_entities[66].properties[2]);

  /// see [Unit.fname]
  static final fname = QueryStringProperty<Unit>(_entities[66].properties[3]);

  /// see [Unit.barcode]
  static final barcode = QueryStringProperty<Unit>(_entities[66].properties[4]);

  /// see [Unit.price]
  static final price = QueryDoubleProperty<Unit>(_entities[66].properties[5]);

  /// see [Unit.cost]
  static final cost = QueryDoubleProperty<Unit>(_entities[66].properties[6]);

  /// see [Unit.factor]
  static final factor = QueryDoubleProperty<Unit>(_entities[66].properties[7]);

  /// see [Unit.defaultForSales]
  static final defaultForSales =
      QueryBooleanProperty<Unit>(_entities[66].properties[8]);

  /// see [Unit.defaultForPurchase]
  static final defaultForPurchase =
      QueryBooleanProperty<Unit>(_entities[66].properties[9]);

  /// see [Unit.defaultForStore]
  static final defaultForStore =
      QueryBooleanProperty<Unit>(_entities[66].properties[10]);

  /// see [Unit.priceList]
  static final priceList =
      QueryRelationToMany<Unit, PriceListValue>(_entities[66].relations[0]);

  /// see [Unit.modifiers]
  static final modifiers =
      QueryRelationToMany<Unit, UnitModifer>(_entities[66].relations[1]);
}

/// [UnitModifer] entity fields to define ObjectBox queries.
class UnitModifer_ {
  /// see [UnitModifer.idSeq]
  static final idSeq =
      QueryIntegerProperty<UnitModifer>(_entities[67].properties[0]);

  /// see [UnitModifer.id]
  static final id =
      QueryStringProperty<UnitModifer>(_entities[67].properties[1]);

  /// see [UnitModifer.minimumOptions]
  static final minimumOptions =
      QueryIntegerProperty<UnitModifer>(_entities[67].properties[2]);

  /// see [UnitModifer.maximumOptions]
  static final maximumOptions =
      QueryIntegerProperty<UnitModifer>(_entities[67].properties[3]);

  /// see [UnitModifer.isUnique]
  static final isUnique =
      QueryBooleanProperty<UnitModifer>(_entities[67].properties[4]);

  /// see [UnitModifer.isRequired]
  static final isRequired =
      QueryBooleanProperty<UnitModifer>(_entities[67].properties[5]);

  /// see [UnitModifer.defulatOptions]
  static final defulatOptions =
      QueryStringVectorProperty<UnitModifer>(_entities[67].properties[6]);

  /// see [UnitModifer.exceptOptions]
  static final exceptOptions =
      QueryStringVectorProperty<UnitModifer>(_entities[67].properties[7]);

  /// see [UnitModifer.name]
  static final name =
      QueryStringProperty<UnitModifer>(_entities[67].properties[8]);

  /// see [UnitModifer.fName]
  static final fName =
      QueryStringProperty<UnitModifer>(_entities[67].properties[9]);

  /// see [UnitModifer.freeOptions]
  static final freeOptions =
      QueryRelationToMany<UnitModifer, FreeOption>(_entities[67].relations[0]);

  /// see [UnitModifer.options]
  static final options =
      QueryRelationToMany<UnitModifer, Option>(_entities[67].relations[1]);
}

/// [UserBranche] entity fields to define ObjectBox queries.
class UserBranche_ {
  /// see [UserBranche.idSeq]
  static final idSeq =
      QueryIntegerProperty<UserBranche>(_entities[68].properties[0]);

  /// see [UserBranche.id]
  static final id =
      QueryStringProperty<UserBranche>(_entities[68].properties[1]);

  /// see [UserBranche.groups]
  static final groups =
      QueryStringVectorProperty<UserBranche>(_entities[68].properties[2]);
}

/// [ViewSettings] entity fields to define ObjectBox queries.
class ViewSettings_ {
  /// see [ViewSettings.idSeq]
  static final idSeq =
      QueryIntegerProperty<ViewSettings>(_entities[69].properties[0]);
}

/// [Device] entity fields to define ObjectBox queries.
class Device_ {
  /// see [Device.id]
  static final id = QueryIntegerProperty<Device>(_entities[70].properties[0]);

  /// see [Device.deviceId]
  static final deviceId =
      QueryStringProperty<Device>(_entities[70].properties[1]);

  /// see [Device.deviceTypeId]
  static final deviceTypeId =
      QueryStringProperty<Device>(_entities[70].properties[2]);

  /// see [Device.deviceModelId]
  static final deviceModelId =
      QueryStringProperty<Device>(_entities[70].properties[3]);

  /// see [Device.deviceTypeCode]
  static final deviceTypeCode =
      QueryStringProperty<Device>(_entities[70].properties[4]);

  /// see [Device.masterDeviceNo]
  static final masterDeviceNo =
      QueryIntegerProperty<Device>(_entities[70].properties[5]);

  /// see [Device.reference]
  static final reference =
      QueryStringProperty<Device>(_entities[70].properties[6]);

  /// see [Device.name]
  static final name = QueryStringProperty<Device>(_entities[70].properties[7]);

  /// see [Device.fName]
  static final fName = QueryStringProperty<Device>(_entities[70].properties[8]);

  /// see [Device.enableOnlineOrderReceiver]
  static final enableOnlineOrderReceiver =
      QueryBooleanProperty<Device>(_entities[70].properties[9]);

  /// see [Device.model]
  static final model =
      QueryStringProperty<Device>(_entities[70].properties[10]);

  /// see [Device.systemVersion]
  static final systemVersion =
      QueryStringProperty<Device>(_entities[70].properties[11]);

  /// see [Device.appVersion]
  static final appVersion =
      QueryStringProperty<Device>(_entities[70].properties[12]);

  /// see [Device.build]
  static final build =
      QueryStringProperty<Device>(_entities[70].properties[13]);

  /// see [Device.latitude]
  static final latitude =
      QueryStringProperty<Device>(_entities[70].properties[14]);

  /// see [Device.longitude]
  static final longitude =
      QueryStringProperty<Device>(_entities[70].properties[15]);

  /// see [Device.connectionIPAddress]
  static final connectionIPAddress =
      QueryStringProperty<Device>(_entities[70].properties[16]);

  /// see [Device.connectionPort]
  static final connectionPort =
      QueryIntegerProperty<Device>(_entities[70].properties[17]);

  /// see [Device.connectionType]
  static final connectionType =
      QueryStringProperty<Device>(_entities[70].properties[18]);

  /// see [Device.imei]
  static final imei = QueryStringProperty<Device>(_entities[70].properties[19]);

  /// see [Device.orderTypes]
  static final orderTypes =
      QueryIntegerVectorProperty<Device>(_entities[70].properties[20]);

  /// see [Device.refrencePrefix]
  static final refrencePrefix =
      QueryStringProperty<Device>(_entities[70].properties[21]);

  /// see [Device.info]
  static final info =
      QueryRelationToOne<Device, ActivationInfo>(_entities[70].properties[22]);

  /// see [Device.setting]
  static final setting =
      QueryRelationToOne<Device, DeviceSetting>(_entities[70].properties[23]);

  /// see [Device.products]
  static final products =
      QueryStringVectorProperty<Device>(_entities[70].properties[24]);

  /// see [Device.categories]
  static final categories =
      QueryStringVectorProperty<Device>(_entities[70].properties[25]);

  /// see [Device.departments]
  static final departments =
      QueryStringVectorProperty<Device>(_entities[70].properties[26]);
}

/// [DeviceSetting] entity fields to define ObjectBox queries.
class DeviceSetting_ {
  /// see [DeviceSetting.idSeq]
  static final idSeq =
      QueryIntegerProperty<DeviceSetting>(_entities[71].properties[0]);

  /// see [DeviceSetting.dailyStartCallNumber]
  static final dailyStartCallNumber =
      QueryIntegerProperty<DeviceSetting>(_entities[71].properties[1]);

  /// see [DeviceSetting.dailyReCallNumber]
  static final dailyReCallNumber =
      QueryIntegerProperty<DeviceSetting>(_entities[71].properties[2]);

  /// see [DeviceSetting.newOrderDefaultType]
  static final newOrderDefaultType =
      QueryStringProperty<DeviceSetting>(_entities[71].properties[3]);

  /// see [DeviceSetting.printLanguage]
  static final printLanguage =
      QueryStringProperty<DeviceSetting>(_entities[71].properties[4]);

  /// see [DeviceSetting.defaultTag]
  static final defaultTag =
      QueryStringProperty<DeviceSetting>(_entities[71].properties[5]);

  /// see [DeviceSetting.emailForDailyReport]
  static final emailForDailyReport =
      QueryStringProperty<DeviceSetting>(_entities[71].properties[6]);

  /// see [DeviceSetting.emailForShiftReport]
  static final emailForShiftReport =
      QueryStringProperty<DeviceSetting>(_entities[71].properties[7]);

  /// see [DeviceSetting.emailForTillReport]
  static final emailForTillReport =
      QueryStringProperty<DeviceSetting>(_entities[71].properties[8]);

  /// see [DeviceSetting.autoConnectToDevices]
  static final autoConnectToDevices =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[9]);

  /// see [DeviceSetting.enableBarcodeScanner]
  static final enableBarcodeScanner =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[10]);

  /// see [DeviceSetting.acceptOnlineOrders]
  static final acceptOnlineOrders =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[11]);

  /// see [DeviceSetting.sentOnlineOrdersToKitchen]
  static final sentOnlineOrdersToKitchen =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[12]);

  /// see [DeviceSetting.printOnlineOrdersUponReceipt]
  static final printOnlineOrdersUponReceipt =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[13]);

  /// see [DeviceSetting.disableAutoPrintInvoice]
  static final disableAutoPrintInvoice =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[14]);

  /// see [DeviceSetting.readCallNumberFromMasterCasher]
  static final readCallNumberFromMasterCasher =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[15]);

  /// see [DeviceSetting.printReceiptVoucherTransactions]
  static final printReceiptVoucherTransactions =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[16]);

  /// see [DeviceSetting.forceSelectPriceList]
  static final forceSelectPriceList =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[17]);

  /// see [DeviceSetting.forceSelectChareOnProductSale]
  static final forceSelectChareOnProductSale =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[18]);

  /// see [DeviceSetting.forceRestCallNumberEveryDay]
  static final forceRestCallNumberEveryDay =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[19]);

  /// see [DeviceSetting.invoiceNumberPerfixSymoble]
  static final invoiceNumberPerfixSymoble =
      QueryStringProperty<DeviceSetting>(_entities[71].properties[20]);

  /// see [DeviceSetting.invoiceNumberPerfix]
  static final invoiceNumberPerfix =
      QueryStringProperty<DeviceSetting>(_entities[71].properties[21]);

  /// see [DeviceSetting.refrencePerfix]
  static final refrencePerfix =
      QueryBooleanProperty<DeviceSetting>(_entities[71].properties[22]);
}

/// [Department1] entity fields to define ObjectBox queries.
class Department1_ {
  /// see [Department1.idSeq]
  static final idSeq =
      QueryIntegerProperty<Department1>(_entities[72].properties[0]);

  /// see [Department1.id]
  static final id =
      QueryStringProperty<Department1>(_entities[72].properties[1]);

  /// see [Department1.name]
  static final name =
      QueryStringProperty<Department1>(_entities[72].properties[2]);

  /// see [Department1.fName]
  static final fName =
      QueryStringProperty<Department1>(_entities[72].properties[3]);

  /// see [Department1.displayOrder]
  static final displayOrder =
      QueryIntegerProperty<Department1>(_entities[72].properties[4]);

  /// see [Department1.imageUrl]
  static final imageUrl =
      QueryStringProperty<Department1>(_entities[72].properties[5]);

  /// see [Department1.categories]
  static final categories =
      QueryRelationToMany<Department1, Category>(_entities[72].relations[0]);
}
