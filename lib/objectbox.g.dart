// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/model/customer/adderss.dart';
import 'data/model/customer/customer.dart';
import 'data/model/delivery/delivery_company.dart';
import 'data/model/delivery/delivery_zones.dart';
import 'data/model/department/category.dart';
import 'data/model/department/department1.dart';
import 'data/model/department/exract_categoty.dart';
import 'data/model/department/extract_department.dart';
import 'data/model/device/activation_info.dart';
import 'data/model/device/device.dart';
import 'data/model/discount/coupon.dart';
import 'data/model/discount/discount.dart';
import 'data/model/discount/discount_settings.dart';
import 'data/model/discount/promotion.dart';
import 'data/model/discount/time_event.dart';
import 'data/model/menu/menu.dart';
import 'data/model/menu/menu_category.dart';
import 'data/model/menu/menu_department.dart';
import 'data/model/menu/menu_gift_card.dart';
import 'data/model/menu/menu_product.dart';
import 'data/model/order/applied_modifer.dart';
import 'data/model/order/extract_product.dart';
import 'data/model/order/fee.dart';
import 'data/model/order/free_options.dart';
import 'data/model/order/group.dart';
import 'data/model/order/option.dart';
import 'data/model/order/order.dart';
import 'data/model/order/payment_method.dart';
import 'data/model/order/price_list.dart';
import 'data/model/order/price_list_value.dart';
import 'data/model/order/unit.dart';
import 'data/model/order/unit_modifer.dart';
import 'data/model/product/Ingredients.dart';
import 'data/model/product/barcode_scale.dart';
import 'data/model/product/modifier.dart';
import 'data/model/product/product1.dart';
import 'data/model/product/product_price_list.dart';
import 'data/model/resturant_sections/resturant_sections.dart';
import 'data/model/resturant_sections/table.dart';
import 'data/model/send_order/send_order.dart';
import 'data/model/setting/bill_copy_history.dart';
import 'data/model/setting/bill_counter.dart';
import 'data/model/setting/bill_setting.dart';
import 'data/model/setting/branch.dart';
import 'data/model/setting/cashier_setting.dart';
import 'data/model/setting/currency.dart';
import 'data/model/setting/language.dart';
import 'data/model/setting/login_history.dart';
import 'data/model/setting/loyalty.dart';
import 'data/model/setting/policy_setting.dart';
import 'data/model/setting/pos_user.dart';
import 'data/model/setting/printer.dart';
import 'data/model/setting/printer_setting.dart';
import 'data/model/setting/reasons_canceling.dart';
import 'data/model/setting/reasons_drawer_open.dart';
import 'data/model/setting/sales_invoice_templates.dart';
import 'data/model/setting/sales_invoice_templatesA4.dart';
import 'data/model/setting/tax_setting.dart';
import 'data/model/setting/tenant_setting.dart';
import 'data/model/setting/user_cashier_setting.dart';
import 'data/model/setting/view_settings.dart';
import 'data/model/shift.dart';
import 'data/model/tax/tax_c.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8045519164713017104),
      name: 'ActivationInfo',
      lastPropertyId: const obx_int.IdUid(28, 5430238121585525556),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6617475037244163394),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3541112633182123775),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 185402268644117102),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5476492729712179519),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5433110675606857468),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4455612891428595342),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 933133517917414095),
            name: 'mobile',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6423195166126767567),
            name: 'taxRegName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6768563397215379492),
            name: 'fTaxRegName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4488533244791426654),
            name: 'taxCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3462149807758318570),
            name: 'onlineOrderStartTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5657670715025800768),
            name: 'onlineOrderEndTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 275335251718203704),
            name: 'branchPrefix',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5729435126499069719),
            name: 'customerService',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 2655153686551784077),
            name: 'countryId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 191405151433509228),
            name: 'cityId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 5506161975053366942),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 5684221464560316376),
            name: 'latitude',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 3983674111699011603),
            name: 'longitude',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 2363094288189314186),
            name: 'headerInvoiceMsg',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7863944887000111604),
            name: 'footerInvoiceMsg',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 1380562267729145444),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 4605951079436536891),
            name: 'currentDeviceId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 5716455209290714029),
            name: 'receiveOnlineOrders',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 5813683143630419381),
            name: 'company',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 729552391303625800),
            name: 'fCompany',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 6844947644553612564),
            name: 'branch',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 5430238121585525556),
            name: 'fBranch',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'devices', srcEntity: 'Device', srcField: 'info')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3606476828568732083),
      name: 'Address',
      lastPropertyId: const obx_int.IdUid(17, 7936528330498948338),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7100276487705996276),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1113207618498352013),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1290192422882684727),
            name: 'addressTypeId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3330757926661159378),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8205011872333487870),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1048635178362681790),
            name: 'latitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3675891119801446689),
            name: 'longitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 347667121252888261),
            name: 'deliveryZoneId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2524949364822760394),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6917987973752059972),
            name: 'mainStreet',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8032296984601814886),
            name: 'byStreet',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6094183868753048052),
            name: 'buildingNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4182371523102372959),
            name: 'floor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1940760979719232031),
            name: 'apartmentNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 2050702201972410775),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 1717280660107275954),
            name: 'popularPlace',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 7936528330498948338),
            name: 'zipCode',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2510476373999365153),
      name: 'AppliedModifer',
      lastPropertyId: const obx_int.IdUid(2, 6899431794036209456),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9165664470253104085),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6899431794036209456),
            name: 'modifierId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7033138004333195985),
            relationTarget: 'UnitModifer')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 3137627638921697339),
            name: 'options',
            targetId: const obx_int.IdUid(4, 6570509371452973894))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6570509371452973894),
      name: 'AppliedOption',
      lastPropertyId: const obx_int.IdUid(7, 3922546048363664928),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7041168131958153675),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2988721270169054256),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9114318022167549078),
            name: 'freeQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8065010139855068991),
            name: 'taxableAmt',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7807416368032267860),
            name: 'priceWithTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6286386587798380623),
            name: 'optionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 7917522914728093306),
            relationTarget: 'Option'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3922546048363664928),
            name: 'taxInfoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 6002293103001121540),
            relationTarget: 'TaxInfo')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 4194445702919768664),
      name: 'AppliedProduct',
      lastPropertyId: const obx_int.IdUid(26, 3257711878978586602),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1839199779241203161),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2195743509766372541),
            name: 'productId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 3159975875437162671),
            relationTarget: 'ExtractProduct'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2433608978778981065),
            name: 'unitId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 6246924690806331521),
            relationTarget: 'Unit'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7381126311762585230),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2142663189399130667),
            name: 'prodRef',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6907424672779255757),
            name: 'priceWithTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6545996507687876179),
            name: 'isCansel',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2880788959561828744),
            name: 'msgCansel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4276087214988133701),
            name: 'priceLevel',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6604136884266457401),
            name: 'eventId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 4845571116096332490),
            relationTarget: 'TimeEvent'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1719232766855697758),
            name: 'discountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 2787100383822118962),
            relationTarget: 'Discount'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 917647550408183630),
            name: 'promotionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 6872980365058518445),
            relationTarget: 'Promotion'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2522677880137120465),
            name: 'taxInfoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(9, 7739652684843755446),
            relationTarget: 'TaxInfo'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6061840550061188041),
            name: 'throwbackInfoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(10, 8685922601975675470),
            relationTarget: 'ThrowbackInfo'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4535855324734111268),
            name: 'giftCardCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 6993158336775467208),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 6846286173481457662),
            name: 'optionPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 8237758993022828407),
            name: 'priceDiscount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 7022714209682558883),
            name: 'pricePromotion',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 1860251314695383881),
            name: 'taxPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 90816509895248439),
            name: 'taxableAmt',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 3445021139457448384),
            name: 'freeQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 7934077268715137691),
            name: 'isFixedPrice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 2443258869145105779),
            name: 'canEditQty',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 7495567092730617855),
            name: 'barcodePrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 3257711878978586602),
            name: 'note',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 1327583857639405975),
            name: 'appliedModifer',
            targetId: const obx_int.IdUid(3, 2510476373999365153))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 7010688511374395803),
      name: 'BarcodeScale',
      lastPropertyId: const obx_int.IdUid(14, 795771773761072421),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1757930197436312791),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6626372606677187205),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(11, 5909453405945792471)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5608896293665357261),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1737898766816491397),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7058200578903817277),
            name: 'scanPriceFromScale',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4581966369791175323),
            name: 'scalePriceIncludeTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3174325065652918453),
            name: 'scaleBarcodeDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 538456886544327843),
            name: 'scaleProductCodeDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 302052928098866871),
            name: 'scaleIntDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8649955405251504118),
            name: 'scaleDecimalDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4966439623196016126),
            name: 'scaleProductCodeFirstInBarcode',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7692699241770076264),
            name: 'departments',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 7290572470358162147),
            name: 'categories',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 795771773761072421),
            name: 'products',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 1842567019454488092),
      name: 'BillCopyHistory',
      lastPropertyId: const obx_int.IdUid(4, 8950451087627583776),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6130809719872063490),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4711035517965001828),
            name: 'billRef',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(12, 4699395923116105324)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4787820992345266924),
            name: 'billNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8950451087627583776),
            name: 'billeDate',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 8302147434037882608),
      name: 'BillCounter',
      lastPropertyId: const obx_int.IdUid(6, 6796648892143500739),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1342325051598619133),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7189677987076891773),
            name: 'dateTimeOpenOn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6337973342844448377),
            name: 'dateTimeCloseOn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4631965261650227351),
            name: 'isClosed',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2162363226457302768),
            name: 'curentCounter',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6796648892143500739),
            name: 'billPerfex',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 5029573957529933328),
            name: 'billCopyHistory',
            targetId: const obx_int.IdUid(7, 1842567019454488092))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 4370354913980683715),
      name: 'BillSetting',
      lastPropertyId: const obx_int.IdUid(41, 8189221711158288535),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 159480045612934083),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1887795117858447034),
            name: 'logoUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4966298708908226930),
            name: 'companyName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1340769680755039625),
            name: 'fCompanyName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7908326810663170032),
            name: 'taxNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1789393312231589861),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4825118967435297211),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1939649486373226134),
            name: 'fAddress',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5998195116569362615),
            name: 'headerInvoiceMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1688394201632517641),
            name: 'fHeaderInvoiceMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8908741104033233781),
            name: 'footerInvoiceMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1928460291476031319),
            name: 'fFooterInvoiceMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2720626690157431844),
            name: 'invoiceRoundFactor',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 7663491043256903749),
            name: 'enablePrintBundleProductChildren',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1740670748331962106),
            name: 'printOrderNumber',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 9172906600871119450),
            name: 'printCalories',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 270754714070254502),
            name: 'printSubTotal',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 6692550877983101387),
            name: 'printRoundDigit',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 7225404141169801470),
            name: 'printProductUnit',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3547753860614294765),
            name: 'printProductUnitPrice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 1881739147245124335),
            name: 'printProductTotalPrice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 1208956306667432233),
            name: 'printProductDiscountPrice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 7433476887976737360),
            name: 'printProductFreeQuantity',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 6841150656117966613),
            name: 'printProductTotalPriceBeforeTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 4468066555223359694),
            name: 'printProductTaxAmount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 7894276588828176102),
            name: 'printProductTaxPercentage',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 591294661584929744),
            name: 'printProductTotalPriceAfterDiscount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 3033906881635974545),
            name: 'printProductTotalPriceIncludeTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 6759455249387281596),
            name: 'printOrderClosedUser',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 6814641760355279059),
            name: 'printOrderCreatedUser',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 6991197894446137860),
            name: 'printCheckNumber',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 5370204094764986207),
            name: 'hideFreeModifierOptions',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 840603158379061821),
            name: 'invoiceTemplate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 5167472160639896795),
            name: 'refundTemplate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 7419833906414115624),
            name: 'autoPrintOnSave',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 7304605508176594824),
            name: 'printlanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 8371799694068865729),
            name: 'defaultLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 1715564675729466227),
            name: 'secondLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 1171948955092587380),
            name: 'invoiceTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 5075531432063832321),
            name: 'fInvoiceTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(41, 8189221711158288535),
            name: 'logoDataId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(13, 9189766121622771373),
            relationTarget: 'LogoData')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 1060923087034164105),
      name: 'Branch',
      lastPropertyId: const obx_int.IdUid(17, 811258836577938388),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6390306453974523051),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1922692854600100943),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(14, 2705064661366679492)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5003884956508936126),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 582588150490541185),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1982207712891049536),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6985881325837861341),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4904159303096178172),
            name: 'mobile',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4368301334972817303),
            name: 'taxRegName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7791962504360329253),
            name: 'taxCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7441282596108546270),
            name: 'onlineOrderStartTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6634229295122585608),
            name: 'onlineOrderEndTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8053511850778690216),
            name: 'branchPrefix',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5785314316452273095),
            name: 'customerService',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8438175356526331940),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 6350522274786678182),
            name: 'headerInvoiceMsg',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 7867345866675700955),
            name: 'footerInvoiceMsg',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 811258836577938388),
            name: 'receiveOnlineOrders',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 7480929052616268126),
      name: 'CashierSetting',
      lastPropertyId: const obx_int.IdUid(34, 687993758735879865),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8689659426009675885),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 608781508624506784),
            name: 'enableCashSales',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1381287265318453441),
            name: 'enableCreditCardSales',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5214934553872779703),
            name: 'enableCustomerSales',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2334774217916536241),
            name: 'enableFreeQuantity',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6693784703683834634),
            name: 'enableEditItemName',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3418810308668391908),
            name: 'enableSalesDiscount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1607487901289795975),
            name: 'enableChangePrice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8918459143824094674),
            name: 'enableProductPackages',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6574821718310014653),
            name: 'enableTablesSystem',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3700497360165710374),
            name: 'tableGuestCountRequired',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8563101754010668800),
            name: 'tableRequired',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4381672399177873144),
            name: 'discountPercentageLimit',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 2059127030664214674),
            name: 'defaultCustomerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3029090491263769676),
            name: 'priceListId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 2196088752123556801),
            name: 'daily',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3872383987780275718),
            name: 'submittingRequestsDelayMinutes',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 1413839917897970331),
            name: 'inactiveUsersLogoutMinutes',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 6103803605791040919),
            name: 'maximumReturnPeriodMinutes',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 4761002848556638835),
            name: 'requireOrderTypesForOrders',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 8548904122206427000),
            name: 'roundingType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 5946167341885474027),
            name: 'roundDigits',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 3668399399268288467),
            name: 'kitchenSortingType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 360133745731275090),
            name: 'printSortingType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 7967546851562687738),
            name: 'activeTips',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 443578806769211166),
            name: 'discountRequireCustomerInfo',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 3374393285381073279),
            name: 'returnRequireCustomerInfo',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 8306800974283051484),
            name: 'requireCancelReason',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 8566299105915786554),
            name: 'autoSentOrderToKitchenAfterPaid',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 3683657520410464754),
            name: 'autoSyncDataAtStartOfDay',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 9056492502673233834),
            name: 'autoPrintProductsReport',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 2857630184004648210),
            name: 'autoPrintTillsReport',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 3644604641763635582),
            name: 'preventEndingDayBeforeInventoryCount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 687993758735879865),
            name: 'imei',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 6078244916783860641),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(6, 7715278917411650171),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2063546063030435138),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 257839412700687707),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(15, 6868620557248634524)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7118453769082049693),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6699130276531043751),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5072113119000862066),
            name: 'displayOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7715278917411650171),
            name: 'imageUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 8585561905080688956),
      name: 'Claims',
      lastPropertyId: const obx_int.IdUid(3, 9148480257443814828),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 288357282273061083),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3219645466667045008),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9148480257443814828),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 4503282931115091162),
      name: 'Coupon',
      lastPropertyId: const obx_int.IdUid(14, 7359588619650098240),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3772476419291243668),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2163871846459551488),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(16, 5493039086170138666)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3973336684496496062),
            name: 'couponCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3181022207975349893),
            name: 'useCountForAll',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5216040579188466304),
            name: 'useCountForOne',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3212280251628465658),
            name: 'maximumUses',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8072769407025508972),
            name: 'startDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5420433777692002490),
            name: 'endDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6745153328259754916),
            name: 'startTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6682788039387054121),
            name: 'endTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3648356393771755567),
            name: 'discountId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8015457749254284745),
            name: 'days',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3197122306450191402),
            name: 'couponLevel',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 7359588619650098240),
            name: 'numberOFProducts',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(15, 5506367584043663127),
      name: 'Currencies',
      lastPropertyId: const obx_int.IdUid(12, 3348852181815610854),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5709782060920058742),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5688779697324701988),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(17, 9169194266540306608)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4036160474159473517),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1872371998899447118),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1928823048242463340),
            name: 'currencyCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6041935395061647849),
            name: 'displayLocale',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2101962023087060234),
            name: 'isDefault',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7928620743769916502),
            name: 'customFormatting',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1118959359592175061),
            name: 'exchangeRate',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8581593053442894446),
            name: 'minExchangeRate',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7222981645326874361),
            name: 'maxExchangeRate',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3348852181815610854),
            name: 'dens',
            type: 27,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(16, 7031224378041322061),
      name: 'Customer',
      lastPropertyId: const obx_int.IdUid(17, 2267917642970494992),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1099625014267012106),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3353081886751995721),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(18, 6931620053956507639)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 17596210368423646),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3440536882807525301),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5958838879172145765),
            name: 'mobile',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7744615921491192320),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 945337249867792683),
            name: 'debitLimit',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2201597777230340888),
            name: 'balance',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3769608952357488310),
            name: 'paymentMethodId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1864471791125818273),
            name: 'currencyId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7315283569320874151),
            name: 'taxNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5477978384310191682),
            name: 'taxRegisterationName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 131274128314716012),
            name: 'inBlackList',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 65079982847022953),
            name: 'blackListNote',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7795290986758034733),
            name: 'priceListId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 2800025843417485165),
            name: 'enableHouseAccount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2267917642970494992),
            name: 'taxable',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 3462683173175220146),
            name: 'addersses',
            targetId: const obx_int.IdUid(2, 3606476828568732083)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(5, 8839286626918092936),
            name: 'houseAccountTranscations',
            targetId: const obx_int.IdUid(73, 7021566717734900592))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(17, 7912524195125816900),
      name: 'DeliveryCompany',
      lastPropertyId: const obx_int.IdUid(9, 3996230898278333906),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3445291477651066444),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4553721071554838118),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(19, 3107969678457209248)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6752267690226716274),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4437856314203594779),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3091602400462191178),
            name: 'mobile',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 407844264744261270),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7766181908448337660),
            name: 'countryId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1430734515837540206),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3996230898278333906),
            name: 'commissionRate',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(18, 1856773083405585309),
      name: 'DeliveryCompanyInfo',
      lastPropertyId: const obx_int.IdUid(3, 3866631704439139222),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2122541866348859031),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5010005045212704340),
            name: 'companyId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(20, 8314516322216167826),
            relationTarget: 'DeliveryCompany'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3866631704439139222),
            name: 'orderNumber',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(19, 42104524927962975),
      name: 'DeliveryZone',
      lastPropertyId: const obx_int.IdUid(7, 677428579525330317),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5259878921701407741),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4754894740463378622),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(21, 7365207371107463822)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7740273284510169113),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4507401929069396563),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6647731940212310302),
            name: 'deliveryZoneCoordinate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 469151741890996985),
            name: 'minimumDeliveryCharge',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 677428579525330317),
            name: 'deliveryChargePerKM',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(20, 3090099443903673698),
      name: 'Department1',
      lastPropertyId: const obx_int.IdUid(6, 6970983977150827297),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8179754639410063438),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7091897581860781572),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(22, 1627678291284355818)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2759469849336116931),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2059883096488499801),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8779381583575579568),
            name: 'displayOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6970983977150827297),
            name: 'imageUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(6, 7266130308168062398),
            name: 'categories',
            targetId: const obx_int.IdUid(12, 6078244916783860641))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(21, 2208031943709943172),
      name: 'Device',
      lastPropertyId: const obx_int.IdUid(30, 4091436076607296752),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3057155096175465274),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4758741644858779303),
            name: 'deviceId',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(23, 8095647486617008989)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1382823432656570020),
            name: 'deviceTypeId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9011710801932883360),
            name: 'deviceModelId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9012510937827564566),
            name: 'deviceTypeCode',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1655604032181778751),
            name: 'masterDeviceNo',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6415149248975247950),
            name: 'reference',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4663262979791585470),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7524005037153162535),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3873869773802814864),
            name: 'enableOnlineOrderReceiver',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6865358748166523973),
            name: 'model',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 339003689497189536),
            name: 'systemVersion',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2679150186688169155),
            name: 'appVersion',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6224923588397400890),
            name: 'build',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3791335548211214170),
            name: 'latitude',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 2586873370433277651),
            name: 'longitude',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2774155621979895977),
            name: 'connectionIPAddress',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 9052320133836897327),
            name: 'connectionPort',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 7215085941141580722),
            name: 'connectionType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 4347201389301927812),
            name: 'imei',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 3177117585405529758),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 4888110089523343734),
            name: 'refrencePrefix',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 8872117026440167931),
            name: 'ip',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 3322261468137138378),
            name: 'infoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(24, 1154647945016180852),
            relationTarget: 'ActivationInfo'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 9194170187629381407),
            name: 'settingId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(25, 6063518893048699276),
            relationTarget: 'DeviceSetting'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 836062450964650329),
            name: 'products',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 7941208398139630423),
            name: 'categories',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 6055509529916937594),
            name: 'departments',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 7430636330474360347),
            name: 'users',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 4091436076607296752),
            name: 'resturnatSections',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(22, 1649786888668911883),
      name: 'DeviceSetting',
      lastPropertyId: const obx_int.IdUid(23, 2174741967102540071),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5307849251196212525),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3067115730713669730),
            name: 'dailyStartCallNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2942480615527943196),
            name: 'dailyReCallNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4475840232823503760),
            name: 'newOrderDefaultType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1144170713930429296),
            name: 'printLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1904295629713165526),
            name: 'defaultTag',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5075749120119504104),
            name: 'emailForDailyReport',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4729531499606807720),
            name: 'emailForShiftReport',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6255776250715821025),
            name: 'emailForTillReport',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2409506262039114054),
            name: 'autoConnectToDevices',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1049638798714295911),
            name: 'enableBarcodeScanner',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1035426303516336363),
            name: 'acceptOnlineOrders',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4151002668874803126),
            name: 'sentOnlineOrdersToKitchen',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 7417445007889409178),
            name: 'printOnlineOrdersUponReceipt',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8416165962025721226),
            name: 'disableAutoPrintInvoice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 3914251425959506839),
            name: 'readCallNumberFromMasterCasher',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2737318098977991186),
            name: 'printReceiptVoucherTransactions',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 1018259574853894424),
            name: 'forceSelectPriceList',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 4153231038569246524),
            name: 'forceSelectChareOnProductSale',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 5240663025697220856),
            name: 'forceRestCallNumberEveryDay',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 559552142798112452),
            name: 'invoiceNumberPerfixSymoble',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 393211589070427733),
            name: 'invoiceNumberPerfix',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 2174741967102540071),
            name: 'refrencePerfix',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(23, 2455135106501388491),
      name: 'Discount',
      lastPropertyId: const obx_int.IdUid(22, 4277958190418159704),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6739088665637884239),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6088742414191549368),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(26, 2560536967684579857)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1065203942257881488),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9151665386049559818),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 981017938923930885),
            name: 'startDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4945045918677071714),
            name: 'endDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2923077876708211582),
            name: 'startTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5124902323876817733),
            name: 'endTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3561777879804337658),
            name: 'discountAppliedTo',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3291099693077534346),
            name: 'discountType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1742860114237979511),
            name: 'discountPercentage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5203107809999414173),
            name: 'discountAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6131130926318960694),
            name: 'maximumDiscountAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4425558998375539259),
            name: 'minimalOrderAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3561584945514851538),
            name: 'taxable',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 3331022042318911953),
            name: 'productIDs',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 1976223173914367426),
            name: 'days',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 3527410372021061446),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 648884063561785487),
            name: 'priceList',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 6420367759437188611),
            name: 'customers',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 5461288127140651674),
            name: 'departments',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 4277958190418159704),
            name: 'categories',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(24, 5199251264287351179),
      name: 'DiscountSetting',
      lastPropertyId: const obx_int.IdUid(11, 8159409521635846099),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2628101639590597095),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6989439756822498032),
            name: 'enableDiscount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5666819271152905180),
            name: 'enablePromotion',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 820509022281045608),
            name: 'enableCoupon',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3919036589391450190),
            name: 'enableTimeEvent',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8508613560286175567),
            name: 'enableDiscountInSalesInvoice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6469498039783085566),
            name: 'enableDiscountInPurchaseInvoice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6282447138038643480),
            name: 'enableDiscountInSalesInvoiceProducts',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7831930054245728582),
            name: 'enableDiscountInPurchaseInvoiceItems',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 9083318702275596063),
            name: 'enableFreeQuantityInSalesInvoiceItems',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8159409521635846099),
            name: 'enableFreeQuantityInPurchaseInvoiceItems',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(25, 5709284473879531021),
      name: 'ExtractCategory',
      lastPropertyId: const obx_int.IdUid(6, 3278930203010306101),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6686767711579774610),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9118850447675591327),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(27, 8966609097407001803)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2142337774359107765),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(28, 7102111920256180951)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2390636759434088613),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2308965966533475456),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3278930203010306101),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(26, 6187707332296778069),
      name: 'ExtractDepartment',
      lastPropertyId: const obx_int.IdUid(6, 8225359755768163813),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7555134755522831231),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3688203251971912616),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(29, 3754607188315827306)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7619437235873661619),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(30, 7940047430184522707)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 693856881909842546),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5707603783780859),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8225359755768163813),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(7, 2687391352942490676),
            name: 'categories',
            targetId: const obx_int.IdUid(25, 5709284473879531021))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(27, 7374566766039686698),
      name: 'ExtractProduct',
      lastPropertyId: const obx_int.IdUid(50, 4043521233026226237),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6272986964423167514),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6059041181478540482),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(31, 2916048814200648103)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6181701602038531229),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1015071057608595301),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 582966563884132888),
            name: 'sku',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2792910124586069385),
            name: 'barcode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1968034650353209852),
            name: 'productTypeId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3709445163302201134),
            name: 'costType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7410169843635466637),
            name: 'priceType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8123667429235327761),
            name: 'salesMethod',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4334753071142275203),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1130948510678596598),
            name: 'cost',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1341364177098652520),
            name: 'preparationTime',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4657406956228689905),
            name: 'activeQRScan',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 2148247630366127141),
            name: 'qrScanOnSameDate',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 3686330099181616959),
            name: 'enableSalesDiscount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 1829445470613183145),
            name: 'discountPercentageLimit',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 1992488221189988680),
            name: 'enableFreeQuantity',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 2513461696372034739),
            name: 'enableDateExpire',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 5471605042465229334),
            name: 'enableIMEISerial',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 5507902139737011097),
            name: 'enableWeights',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 4804230793083778526),
            name: 'scanPriceFromScale',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 1100241951053983444),
            name: 'scalePriceIncludeTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 8695341948878254512),
            name: 'independentPrinting',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 6954330613936154914),
            name: 'calculateQuantityFromTotalPrice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 6936999979940584172),
            name: 'reservationRequired',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 8137659576212072754),
            name: 'scaleBarcodeDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 6391752480636684859),
            name: 'scaleProductCodeDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 6711109982607089988),
            name: 'scaleIntDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 5714296446049887888),
            name: 'scaledecimalDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 3793490413466711776),
            name: 'scaleProductCodeFirstInBracode',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 8864054211465699315),
            name: 'availableStartDateTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 4869227009331202361),
            name: 'availableEndDateTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 8591879823874468228),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 2610072163970560247),
            name: 'fDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 3829771690450355529),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 501533283118915776),
            name: 'calories',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 694479313987808310),
            name: 'minimumLevel',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 6497468719211654677),
            name: 'maximumLevel',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 333022194465537641),
            name: 'categoryId',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(32, 4312920891102487139)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(41, 1560544945620929034),
            name: 'departmentId',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(33, 5697544181505654415)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(42, 6013399949310277881),
            name: 'productNature',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(43, 1180885629916275673),
            name: 'active',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(44, 8467131018362842250),
            name: 'taxGroupId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(45, 7775421651105680964),
            name: 'subName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(46, 2512631187408804643),
            name: 'fSubName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(47, 5303177606038501899),
            name: 'promotionalName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(48, 3941582707310539354),
            name: 'fPromotionalName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(49, 2950215449486156516),
            name: 'tags',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(50, 4043521233026226237),
            name: 'fTags',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(8, 930742751112077972),
            name: 'units',
            targetId: const obx_int.IdUid(74, 4161930827695234175)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(9, 4959829791994289278),
            name: 'groups',
            targetId: const obx_int.IdUid(31, 5237959337572382397))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(28, 4606616327623200232),
      name: 'Fee',
      lastPropertyId: const obx_int.IdUid(19, 8245679497649091979),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4652187004693229059),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1462380992002386731),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(34, 6234483322086378542)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6806929687403908095),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1617726309456775071),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7342460567172410527),
            name: 'type',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8934120262712559656),
            name: 'valueType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3926356420133447183),
            name: 'value',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1715004341432656166),
            name: 'percentage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4532176249529968645),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1854816433270626899),
            name: 'days',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1106878165938230628),
            name: 'products',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 277069265344423426),
            name: 'taxGroupId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6566477836818781118),
            name: 'applyAuto',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 695822151935029634),
            name: 'applyToSubtotal',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 5393786858699905389),
            name: 'applyForProducts',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 4368149185052807324),
            name: 'printSeparatelyInTotalInvoice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 5390121367461881268),
            name: 'amountIncludeInProductPrice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 1803243845693529281),
            name: 'minAmountPerProduct',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 8245679497649091979),
            name: 'maxAmountPerProduct',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(29, 4373177938329845751),
      name: 'FeeValue',
      lastPropertyId: const obx_int.IdUid(5, 4921033890581147827),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7090102407566621080),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6954661098709187957),
            name: 'feeId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 985418742834968633),
            name: 'value',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7995223131590561901),
            name: 'applyAuto',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4921033890581147827),
            name: 'taxInfoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(35, 3537599790239284466),
            relationTarget: 'TaxInfo')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(30, 395527205777665075),
      name: 'FreeOption',
      lastPropertyId: const obx_int.IdUid(3, 6650401930681696237),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 808997451474536565),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5058938544802991540),
            name: 'optionId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6650401930681696237),
            name: 'freeQuantity',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(31, 5237959337572382397),
      name: 'Group',
      lastPropertyId: const obx_int.IdUid(5, 760515166490926437),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2923172080608809255),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2871055217962080464),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(36, 7050497261132434885)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7282157929973119856),
            name: 'groupId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1055815413270053928),
            name: 'groupName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 760515166490926437),
            name: 'reference',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(32, 2410791601723707011),
      name: 'Ingredient',
      lastPropertyId: const obx_int.IdUid(15, 5466404606835289461),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6366356390035988416),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8232464802555812122),
            name: 'isActive',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6862541845912660473),
            name: 'displayOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5525365550856194302),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(37, 5191617527441298796)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8714458847817207420),
            name: 'ingredientItemId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5792123411602255506),
            name: 'ingredientItemName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5615611155091859914),
            name: 'barcode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5579575933974103972),
            name: 'unitOfMeasureName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3423072897370463498),
            name: 'warehouseToIngredientFactor',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6011689838532120147),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3626772755332600386),
            name: 'wasteQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2714830512693783536),
            name: 'unitCost',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8048801583402375904),
            name: 'estimatedUnitCost',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 2641504755387487816),
            name: 'yieldPercentage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 5466404606835289461),
            name: 'orderTypes',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(33, 573128115296281144),
      name: 'Language',
      lastPropertyId: const obx_int.IdUid(6, 2166058481479562121),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3608046576952249530),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 582235267470050897),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6854606275203106441),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6613223152058876864),
            name: 'languageCulture',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 214969519001782714),
            name: 'uniqueSeoCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2166058481479562121),
            name: 'rtl',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(34, 4814643854208855958),
      name: 'LoginHistory',
      lastPropertyId: const obx_int.IdUid(7, 5028499062224808691),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 903603718099932927),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5319262255379976672),
            name: 'idIdentity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6333044415792067970),
            name: 'loginTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8881158881309816099),
            name: 'logoutTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6227108620808807574),
            name: 'usertId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6204074747392649640),
            name: 'deviceNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5028499062224808691),
            name: 'deviceRef',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(35, 2866405995364078522),
      name: 'LogoData',
      lastPropertyId: const obx_int.IdUid(3, 590392725930031309),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3567246263522506189),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3869708942797982597),
            name: 'logoUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 590392725930031309),
            name: 'logoData',
            type: 23,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(36, 5642208506737982532),
      name: 'LoyaltySetting',
      lastPropertyId: const obx_int.IdUid(13, 4998359529119096087),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6074504240349776661),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1665450047939648987),
            name: 'enableSystem',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8360890577595943533),
            name: 'loyaltyMethod',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 37143106014061224),
            name: 'lowestOrderPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4187625489417083932),
            name: 'delayInEarningPointsMinutes',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7914445272122828233),
            name: 'bonusType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2346869537236584182),
            name: 'bonusValue',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9006827569208772646),
            name: 'maximumBonusLimit',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5369456060425621390),
            name: 'requiredBonusPoint',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3691229260771988726),
            name: 'bonusValidityDays',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6661033183237582018),
            name: 'enableSMSNotifications',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8338005361917651418),
            name: 'displayBonusOnNewOrder',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4998359529119096087),
            name: 'printBonusBalanceOnNewOrder',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(37, 5402041640562085008),
      name: 'Menu',
      lastPropertyId: const obx_int.IdUid(4, 1809448749374387307),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5678087716280638481),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4671075382998793653),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(38, 4913896390796502013)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 428161863234813803),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1809448749374387307),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(10, 8570341431611523904),
            name: 'departments',
            targetId: const obx_int.IdUid(39, 8482279252803615616)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(11, 3611885172187780159),
            name: 'categories',
            targetId: const obx_int.IdUid(38, 8891252956341857839)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(12, 7740941020731930208),
            name: 'products',
            targetId: const obx_int.IdUid(41, 2985683808290624879)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(13, 5723309271608625185),
            name: 'giftCards',
            targetId: const obx_int.IdUid(40, 9008820639272747408))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(38, 8891252956341857839),
      name: 'MenuCategory',
      lastPropertyId: const obx_int.IdUid(3, 5696394154107065842),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8037360251911336602),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 389603646281158704),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5696394154107065842),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(39, 2880240391173332419))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(39, 8482279252803615616),
      name: 'MenuDepartment',
      lastPropertyId: const obx_int.IdUid(3, 4098088283055639967),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5299679939943319191),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4052430874388663764),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4098088283055639967),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(40, 7757568157168427397))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(40, 9008820639272747408),
      name: 'MenuGiftCard',
      lastPropertyId: const obx_int.IdUid(3, 1171905228911328954),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 228139661639631692),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5329767338772382130),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1171905228911328954),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(41, 8111700748318902984))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(41, 2985683808290624879),
      name: 'MenuProduct',
      lastPropertyId: const obx_int.IdUid(3, 6686265612052278213),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6380660916696001074),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8940097596488848928),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6686265612052278213),
            name: 'order',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(42, 2613080615415913671))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(42, 216976888841264912),
      name: 'Modifier',
      lastPropertyId: const obx_int.IdUid(7, 7352065515957291468),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2026395823466612313),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8336151576945344378),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6095235461264636858),
            name: 'minimumOptions',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2813574548622314612),
            name: 'maximumOptions',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4876559035612113828),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 346962738683363908),
            name: 'fname',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7352065515957291468),
            name: 'isUnique',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(14, 4505352691944429313),
            name: 'options',
            targetId: const obx_int.IdUid(43, 8514080205124919641))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(43, 8514080205124919641),
      name: 'Option',
      lastPropertyId: const obx_int.IdUid(14, 7950708980344987702),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6539676830525317873),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2945100391828118957),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3650992186533757050),
            name: 'costType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5209245123020843078),
            name: 'modifierType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5819217396900891663),
            name: 'instructionType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8644209955093708339),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7914930683503629528),
            name: 'cost',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4430195485694718379),
            name: 'calories',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7661199617661197970),
            name: 'inStock',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2173620069737369707),
            name: 'isDefault',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3870765753198928265),
            name: 'displayOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5878328438951590676),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4351310801246217329),
            name: 'fname',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 7950708980344987702),
            name: 'taxGroupId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(44, 7842135050779151667),
      name: 'OrderC',
      lastPropertyId: const obx_int.IdUid(59, 7699985157769986675),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1753801513438199911),
            name: 'idSeq',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6385703053874101680),
            name: 'invoiceNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8008454294171146395),
            name: 'deviceId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1995588561275725622),
            name: 'startDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 446422823895629938),
            name: 'timeOfReceipt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2863224398749528497),
            name: 'parentOrderId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8422386929924424505),
            name: 'splitIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 429801184603275468),
            name: 'orderRef',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(43, 5696686251448895153)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6842217351022931310),
            name: 'callName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1016982477223430280),
            name: 'orderType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 247800741687271964),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4271990242429783081),
            name: 'orderSource',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 189407511482112767),
            name: 'endTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3089383546981126185),
            name: 'deliveryCompanyInfoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(44, 8282312176556683617),
            relationTarget: 'DeliveryCompanyInfo'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5579257531563068583),
            name: 'tableId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 4507062526097321582),
            name: 'tableCaption',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 3318617081410677297),
            name: 'numberVistor',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 3678601691601572854),
            name: 'minimumReservationPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 1636490675367073388),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(45, 5686235596335019579),
            relationTarget: 'Customer'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 4912627094127914482),
            name: 'addressId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(46, 8056662411348933359),
            relationTarget: 'Address'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 9006887747518975523),
            name: 'promotionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(47, 5140542515932094581),
            relationTarget: 'Promotion'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 3314449483820748590),
            name: 'discountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(48, 6611853550526987485),
            relationTarget: 'Discount'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 5381380290188657772),
            name: 'priceDiscount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 3007210273849451256),
            name: 'pricePromotion',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 5456613572680379038),
            name: 'note',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 4680232859063713429),
            name: 'kitchenNote',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 5384232927961271933),
            name: 'msgCansel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 5070944120886635107),
            name: 'subTotal',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 3430075816812717123),
            name: 'checksum',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 3727620318323025988),
            name: 'masterChecksum',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 4905787863838795032),
            name: 'serverChecksum',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 4195880203385279291),
            name: 'totalFee',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 3208516936807177841),
            name: 'taxPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 3464884138640484159),
            name: 'totalPaid',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 3309232597137227973),
            name: 'shiftId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 1687130210106488332),
            name: 'tillId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 6106931149566314416),
            name: 'totalCalories',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 8904683660786211987),
            name: 'totalDiscountForOrderAndProduct',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 4523480091594187749),
            name: 'priceListId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(41, 1124491691560176527),
            name: 'posTransactionType',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(42, 7549563512968308700),
            name: 'callNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(43, 6294190789633290918),
            name: 'giftCardId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(67, 350428259539118090),
            relationTarget: 'SendGiftCard'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(44, 637423639748244923),
            name: 'paymentStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(45, 6955304991224222006),
            name: 'refundStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(46, 6062244521262885640),
            name: 'deliveryStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(47, 3293431292565428469),
            name: 'roundingAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(48, 4634865484995428339),
            name: 'tipAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(49, 1995106809962708726),
            name: 'donationAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(50, 2113544658629808847),
            name: 'donationForId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(51, 1383638675385342553),
            name: 'supervisorId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(52, 713992950007179333),
            name: 'reference',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(53, 6375354927395467172),
            name: 'casherNote',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(54, 6713291243649541549),
            name: 'trackingStatusId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(55, 1669804975744863900),
            name: 'couponId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(56, 2956535393343338489),
            name: 'createdOn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(57, 4158570649257554152),
            name: 'createdBy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(58, 7428074760909259103),
            name: 'lastModifiedBy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(59, 7699985157769986675),
            name: 'lastModifiedOn',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(15, 658464845739345685),
            name: 'products',
            targetId: const obx_int.IdUid(5, 4194445702919768664)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(16, 9035696523162756172),
            name: 'fees',
            targetId: const obx_int.IdUid(28, 4606616327623200232)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(17, 3915245292661165848),
            name: 'feeValues',
            targetId: const obx_int.IdUid(29, 4373177938329845751)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(18, 8190463442925437874),
            name: 'payments',
            targetId: const obx_int.IdUid(46, 8974749982917266440))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(45, 5176561072722040073),
      name: 'PaymentMethod',
      lastPropertyId: const obx_int.IdUid(10, 5349139573420479251),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9201977648364678336),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7141494695734029756),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(49, 3932587392598003628)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 976824168086662864),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 397311398247923241),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4263957863017742610),
            name: 'paymentType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4120465531607748316),
            name: 'displayOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8259943680187340585),
            name: 'isActive',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8479984831016879450),
            name: 'isDeleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2184350784600308443),
            name: 'autoOpenCashDrawer',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5349139573420479251),
            name: 'imageUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(46, 8974749982917266440),
      name: 'PaymentValue',
      lastPropertyId: const obx_int.IdUid(9, 1543504826893757945),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8261605623782363554),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3396060311938131549),
            name: 'refreance',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8613885881718579141),
            name: 'methodId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(50, 368873151608645621),
            relationTarget: 'PaymentMethod'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8715730564463738172),
            name: 'amt',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4563795782034941343),
            name: 'remainAmt',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 851152656180960005),
            name: 'exchangeRate',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6888166921414474645),
            name: 'amountCurecny',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1679273660338774402),
            name: 'currencyCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1543504826893757945),
            name: 'defaultCurrencyId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(47, 7952018262540507582),
      name: 'PolicySetting',
      lastPropertyId: const obx_int.IdUid(6, 8746457681849159129),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7194138933998108991),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5551586142589221693),
            name: 'enableOrderCancelation',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1428442981498313666),
            name: 'enablePosRefund',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1874805716274718618),
            name: 'enableUsingExpiredTicket',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8701034357932569696),
            name: 'orderPolicyAR',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8746457681849159129),
            name: 'orderPolicyEN',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(48, 2999850600817306817),
      name: 'PosUser',
      lastPropertyId: const obx_int.IdUid(13, 2829745844714393290),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7689782816896693259),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1464741926337684160),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 149201934837829491),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5539539547463628018),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6801069914061037293),
            name: 'passwordHash',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6447532953644951274),
            name: 'pin',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7598445715640819471),
            name: 'pinMD5',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2015882653219830917),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7163817187353304870),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1998283840434127651),
            name: 'appslanguageCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4716178516311190500),
            name: 'appsDataLanguageCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6487219018099083331),
            name: 'dashboardlanguageCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2829745844714393290),
            name: 'cashierSettingId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(51, 8084719929455590064),
            relationTarget: 'UserCashierSetting')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(19, 4693959171148296009),
            name: 'roles',
            targetId: const obx_int.IdUid(59, 6689772507841115089))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(49, 4253956602387728621),
      name: 'PriceList',
      lastPropertyId: const obx_int.IdUid(5, 1202370583215906791),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6197957923267849503),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3808644968222007230),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(52, 2907004217005444700)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5616649102730047155),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1579084921088184583),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1202370583215906791),
            name: 'priceIncludeTax',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(50, 2484875722998443075),
      name: 'PriceListValue',
      lastPropertyId: const obx_int.IdUid(3, 2225890766893950428),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1920533505441077710),
            name: 'idSeq',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1229694692160233856),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2225890766893950428),
            name: 'price',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(20, 1867358382328035850),
            name: 'slaps',
            targetId: const obx_int.IdUid(63, 6441730119704921212))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(51, 4247206600583730857),
      name: 'Printer',
      lastPropertyId: const obx_int.IdUid(15, 9181390543887291499),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1577516270149167754),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6305161161729945062),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(53, 7785616316338948606)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2521921593217420224),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8404372827104417856),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4507995089381712158),
            name: 'deviceId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6773537643029574968),
            name: 'printerModelId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5266002804289599020),
            name: 'connectionType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6577780351009894349),
            name: 'ipAddress',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7044772676393256277),
            name: 'printerType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5495022457113430742),
            name: 'printTo',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7686121831235132990),
            name: 'port',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4599283722762352873),
            name: 'products',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4530343960409734314),
            name: 'departments',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1011346000562234378),
            name: 'categories',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 9181390543887291499),
            name: 'orderTypes',
            type: 27,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(21, 1871293582061464039),
            name: 'settings',
            targetId: const obx_int.IdUid(52, 7384563019772151382))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(52, 7384563019772151382),
      name: 'PrinterSetting',
      lastPropertyId: const obx_int.IdUid(9, 1647754062214845790),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3955529143871549794),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8795661039715934585),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(54, 52865049000391609)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8143914327792354357),
            name: 'printerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5287136031920159412),
            name: 'paperSize',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7639444480116344682),
            name: 'scale',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7546674681505609617),
            name: 'imageCutterFactor',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2857399056119623835),
            name: 'cutterCommandCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6428995595646436287),
            name: 'autoPrint',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1647754062214845790),
            name: 'numberOfCopy',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(53, 5087168898656921036),
      name: 'Product1',
      lastPropertyId: const obx_int.IdUid(51, 7083268133013744879),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1226503679367547256),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 371491268901648245),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(55, 4867297166648825722)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3148303268826153977),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8193309226597382802),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5808659348265880791),
            name: 'sku',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1580974494991419583),
            name: 'barcode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7322437823209635316),
            name: 'productTypeId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 897949915123083900),
            name: 'costType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7855159877433121810),
            name: 'priceType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 458884906955474539),
            name: 'salesMethod',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7370277800341982111),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4981606321040335658),
            name: 'cost',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8018955344910082988),
            name: 'preparationTime',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 813889384788442067),
            name: 'activeQRScan',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1866859244172395221),
            name: 'qrScanOnSameDate',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 4612437040452476513),
            name: 'enableSalesDiscount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 6584163581132208797),
            name: 'discountPercentageLimit',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 1549605591933801921),
            name: 'enableFreeQuantity',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 8767070897254508874),
            name: 'enableDateExpire',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 2573796304591429548),
            name: 'enableIMEISerial',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7421085243734933763),
            name: 'enableWeights',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 2114832341264640205),
            name: 'scanPriceFromScale',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 4876896507070927038),
            name: 'scalePriceIncludeTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 7974576248732052806),
            name: 'independentPrinting',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 4692673883266755653),
            name: 'calculateQuantityFromTotalPrice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 4391187974878901744),
            name: 'reservationRequired',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 8931361415515182971),
            name: 'scaleBarcodeDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 6060509258260443982),
            name: 'scaleProductCodeDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 4842697053188702296),
            name: 'scaleIntDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 6499849295972064161),
            name: 'scaledecimalDigits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 2705584703052438228),
            name: 'scaleProductCodeFirstInBracode',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 3079196174999623386),
            name: 'availableStartDateTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 2918692632486623164),
            name: 'availableEndDateTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 3346471386034302692),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 7035068342087978152),
            name: 'fDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 7086549356450893433),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 8372178283449645176),
            name: 'calories',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 7049381888909955772),
            name: 'minimumLevel',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 6623933907656911933),
            name: 'maximumLevel',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 3729675467112458845),
            name: 'categoryId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(41, 825962686673013980),
            name: 'departmentId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(42, 167219159455267925),
            name: 'productNature',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(43, 6063414373710836282),
            name: 'active',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(44, 7350378011069619271),
            name: 'taxGroupId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(45, 3858613107925667210),
            name: 'subName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(46, 4696012058994726914),
            name: 'fSubName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(47, 5234486712785738471),
            name: 'promotionalName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(48, 4630623099618528966),
            name: 'fPromotionalName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(49, 3548055557761017191),
            name: 'tags',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(50, 2837543355242210721),
            name: 'fTags',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(51, 7083268133013744879),
            name: 'showAlertPreparationTime',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(22, 2202635047596653726),
            name: 'units',
            targetId: const obx_int.IdUid(74, 4161930827695234175)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(23, 6997418342767521033),
            name: 'modifiers',
            targetId: const obx_int.IdUid(42, 216976888841264912)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(24, 6879085066509136402),
            name: 'ingredients',
            targetId: const obx_int.IdUid(32, 2410791601723707011)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(25, 7073478374109276084),
            name: 'groups',
            targetId: const obx_int.IdUid(31, 5237959337572382397))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(54, 2249894947468399679),
      name: 'ProductPriceList',
      lastPropertyId: const obx_int.IdUid(3, 15584027726152456),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4990976085261915722),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 203821829944478504),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(56, 5971008504658605715)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 15584027726152456),
            name: 'price',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(55, 6399039104395638890),
      name: 'Promotion',
      lastPropertyId: const obx_int.IdUid(22, 429164694286334845),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1027127749216098908),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3536713716522566205),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(57, 170612324747572347)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5027816011421326645),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6478541697089562789),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5021849302500096607),
            name: 'startDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4477184794941610320),
            name: 'endDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6239509471742212671),
            name: 'startTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8678112060595602251),
            name: 'endTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3028289480588175354),
            name: 'promotionType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8970610018972988013),
            name: 'discountType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6669733623182175945),
            name: 'discountPercentage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1933879032732794233),
            name: 'discountAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1916691656192505033),
            name: 'maximumDiscountAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1954739813984333197),
            name: 'promotionApplyType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1011188844096946744),
            name: 'customerQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 6783964061459414438),
            name: 'customerAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3731604682177437841),
            name: 'promotionApplyToType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 3651739393030062111),
            name: 'days',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 2117922794690103357),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 557478408839449831),
            name: 'purchaseProducts',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 5078221134130793930),
            name: 'discountProducts',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 429164694286334845),
            name: 'priority',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(56, 1242628010645315411),
      name: 'ReasonsCanceling',
      lastPropertyId: const obx_int.IdUid(4, 531190644657969109),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6993750671806239719),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3210660673907349376),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(58, 9197961789176119791)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8892367760390478683),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 531190644657969109),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(57, 1033840295379409717),
      name: 'ReasonsDrawerOpen',
      lastPropertyId: const obx_int.IdUid(4, 4936236778827261539),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5089316501560867977),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1665678483189381634),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(59, 1037672031100441597)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 890596331203271852),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4936236778827261539),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(58, 4053087436245845158),
      name: 'ResturantSection',
      lastPropertyId: const obx_int.IdUid(4, 3169812282183337019),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2349685449345469526),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3905296482260635714),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(60, 1110333139096855595)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3610056093807319243),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3169812282183337019),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(26, 3793512817143573509),
            name: 'tables',
            targetId: const obx_int.IdUid(64, 4523182737628321768))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(59, 6689772507841115089),
      name: 'Roles',
      lastPropertyId: const obx_int.IdUid(3, 688837265492678017),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8289233993591969879),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4691638048886490408),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 688837265492678017),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(27, 1124832083451722505),
            name: 'claims',
            targetId: const obx_int.IdUid(13, 8585561905080688956))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(60, 6818378341795595111),
      name: 'SalesInvoiceTemplates',
      lastPropertyId: const obx_int.IdUid(51, 490776852860280721),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5668905701845677693),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8204123067112781074),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(61, 252687542267574008)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6653719158521788569),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2121435723820089233),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3218833412862238683),
            name: 'printedTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2825083297465017228),
            name: 'fPrintedTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1675515315741478950),
            name: 'headerInvoiceMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1172558817277656474),
            name: 'fHeaderInvoiceMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 13051251434745316),
            name: 'footerInvoiceMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4130857593119631376),
            name: 'fFooterInvoiceMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 586985117178951334),
            name: 'printCompanyName',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6913134127244739875),
            name: 'printBranchName',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3873339884371365062),
            name: 'printCRNo',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8692262894741210649),
            name: 'printBankAccount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8985168730501179001),
            name: 'printTaxNumber',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 8807578453232608881),
            name: 'printPaymentType',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 165795436469786036),
            name: 'printOrderType',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 8044459704887162476),
            name: 'printOrderNumber',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 8622395567061017558),
            name: 'printUnitSize',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3128805532370178679),
            name: 'printProductSecondaryName',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7389609277821860234),
            name: 'printCalories',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 6255030072794398118),
            name: 'printSubTotal',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 5943238208761528311),
            name: 'printRoundDigit',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 563517819607454151),
            name: 'printProductUnit',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 6397868813871943175),
            name: 'printProductUnitPrice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 1202261406845608228),
            name: 'printProductTotalPrice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 625919156615371242),
            name: 'printProductDiscountPrice',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 897804657666219449),
            name: 'printProductFreeQuantity',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 5709336397577171274),
            name: 'printProductTotalPriceBeforeTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 8349512207053126927),
            name: 'printProductTaxAmount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 2345261128338022897),
            name: 'printProductTaxPercentage',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 764241523926347045),
            name: 'printProductTotalPriceAfterDiscount',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 5339456177010078058),
            name: 'printProductTotalPriceIncludeTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 455435715303324636),
            name: 'printOrderClosedUser',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 6878151865938823773),
            name: 'printOrderCreatedUser',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 4915293732966682704),
            name: 'printCheckNumber',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 899878942052679971),
            name: 'hideFreeModifierOptions',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 7192872974404517007),
            name: 'autoPrintOnSave',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 2997406198413992986),
            name: 'printLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 8249557118196503587),
            name: 'printerPaperSize',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(41, 7925354955860296026),
            name: 'printerPaperDirection',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(42, 7976010392973979725),
            name: 'invoiceCategory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(43, 212072726969819175),
            name: 'defaultLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(44, 9007076439591888313),
            name: 'secondLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(45, 2745725056192166616),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(46, 3772731047257563688),
            name: 'users',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(47, 8275035277828547794),
            name: 'defaultCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(48, 3069207142038393683),
            name: 'secondCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(49, 95955095310616579),
            name: 'pointsMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(50, 872545195532039389),
            name: 'fPointsMessage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(51, 490776852860280721),
            name: 'printCustomerPoints',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(61, 4551353772878649511),
      name: 'SalesInvoiceTemplatesA4',
      lastPropertyId: const obx_int.IdUid(11, 8032764107792825559),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2333480935042776550),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6297880244383164726),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(62, 5782538732490991380)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4422889324244516791),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 893351080934959595),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5031777051183038403),
            name: 'menuName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7042646343139405296),
            name: 'fMenuName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6437494953795577666),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4137635709954763614),
            name: 'fTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7815490180078424994),
            name: 'printLanguage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2387675440130103295),
            name: 'invoiceCategory',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8032764107792825559),
            name: 'appsFormPath',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(62, 6722515357439315689),
      name: 'Shift',
      lastPropertyId: const obx_int.IdUid(12, 2829773864321057306),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1577294413681687174),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5005163435741054635),
            name: 'shiftId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1099269173586582165),
            name: 'reference',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 308021622536434384),
            name: 'userId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8417837523149621013),
            name: 'userName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4979658897598136296),
            name: 'branchName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3911471746435216278),
            name: 'clockedInDateAt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4661934080246969022),
            name: 'clockedInTimeAt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 240895988514021225),
            name: 'clockedOutDateAt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6627751757484983846),
            name: 'clockedOutTimeAt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8752248601019991499),
            name: 'isClockedOut',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2829773864321057306),
            name: 'isSync',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(63, 6441730119704921212),
      name: 'Slaps',
      lastPropertyId: const obx_int.IdUid(5, 4639928631642040996),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8366208936657187776),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3326842029306381907),
            name: 'from',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5253196252604231818),
            name: 'to',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4123895955356960271),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4639928631642040996),
            name: 'timeEventId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(64, 4523182737628321768),
      name: 'Table',
      lastPropertyId: const obx_int.IdUid(10, 2345024309584385822),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4380077350378488353),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7115884482484614739),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(63, 1254377092314895238)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 530713189392674794),
            name: 'tableNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3147906691650004366),
            name: 'tableCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4331653114019373316),
            name: 'numberOfIndividuals',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1386118826702457867),
            name: 'minumumReservationPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9201572352247758943),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4660123016160875824),
            name: 'shape',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8672004923976673785),
            name: 'offsetX',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2345024309584385822),
            name: 'offsetY',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(65, 2411972704967997813),
      name: 'TaxC',
      lastPropertyId: const obx_int.IdUid(13, 6543933567827048823),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4182225135071203544),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1759083680666900221),
            name: 'taxName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4149597983832792734),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8014265829306903623),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6844182431140960014),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(64, 3357987520003869914)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7927894247990419275),
            name: 'taxPercentage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2131013593447878993),
            name: 'customerTaxable',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8750084667543531110),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8929848331729210746),
            name: 'taxCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 943931658056584017),
            name: 'taxAccount',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 520417465440545415),
            name: 'isTaxExempt',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2516981866608111550),
            name: 'zeroTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6543933567827048823),
            name: 'exceptCustomers',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(28, 6497064665234733013),
            name: 'periods',
            targetId: const obx_int.IdUid(68, 4116246347569011393))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(66, 5801889733105508330),
      name: 'TaxGroup',
      lastPropertyId: const obx_int.IdUid(5, 7229445393556758351),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6909997488776214016),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3666410025344049534),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(65, 7564683406937125733)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6320885586507998392),
            name: 'types',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5728420755447922514),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7229445393556758351),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(67, 2490696201144285355),
      name: 'TaxInfo',
      lastPropertyId: const obx_int.IdUid(3, 3070420028553976669),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5082944202282549441),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7385901251128081209),
            name: 'taxGroupId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3070420028553976669),
            name: 'value',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(68, 4116246347569011393),
      name: 'TaxPeriod',
      lastPropertyId: const obx_int.IdUid(6, 1770181732491989861),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7136292352870839205),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3843269607758789161),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2378467938379011756),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3322809962518315195),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9070373197662541814),
            name: 'startDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1770181732491989861),
            name: 'endDate',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(69, 8131069236538610814),
      name: 'TaxSetting',
      lastPropertyId: const obx_int.IdUid(5, 5115231873862688341),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2938178235841067895),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4153040880309657707),
            name: 'enableSalesTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4292891008265615444),
            name: 'salesPriceIncludeTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7339025900286594205),
            name: 'enableCustomerSupplierTax',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5115231873862688341),
            name: 'taxRoundFactor',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(70, 2479687652457517246),
      name: 'TenantSetting',
      lastPropertyId: const obx_int.IdUid(41, 6377179909918854379),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7190988729906185795),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8374268525214698718),
            name: 'logoUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7713028131355571547),
            name: 'companyName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5183640885023173940),
            name: 'fCompanyName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7129579797508379887),
            name: 'activity',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2596723976970523617),
            name: 'fActivity',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6166076485032416374),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2318648289203355540),
            name: 'faxNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 76487410663336252),
            name: 'webSite',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7632565486758020778),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4617496623155511706),
            name: 'taxRegistrationName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8468034950065410853),
            name: 'crNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1269392764017710476),
            name: 'taxNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3693754147573861278),
            name: 'zakatRegistrationNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4614028032959890240),
            name: 'municipalLicenseNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 3869767184361840307),
            name: 'gulfCouncilIdentificationNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3645066508378443431),
            name: 'sagiALicenseNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 8802151380508823438),
            name: 'country',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 4221278948715117983),
            name: 'postalCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3468877377173529814),
            name: 'province',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 2014009605171979750),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 7506643672514111937),
            name: 'district',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 350886094233911857),
            name: 'street',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 6880851813868075387),
            name: 'fProvince',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 6348874463999721556),
            name: 'fCity',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 2902224822804058669),
            name: 'fDistrict',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 3970425627316871229),
            name: 'fStreet',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 7852166591020463757),
            name: 'buildingNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 2483081166154606346),
            name: 'floorNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 3422006609989548396),
            name: 'officeNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 7687951323414296802),
            name: 'additionalNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 315828001870038860),
            name: 'invoiceRoundFactor',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 663346399403059793),
            name: 'localCurrencyId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 5758105375045908649),
            name: 'salesPriceCurrencyId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 7985331149353722375),
            name: 'inventoryCostCurrencyId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 2484875947081540676),
            name: 'payrollCurrencyId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 6834227734710516002),
            name: 'inventoryCalculateCostMethod',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 2833962979880544039),
            name: 'stockInventoryType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 5678421766604709895),
            name: 'printLanguage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 3973285815701697775),
            name: 'defaultLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(41, 6377179909918854379),
            name: 'secondLanguage',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(71, 6754713824117830957),
      name: 'ThrowbackInfo',
      lastPropertyId: const obx_int.IdUid(5, 2810990654452404382),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6542997235973638710),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3143075611002634136),
            name: 'productRef',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3512151471271982374),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 481786432113582590),
            name: 'isWaste',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2810990654452404382),
            name: 'ref',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(72, 3217800456771791053),
      name: 'TimeEvent',
      lastPropertyId: const obx_int.IdUid(17, 7098063145550252599),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2914601680489752506),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7485279674800161528),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(66, 3684123412947241842)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4160964529318633584),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 793325137146189383),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5012025830224172346),
            name: 'timeEventType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6727129024430063239),
            name: 'timeEventValue',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9185633634280627481),
            name: 'startDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6427328030712394707),
            name: 'endDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1191099079307238929),
            name: 'startTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3268839780493216101),
            name: 'endTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3284081601308486355),
            name: 'days',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 735715253694626875),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8209382138340784892),
            name: 'products',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8097300468099159626),
            name: 'customers',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8022259261245877831),
            name: 'departments',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 962706417353514191),
            name: 'categories',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 7098063145550252599),
            name: 'priority',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(73, 7021566717734900592),
      name: 'Transaction',
      lastPropertyId: const obx_int.IdUid(7, 2035192399475335080),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 704547066011066972),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7901226395936993123),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 515293111025382314),
            name: 'refId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 21528493677202078),
            name: 'toAcount',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2722248708101558184),
            name: 'amt',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7573271644803014297),
            name: 'createBy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2035192399475335080),
            name: 'date',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(74, 4161930827695234175),
      name: 'Unit',
      lastPropertyId: const obx_int.IdUid(13, 2195879703608002373),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3997701868877943406),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8843522742356070092),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 580509046453821492),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5418168111180272545),
            name: 'fName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 279544726632704028),
            name: 'barcode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8511987826140598905),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7463071980804686727),
            name: 'cost',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3349474183438814262),
            name: 'factor',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4762845598366632800),
            name: 'defaultForSales',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 423265271554504444),
            name: 'defaultForPurchase',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 435845624229037761),
            name: 'defaultForStore',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1379417069845931128),
            name: 'showAlertPreparationTime',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2195879703608002373),
            name: 'priceType',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(29, 1624836463805781672),
            name: 'priceList',
            targetId: const obx_int.IdUid(50, 2484875722998443075)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(30, 9152373810962651039),
            name: 'modifiers',
            targetId: const obx_int.IdUid(75, 317024596804405287))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(75, 317024596804405287),
      name: 'UnitModifer',
      lastPropertyId: const obx_int.IdUid(10, 8452951150075928177),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1783072776834641742),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1420293390924320720),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4576735098035788556),
            name: 'minimumOptions',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2584783571757758488),
            name: 'maximumOptions',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3279677628572164965),
            name: 'isUnique',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3975874824886046413),
            name: 'isRequired',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3326194513783711166),
            name: 'defulatOptions',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6916746966216462232),
            name: 'exceptOptions',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4147731119041109744),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8452951150075928177),
            name: 'fName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(31, 9100000052568182061),
            name: 'freeOptions',
            targetId: const obx_int.IdUid(30, 395527205777665075)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(32, 635890591433436266),
            name: 'options',
            targetId: const obx_int.IdUid(43, 8514080205124919641))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(76, 3365010626880357340),
      name: 'UserCashierSetting',
      lastPropertyId: const obx_int.IdUid(17, 1156730644512864896),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6709404049386297536),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8813457783281684803),
            name: 'shortName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3194056880124458592),
            name: 'fShortName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7559159645609832595),
            name: 'salesInvoiceTemplateId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8919044248110357523),
            name: 'salesInvoiceTemplateA4Id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2814406804515228970),
            name: 'groupId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3190984117619306456),
            name: 'priceListId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3233844412198565554),
            name: 'warehouseId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4188857422947793582),
            name: 'discountPercentageLimit',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4717594604415776906),
            name: 'orderTypes',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3403065712691235392),
            name: 'paymentMethods',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5243791525886205130),
            name: 'restaurantSections',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3592040210866427411),
            name: 'devices',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4503989965738446873),
            name: 'groups',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4716783387303850763),
            name: 'priceLists',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 2705812323203478096),
            name: 'salesInvoiceTemplates',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 1156730644512864896),
            name: 'salesInvoiceTemplatesA4',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(77, 5097629977637169792),
      name: 'ViewSettings',
      lastPropertyId: const obx_int.IdUid(1, 873196564288312703),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 873196564288312703),
            name: 'idSeq',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(78, 2277506909777593783),
      name: 'SendGiftCard',
      lastPropertyId: const obx_int.IdUid(8, 4126026164784121566),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6370735575789692441),
            name: 'idSeq',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 17749142688200805),
            name: 'giftCardId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5384918611965139240),
            name: 'baseAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6836272797093270817),
            name: 'percent',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5611508080575444828),
            name: 'value',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 435031246789707323),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5508217085012687773),
            name: 'deviceCreatedOn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4126026164784121566),
            name: 'deviceCreatedBy',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(78, 2277506909777593783),
      lastIndexId: const obx_int.IdUid(67, 350428259539118090),
      lastRelationId: const obx_int.IdUid(32, 635890591433436266),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [3891698986536151021],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ActivationInfo: obx_int.EntityDefinition<ActivationInfo>(
        model: _entities[0],
        toOneRelations: (ActivationInfo object) => [],
        toManyRelations: (ActivationInfo object) => {
              obx_int.RelInfo<Device>.toOneBacklink(
                      24, object.idSeq!, (Device srcObject) => srcObject.info):
                  object.devices
            },
        getId: (ActivationInfo object) => object.idSeq,
        setId: (ActivationInfo object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ActivationInfo object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final taxRegNameOffset = object.taxRegName == null
              ? null
              : fbb.writeString(object.taxRegName!);
          final fTaxRegNameOffset = object.fTaxRegName == null
              ? null
              : fbb.writeString(object.fTaxRegName!);
          final taxCodeOffset =
              object.taxCode == null ? null : fbb.writeString(object.taxCode!);
          final onlineOrderStartTimeOffset = object.onlineOrderStartTime == null
              ? null
              : fbb.writeString(object.onlineOrderStartTime!);
          final onlineOrderEndTimeOffset = object.onlineOrderEndTime == null
              ? null
              : fbb.writeString(object.onlineOrderEndTime!);
          final branchPrefixOffset = object.branchPrefix == null
              ? null
              : fbb.writeString(object.branchPrefix!);
          final customerServiceOffset = object.customerService == null
              ? null
              : fbb.writeString(object.customerService!);
          final countryIdOffset = object.countryId == null
              ? null
              : fbb.writeString(object.countryId!);
          final cityIdOffset =
              object.cityId == null ? null : fbb.writeString(object.cityId!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final latitudeOffset = object.latitude == null
              ? null
              : fbb.writeString(object.latitude!);
          final longitudeOffset = object.longitude == null
              ? null
              : fbb.writeString(object.longitude!);
          final headerInvoiceMsgOffset = object.headerInvoiceMsg == null
              ? null
              : fbb.writeString(object.headerInvoiceMsg!);
          final footerInvoiceMsgOffset = object.footerInvoiceMsg == null
              ? null
              : fbb.writeString(object.footerInvoiceMsg!);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final currentDeviceIdOffset = object.currentDeviceId == null
              ? null
              : fbb.writeString(object.currentDeviceId!);
          final companyOffset =
              object.company == null ? null : fbb.writeString(object.company!);
          final fCompanyOffset = object.fCompany == null
              ? null
              : fbb.writeString(object.fCompany!);
          final branchOffset =
              object.branch == null ? null : fbb.writeString(object.branch!);
          final fBranchOffset =
              object.fBranch == null ? null : fbb.writeString(object.fBranch!);
          fbb.startTable(29);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, phoneOffset);
          fbb.addOffset(6, mobileOffset);
          fbb.addOffset(7, taxRegNameOffset);
          fbb.addOffset(8, fTaxRegNameOffset);
          fbb.addOffset(9, taxCodeOffset);
          fbb.addOffset(10, onlineOrderStartTimeOffset);
          fbb.addOffset(11, onlineOrderEndTimeOffset);
          fbb.addOffset(12, branchPrefixOffset);
          fbb.addOffset(13, customerServiceOffset);
          fbb.addOffset(14, countryIdOffset);
          fbb.addOffset(15, cityIdOffset);
          fbb.addOffset(16, addressOffset);
          fbb.addOffset(17, latitudeOffset);
          fbb.addOffset(18, longitudeOffset);
          fbb.addOffset(19, headerInvoiceMsgOffset);
          fbb.addOffset(20, footerInvoiceMsgOffset);
          fbb.addOffset(21, codeOffset);
          fbb.addOffset(22, currentDeviceIdOffset);
          fbb.addBool(23, object.receiveOnlineOrders);
          fbb.addOffset(24, companyOffset);
          fbb.addOffset(25, fCompanyOffset);
          fbb.addOffset(26, branchOffset);
          fbb.addOffset(27, fBranchOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final taxRegNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final fTaxRegNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final taxCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final onlineOrderStartTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final onlineOrderEndTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final branchPrefixParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final customerServiceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final countryIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final cityIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final latitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final longitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final headerInvoiceMsgParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 42);
          final footerInvoiceMsgParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final receiveOnlineOrdersParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 50);
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 46);
          final currentDeviceIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 48);
          final companyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 52);
          final fCompanyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 54);
          final branchParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 56);
          final fBranchParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 58);
          final object = ActivationInfo(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              email: emailParam,
              phone: phoneParam,
              mobile: mobileParam,
              taxRegName: taxRegNameParam,
              fTaxRegName: fTaxRegNameParam,
              taxCode: taxCodeParam,
              onlineOrderStartTime: onlineOrderStartTimeParam,
              onlineOrderEndTime: onlineOrderEndTimeParam,
              branchPrefix: branchPrefixParam,
              customerService: customerServiceParam,
              countryId: countryIdParam,
              cityId: cityIdParam,
              address: addressParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              headerInvoiceMsg: headerInvoiceMsgParam,
              footerInvoiceMsg: footerInvoiceMsgParam,
              receiveOnlineOrders: receiveOnlineOrdersParam,
              code: codeParam,
              currentDeviceId: currentDeviceIdParam,
              company: companyParam,
              fCompany: fCompanyParam,
              branch: branchParam,
              fBranch: fBranchParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          obx_int.InternalToManyAccess.setRelInfo<ActivationInfo>(
              object.devices,
              store,
              obx_int.RelInfo<Device>.toOneBacklink(
                  24, object.idSeq!, (Device srcObject) => srcObject.info));
          return object;
        }),
    Address: obx_int.EntityDefinition<Address>(
        model: _entities[1],
        toOneRelations: (Address object) => [],
        toManyRelations: (Address object) => {},
        getId: (Address object) => object.idSeq,
        setId: (Address object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Address object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final addressTypeIdOffset = object.addressTypeId == null
              ? null
              : fbb.writeString(object.addressTypeId!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final deliveryZoneIdOffset = object.deliveryZoneId == null
              ? null
              : fbb.writeString(object.deliveryZoneId!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final mainStreetOffset = object.mainStreet == null
              ? null
              : fbb.writeString(object.mainStreet!);
          final byStreetOffset = object.byStreet == null
              ? null
              : fbb.writeString(object.byStreet!);
          final buildingNoOffset = object.buildingNo == null
              ? null
              : fbb.writeString(object.buildingNo!);
          final floorOffset =
              object.floor == null ? null : fbb.writeString(object.floor!);
          final apartmentNoOffset = object.apartmentNo == null
              ? null
              : fbb.writeString(object.apartmentNo!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final popularPlaceOffset = object.popularPlace == null
              ? null
              : fbb.writeString(object.popularPlace!);
          final zipCodeOffset =
              object.zipCode == null ? null : fbb.writeString(object.zipCode!);
          fbb.startTable(18);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, addressTypeIdOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, fNameOffset);
          fbb.addFloat64(5, object.latitude);
          fbb.addFloat64(6, object.longitude);
          fbb.addOffset(7, deliveryZoneIdOffset);
          fbb.addOffset(8, descriptionOffset);
          fbb.addOffset(9, mainStreetOffset);
          fbb.addOffset(10, byStreetOffset);
          fbb.addOffset(11, buildingNoOffset);
          fbb.addOffset(12, floorOffset);
          fbb.addOffset(13, apartmentNoOffset);
          fbb.addOffset(14, phoneOffset);
          fbb.addOffset(15, popularPlaceOffset);
          fbb.addOffset(16, zipCodeOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final addressTypeIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final latitudeParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final longitudeParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final deliveryZoneIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final mainStreetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final byStreetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final buildingNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final floorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final apartmentNoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final popularPlaceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34);
          final zipCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final object = Address(
              idSeq: idSeqParam,
              id: idParam,
              addressTypeId: addressTypeIdParam,
              name: nameParam,
              fName: fNameParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              deliveryZoneId: deliveryZoneIdParam,
              description: descriptionParam,
              mainStreet: mainStreetParam,
              byStreet: byStreetParam,
              buildingNo: buildingNoParam,
              floor: floorParam,
              apartmentNo: apartmentNoParam,
              phone: phoneParam,
              popularPlace: popularPlaceParam,
              zipCode: zipCodeParam);

          return object;
        }),
    AppliedModifer: obx_int.EntityDefinition<AppliedModifer>(
        model: _entities[2],
        toOneRelations: (AppliedModifer object) => [object.modifier],
        toManyRelations: (AppliedModifer object) => {
              obx_int.RelInfo<AppliedModifer>.toMany(1, object.idSeq!):
                  object.options
            },
        getId: (AppliedModifer object) => object.idSeq,
        setId: (AppliedModifer object, int id) {
          object.idSeq = id;
        },
        objectToFB: (AppliedModifer object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addInt64(1, object.modifier.targetId);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppliedModifer()
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.modifier.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.modifier.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<AppliedModifer>(
              object.options,
              store,
              obx_int.RelInfo<AppliedModifer>.toMany(1, object.idSeq!));
          return object;
        }),
    AppliedOption: obx_int.EntityDefinition<AppliedOption>(
        model: _entities[3],
        toOneRelations: (AppliedOption object) =>
            [object.option, object.taxInfo],
        toManyRelations: (AppliedOption object) => {},
        getId: (AppliedOption object) => object.idSeq,
        setId: (AppliedOption object, int id) {
          object.idSeq = id;
        },
        objectToFB: (AppliedOption object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addFloat64(1, object.quantity);
          fbb.addFloat64(2, object.freeQuantity);
          fbb.addFloat64(3, object.taxableAmt);
          fbb.addBool(4, object.priceWithTax);
          fbb.addInt64(5, object.option.targetId);
          fbb.addInt64(6, object.taxInfo.targetId);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final freeQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final taxableAmtParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = AppliedOption(
              quantity: quantityParam,
              freeQuantity: freeQuantityParam,
              taxableAmt: taxableAmtParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..priceWithTax =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          object.option.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.option.attach(store);
          object.taxInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.taxInfo.attach(store);
          return object;
        }),
    AppliedProduct: obx_int.EntityDefinition<AppliedProduct>(
        model: _entities[4],
        toOneRelations: (AppliedProduct object) => [
              object.product,
              object.unit,
              object.event,
              object.discount,
              object.promotion,
              object.taxInfo,
              object.throwbackInfo
            ],
        toManyRelations: (AppliedProduct object) => {
              obx_int.RelInfo<AppliedProduct>.toMany(2, object.idSeq!):
                  object.appliedModifer
            },
        getId: (AppliedProduct object) => object.idSeq,
        setId: (AppliedProduct object, int id) {
          object.idSeq = id;
        },
        objectToFB: (AppliedProduct object, fb.Builder fbb) {
          final prodRefOffset = fbb.writeString(object.prodRef);
          final msgCanselOffset = object.msgCansel == null
              ? null
              : fbb.writeString(object.msgCansel!);
          final giftCardCodeOffset = object.giftCardCode == null
              ? null
              : fbb.writeString(object.giftCardCode!);
          final noteOffset =
              object.note == null ? null : fbb.writeString(object.note!);
          fbb.startTable(27);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addInt64(1, object.product.targetId);
          fbb.addInt64(2, object.unit.targetId);
          fbb.addFloat64(3, object.quantity);
          fbb.addOffset(4, prodRefOffset);
          fbb.addBool(5, object.priceWithTax);
          fbb.addBool(6, object.isCansel);
          fbb.addOffset(7, msgCanselOffset);
          fbb.addInt64(8, object.priceLevel);
          fbb.addInt64(9, object.event.targetId);
          fbb.addInt64(10, object.discount.targetId);
          fbb.addInt64(11, object.promotion.targetId);
          fbb.addInt64(12, object.taxInfo.targetId);
          fbb.addInt64(13, object.throwbackInfo.targetId);
          fbb.addOffset(14, giftCardCodeOffset);
          fbb.addFloat64(15, object.price);
          fbb.addFloat64(16, object.optionPrice);
          fbb.addFloat64(17, object.priceDiscount);
          fbb.addFloat64(18, object.pricePromotion);
          fbb.addFloat64(19, object.taxPrice);
          fbb.addFloat64(20, object.taxableAmt);
          fbb.addFloat64(21, object.freeQuantity);
          fbb.addBool(22, object.isFixedPrice);
          fbb.addBool(23, object.canEditQty);
          fbb.addFloat64(24, object.barcodePrice);
          fbb.addOffset(25, noteOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final prodRefParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final isCanselParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final msgCanselParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final noteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 54);
          final optionPriceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 36);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 34);
          final priceDiscountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 38);
          final priceLevelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final pricePromotionParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 40);
          final priceWithTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final taxPriceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 42);
          final giftCardCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final freeQuantityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 46);
          final taxableAmtParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 44);
          final canEditQtyParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 50);
          final isFixedPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final barcodePriceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 52);
          final object = AppliedProduct(
              quantity: quantityParam,
              prodRef: prodRefParam,
              isCansel: isCanselParam,
              msgCansel: msgCanselParam,
              note: noteParam,
              optionPrice: optionPriceParam,
              price: priceParam,
              priceDiscount: priceDiscountParam,
              priceLevel: priceLevelParam,
              pricePromotion: pricePromotionParam,
              priceWithTax: priceWithTaxParam,
              taxPrice: taxPriceParam,
              giftCardCode: giftCardCodeParam,
              freeQuantity: freeQuantityParam,
              taxableAmt: taxableAmtParam,
              canEditQty: canEditQtyParam,
              isFixedPrice: isFixedPriceParam,
              barcodePrice: barcodePriceParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.product.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.product.attach(store);
          object.unit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.unit.attach(store);
          object.event.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.event.attach(store);
          object.discount.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.discount.attach(store);
          object.promotion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.promotion.attach(store);
          object.taxInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.taxInfo.attach(store);
          object.throwbackInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.throwbackInfo.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<AppliedProduct>(
              object.appliedModifer,
              store,
              obx_int.RelInfo<AppliedProduct>.toMany(2, object.idSeq!));
          return object;
        }),
    BarcodeScale: obx_int.EntityDefinition<BarcodeScale>(
        model: _entities[5],
        toOneRelations: (BarcodeScale object) => [],
        toManyRelations: (BarcodeScale object) => {},
        getId: (BarcodeScale object) => object.idSeq,
        setId: (BarcodeScale object, int id) {
          object.idSeq = id;
        },
        objectToFB: (BarcodeScale object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final departmentsOffset = object.departments == null
              ? null
              : fbb.writeList(object.departments!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoriesOffset = object.categories == null
              ? null
              : fbb.writeList(object.categories!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final productsOffset = object.products == null
              ? null
              : fbb.writeList(object.products!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(15);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addBool(4, object.scanPriceFromScale);
          fbb.addBool(5, object.scalePriceIncludeTax);
          fbb.addInt64(6, object.scaleBarcodeDigits);
          fbb.addInt64(7, object.scaleProductCodeDigits);
          fbb.addInt64(8, object.scaleIntDigits);
          fbb.addInt64(9, object.scaleDecimalDigits);
          fbb.addBool(10, object.scaleProductCodeFirstInBarcode);
          fbb.addOffset(11, departmentsOffset);
          fbb.addOffset(12, categoriesOffset);
          fbb.addOffset(13, productsOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final scanPriceFromScaleParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12);
          final scalePriceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final scaleBarcodeDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final scaleProductCodeDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final scaleIntDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final scaleDecimalDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final scaleProductCodeFirstInBarcodeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final departmentsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 26);
          final categoriesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 28);
          final productsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 30);
          final object = BarcodeScale(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              scanPriceFromScale: scanPriceFromScaleParam,
              scalePriceIncludeTax: scalePriceIncludeTaxParam,
              scaleBarcodeDigits: scaleBarcodeDigitsParam,
              scaleProductCodeDigits: scaleProductCodeDigitsParam,
              scaleIntDigits: scaleIntDigitsParam,
              scaleDecimalDigits: scaleDecimalDigitsParam,
              scaleProductCodeFirstInBarcode:
                  scaleProductCodeFirstInBarcodeParam,
              departments: departmentsParam,
              categories: categoriesParam,
              products: productsParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    BillCopyHistory: obx_int.EntityDefinition<BillCopyHistory>(
        model: _entities[6],
        toOneRelations: (BillCopyHistory object) => [],
        toManyRelations: (BillCopyHistory object) => {},
        getId: (BillCopyHistory object) => object.id,
        setId: (BillCopyHistory object, int id) {
          object.id = id;
        },
        objectToFB: (BillCopyHistory object, fb.Builder fbb) {
          final billRefOffset =
              object.billRef == null ? null : fbb.writeString(object.billRef!);
          final billNoOffset =
              object.billNo == null ? null : fbb.writeString(object.billNo!);
          final billeDateOffset = object.billeDate == null
              ? null
              : fbb.writeString(object.billeDate!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, billRefOffset);
          fbb.addOffset(2, billNoOffset);
          fbb.addOffset(3, billeDateOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final billRefParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final billeDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final billNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = BillCopyHistory(
              id: idParam,
              billRef: billRefParam,
              billeDate: billeDateParam,
              billNo: billNoParam);

          return object;
        }),
    BillCounter: obx_int.EntityDefinition<BillCounter>(
        model: _entities[7],
        toOneRelations: (BillCounter object) => [],
        toManyRelations: (BillCounter object) => {
              obx_int.RelInfo<BillCounter>.toMany(3, object.id!):
                  object.billCopyHistory
            },
        getId: (BillCounter object) => object.id,
        setId: (BillCounter object, int id) {
          object.id = id;
        },
        objectToFB: (BillCounter object, fb.Builder fbb) {
          final dateTimeOpenOnOffset = object.dateTimeOpenOn == null
              ? null
              : fbb.writeString(object.dateTimeOpenOn!);
          final dateTimeCloseOnOffset = object.dateTimeCloseOn == null
              ? null
              : fbb.writeString(object.dateTimeCloseOn!);
          final billPerfexOffset = object.billPerfex == null
              ? null
              : fbb.writeString(object.billPerfex!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, dateTimeOpenOnOffset);
          fbb.addOffset(2, dateTimeCloseOnOffset);
          fbb.addBool(3, object.isClosed);
          fbb.addInt64(4, object.curentCounter);
          fbb.addOffset(5, billPerfexOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final dateTimeOpenOnParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6);
          final dateTimeCloseOnParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final isClosedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final curentCounterParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final billPerfexParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = BillCounter(
              id: idParam,
              dateTimeOpenOn: dateTimeOpenOnParam,
              dateTimeCloseOn: dateTimeCloseOnParam,
              isClosed: isClosedParam,
              curentCounter: curentCounterParam,
              billPerfex: billPerfexParam);
          obx_int.InternalToManyAccess.setRelInfo<BillCounter>(
              object.billCopyHistory,
              store,
              obx_int.RelInfo<BillCounter>.toMany(3, object.id!));
          return object;
        }),
    BillSetting: obx_int.EntityDefinition<BillSetting>(
        model: _entities[8],
        toOneRelations: (BillSetting object) => [object.logoData],
        toManyRelations: (BillSetting object) => {},
        getId: (BillSetting object) => object.id,
        setId: (BillSetting object, int id) {
          object.id = id;
        },
        objectToFB: (BillSetting object, fb.Builder fbb) {
          final logoUrlOffset =
              object.logoUrl == null ? null : fbb.writeString(object.logoUrl!);
          final companyNameOffset = object.companyName == null
              ? null
              : fbb.writeString(object.companyName!);
          final fCompanyNameOffset = object.fCompanyName == null
              ? null
              : fbb.writeString(object.fCompanyName!);
          final taxNoOffset =
              object.taxNo == null ? null : fbb.writeString(object.taxNo!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final fAddressOffset = object.fAddress == null
              ? null
              : fbb.writeString(object.fAddress!);
          final headerInvoiceMessageOffset = object.headerInvoiceMessage == null
              ? null
              : fbb.writeString(object.headerInvoiceMessage!);
          final fHeaderInvoiceMessageOffset =
              object.fHeaderInvoiceMessage == null
                  ? null
                  : fbb.writeString(object.fHeaderInvoiceMessage!);
          final footerInvoiceMessageOffset = object.footerInvoiceMessage == null
              ? null
              : fbb.writeString(object.footerInvoiceMessage!);
          final fFooterInvoiceMessageOffset =
              object.fFooterInvoiceMessage == null
                  ? null
                  : fbb.writeString(object.fFooterInvoiceMessage!);
          final invoiceTemplateOffset = object.invoiceTemplate == null
              ? null
              : fbb.writeString(object.invoiceTemplate!);
          final refundTemplateOffset = object.refundTemplate == null
              ? null
              : fbb.writeString(object.refundTemplate!);
          final printlanguageOffset = object.printlanguage == null
              ? null
              : fbb.writeString(object.printlanguage!);
          final defaultLanguageOffset = object.defaultLanguage == null
              ? null
              : fbb.writeString(object.defaultLanguage!);
          final secondLanguageOffset = object.secondLanguage == null
              ? null
              : fbb.writeString(object.secondLanguage!);
          final invoiceTitleOffset = object.invoiceTitle == null
              ? null
              : fbb.writeString(object.invoiceTitle!);
          final fInvoiceTitleOffset = object.fInvoiceTitle == null
              ? null
              : fbb.writeString(object.fInvoiceTitle!);
          fbb.startTable(42);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, logoUrlOffset);
          fbb.addOffset(2, companyNameOffset);
          fbb.addOffset(3, fCompanyNameOffset);
          fbb.addOffset(4, taxNoOffset);
          fbb.addOffset(5, phoneNumberOffset);
          fbb.addOffset(6, addressOffset);
          fbb.addOffset(7, fAddressOffset);
          fbb.addOffset(8, headerInvoiceMessageOffset);
          fbb.addOffset(9, fHeaderInvoiceMessageOffset);
          fbb.addOffset(10, footerInvoiceMessageOffset);
          fbb.addOffset(11, fFooterInvoiceMessageOffset);
          fbb.addInt64(12, object.invoiceRoundFactor);
          fbb.addBool(13, object.enablePrintBundleProductChildren);
          fbb.addBool(14, object.printOrderNumber);
          fbb.addBool(15, object.printCalories);
          fbb.addBool(16, object.printSubTotal);
          fbb.addBool(17, object.printRoundDigit);
          fbb.addBool(18, object.printProductUnit);
          fbb.addBool(19, object.printProductUnitPrice);
          fbb.addBool(20, object.printProductTotalPrice);
          fbb.addBool(21, object.printProductDiscountPrice);
          fbb.addBool(22, object.printProductFreeQuantity);
          fbb.addBool(23, object.printProductTotalPriceBeforeTax);
          fbb.addBool(24, object.printProductTaxAmount);
          fbb.addBool(25, object.printProductTaxPercentage);
          fbb.addBool(26, object.printProductTotalPriceAfterDiscount);
          fbb.addBool(27, object.printProductTotalPriceIncludeTax);
          fbb.addBool(28, object.printOrderClosedUser);
          fbb.addBool(29, object.printOrderCreatedUser);
          fbb.addBool(30, object.printCheckNumber);
          fbb.addBool(31, object.hideFreeModifierOptions);
          fbb.addOffset(32, invoiceTemplateOffset);
          fbb.addOffset(33, refundTemplateOffset);
          fbb.addBool(34, object.autoPrintOnSave);
          fbb.addOffset(35, printlanguageOffset);
          fbb.addOffset(36, defaultLanguageOffset);
          fbb.addOffset(37, secondLanguageOffset);
          fbb.addOffset(38, invoiceTitleOffset);
          fbb.addOffset(39, fInvoiceTitleOffset);
          fbb.addInt64(40, object.logoData.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final logoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final companyNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final fCompanyNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final taxNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final phoneNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final fAddressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final headerInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final fHeaderInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final footerInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final fFooterInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final invoiceRoundFactorParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final enablePrintBundleProductChildrenParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30);
          final printOrderNumberParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final printCaloriesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final printSubTotalParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final printRoundDigitParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final printProductUnitParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final printProductUnitPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final printProductTotalPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44);
          final printProductDiscountPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 46);
          final printProductFreeQuantityParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final printProductTotalPriceBeforeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 50);
          final printProductTaxAmountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 52);
          final printProductTaxPercentageParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 54);
          final printProductTotalPriceAfterDiscountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 56);
          final printProductTotalPriceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 58);
          final printOrderClosedUserParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 60);
          final printOrderCreatedUserParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 62);
          final printCheckNumberParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 64);
          final hideFreeModifierOptionsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 66);
          final invoiceTemplateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 68);
          final refundTemplateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 70);
          final autoPrintOnSaveParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 72);
          final printlanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 74);
          final defaultLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 76);
          final secondLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 78);
          final invoiceTitleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 80);
          final fInvoiceTitleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 82);
          final object = BillSetting(
              id: idParam,
              logoUrl: logoUrlParam,
              companyName: companyNameParam,
              fCompanyName: fCompanyNameParam,
              taxNo: taxNoParam,
              phoneNumber: phoneNumberParam,
              address: addressParam,
              fAddress: fAddressParam,
              headerInvoiceMessage: headerInvoiceMessageParam,
              fHeaderInvoiceMessage: fHeaderInvoiceMessageParam,
              footerInvoiceMessage: footerInvoiceMessageParam,
              fFooterInvoiceMessage: fFooterInvoiceMessageParam,
              invoiceRoundFactor: invoiceRoundFactorParam,
              enablePrintBundleProductChildren:
                  enablePrintBundleProductChildrenParam,
              printOrderNumber: printOrderNumberParam,
              printCalories: printCaloriesParam,
              printSubTotal: printSubTotalParam,
              printRoundDigit: printRoundDigitParam,
              printProductUnit: printProductUnitParam,
              printProductUnitPrice: printProductUnitPriceParam,
              printProductTotalPrice: printProductTotalPriceParam,
              printProductDiscountPrice: printProductDiscountPriceParam,
              printProductFreeQuantity: printProductFreeQuantityParam,
              printProductTotalPriceBeforeTax:
                  printProductTotalPriceBeforeTaxParam,
              printProductTaxAmount: printProductTaxAmountParam,
              printProductTaxPercentage: printProductTaxPercentageParam,
              printProductTotalPriceAfterDiscount:
                  printProductTotalPriceAfterDiscountParam,
              printProductTotalPriceIncludeTax:
                  printProductTotalPriceIncludeTaxParam,
              printOrderClosedUser: printOrderClosedUserParam,
              printOrderCreatedUser: printOrderCreatedUserParam,
              printCheckNumber: printCheckNumberParam,
              hideFreeModifierOptions: hideFreeModifierOptionsParam,
              invoiceTemplate: invoiceTemplateParam,
              refundTemplate: refundTemplateParam,
              autoPrintOnSave: autoPrintOnSaveParam,
              printlanguage: printlanguageParam,
              defaultLanguage: defaultLanguageParam,
              secondLanguage: secondLanguageParam,
              invoiceTitle: invoiceTitleParam,
              fInvoiceTitle: fInvoiceTitleParam);
          object.logoData.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 84, 0);
          object.logoData.attach(store);
          return object;
        }),
    Branch: obx_int.EntityDefinition<Branch>(
        model: _entities[9],
        toOneRelations: (Branch object) => [],
        toManyRelations: (Branch object) => {},
        getId: (Branch object) => object.idSeq,
        setId: (Branch object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Branch object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final taxRegNameOffset = object.taxRegName == null
              ? null
              : fbb.writeString(object.taxRegName!);
          final taxCodeOffset =
              object.taxCode == null ? null : fbb.writeString(object.taxCode!);
          final onlineOrderStartTimeOffset = object.onlineOrderStartTime == null
              ? null
              : fbb.writeString(object.onlineOrderStartTime!);
          final onlineOrderEndTimeOffset = object.onlineOrderEndTime == null
              ? null
              : fbb.writeString(object.onlineOrderEndTime!);
          final branchPrefixOffset = object.branchPrefix == null
              ? null
              : fbb.writeString(object.branchPrefix!);
          final customerServiceOffset = object.customerService == null
              ? null
              : fbb.writeString(object.customerService!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final headerInvoiceMsgOffset = object.headerInvoiceMsg == null
              ? null
              : fbb.writeString(object.headerInvoiceMsg!);
          final footerInvoiceMsgOffset = object.footerInvoiceMsg == null
              ? null
              : fbb.writeString(object.footerInvoiceMsg!);
          fbb.startTable(18);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, phoneOffset);
          fbb.addOffset(6, mobileOffset);
          fbb.addOffset(7, taxRegNameOffset);
          fbb.addOffset(8, taxCodeOffset);
          fbb.addOffset(9, onlineOrderStartTimeOffset);
          fbb.addOffset(10, onlineOrderEndTimeOffset);
          fbb.addOffset(11, branchPrefixOffset);
          fbb.addOffset(12, customerServiceOffset);
          fbb.addOffset(13, addressOffset);
          fbb.addOffset(14, headerInvoiceMsgOffset);
          fbb.addOffset(15, footerInvoiceMsgOffset);
          fbb.addBool(16, object.receiveOnlineOrders);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final taxRegNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final taxCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final onlineOrderStartTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final onlineOrderEndTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final branchPrefixParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final customerServiceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final headerInvoiceMsgParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final footerInvoiceMsgParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final receiveOnlineOrdersParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final object = Branch(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              email: emailParam,
              phone: phoneParam,
              mobile: mobileParam,
              taxRegName: taxRegNameParam,
              taxCode: taxCodeParam,
              onlineOrderStartTime: onlineOrderStartTimeParam,
              onlineOrderEndTime: onlineOrderEndTimeParam,
              branchPrefix: branchPrefixParam,
              customerService: customerServiceParam,
              address: addressParam,
              headerInvoiceMsg: headerInvoiceMsgParam,
              footerInvoiceMsg: footerInvoiceMsgParam,
              fName: fNameParam,
              receiveOnlineOrders: receiveOnlineOrdersParam);

          return object;
        }),
    CashierSetting: obx_int.EntityDefinition<CashierSetting>(
        model: _entities[10],
        toOneRelations: (CashierSetting object) => [],
        toManyRelations: (CashierSetting object) => {},
        getId: (CashierSetting object) => object.idSeq,
        setId: (CashierSetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (CashierSetting object, fb.Builder fbb) {
          final defaultCustomerIdOffset = object.defaultCustomerId == null
              ? null
              : fbb.writeString(object.defaultCustomerId!);
          final priceListIdOffset = object.priceListId == null
              ? null
              : fbb.writeString(object.priceListId!);
          final roundingTypeOffset = object.roundingType == null
              ? null
              : fbb.writeString(object.roundingType!);
          final kitchenSortingTypeOffset = object.kitchenSortingType == null
              ? null
              : fbb.writeString(object.kitchenSortingType!);
          final printSortingTypeOffset = object.printSortingType == null
              ? null
              : fbb.writeString(object.printSortingType!);
          final imeiOffset =
              object.imei == null ? null : fbb.writeString(object.imei!);
          fbb.startTable(35);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addBool(1, object.enableCashSales);
          fbb.addBool(2, object.enableCreditCardSales);
          fbb.addBool(3, object.enableCustomerSales);
          fbb.addBool(4, object.enableFreeQuantity);
          fbb.addBool(5, object.enableEditItemName);
          fbb.addBool(6, object.enableSalesDiscount);
          fbb.addBool(7, object.enableChangePrice);
          fbb.addBool(8, object.enableProductPackages);
          fbb.addBool(9, object.enableTablesSystem);
          fbb.addBool(10, object.tableGuestCountRequired);
          fbb.addBool(11, object.tableRequired);
          fbb.addFloat64(12, object.discountPercentageLimit);
          fbb.addOffset(13, defaultCustomerIdOffset);
          fbb.addOffset(14, priceListIdOffset);
          fbb.addBool(15, object.daily);
          fbb.addBool(16, object.submittingRequestsDelayMinutes);
          fbb.addBool(17, object.inactiveUsersLogoutMinutes);
          fbb.addBool(18, object.maximumReturnPeriodMinutes);
          fbb.addBool(19, object.requireOrderTypesForOrders);
          fbb.addOffset(20, roundingTypeOffset);
          fbb.addFloat64(21, object.roundDigits);
          fbb.addOffset(22, kitchenSortingTypeOffset);
          fbb.addOffset(23, printSortingTypeOffset);
          fbb.addBool(24, object.activeTips);
          fbb.addBool(25, object.discountRequireCustomerInfo);
          fbb.addBool(26, object.returnRequireCustomerInfo);
          fbb.addBool(27, object.requireCancelReason);
          fbb.addBool(28, object.autoSentOrderToKitchenAfterPaid);
          fbb.addBool(29, object.autoSyncDataAtStartOfDay);
          fbb.addBool(30, object.autoPrintProductsReport);
          fbb.addBool(31, object.autoPrintTillsReport);
          fbb.addBool(32, object.preventEndingDayBeforeInventoryCount);
          fbb.addOffset(33, imeiOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final enableCashSalesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final enableCreditCardSalesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8);
          final enableCustomerSalesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final enableFreeQuantityParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12);
          final enableEditItemNameParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final enableSalesDiscountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final enableChangePriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final enableProductPackagesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final enableTablesSystemParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final tableGuestCountRequiredParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final tableRequiredParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final discountPercentageLimitParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 28);
          final defaultCustomerIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final priceListIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final dailyParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final submittingRequestsDelayMinutesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final inactiveUsersLogoutMinutesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final maximumReturnPeriodMinutesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final requireOrderTypesForOrdersParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final roundingTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final roundDigitsParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 46);
          final kitchenSortingTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 48);
          final printSortingTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 50);
          final activeTipsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 52);
          final discountRequireCustomerInfoParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 54);
          final returnRequireCustomerInfoParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 56);
          final requireCancelReasonParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 58);
          final autoSentOrderToKitchenAfterPaidParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 60);
          final autoSyncDataAtStartOfDayParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 62);
          final autoPrintProductsReportParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 64);
          final autoPrintTillsReportParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 66);
          final preventEndingDayBeforeInventoryCountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 68);
          final imeiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 70);
          final object = CashierSetting(
              enableCashSales: enableCashSalesParam,
              enableCreditCardSales: enableCreditCardSalesParam,
              enableCustomerSales: enableCustomerSalesParam,
              enableFreeQuantity: enableFreeQuantityParam,
              enableEditItemName: enableEditItemNameParam,
              enableSalesDiscount: enableSalesDiscountParam,
              enableChangePrice: enableChangePriceParam,
              enableProductPackages: enableProductPackagesParam,
              enableTablesSystem: enableTablesSystemParam,
              tableGuestCountRequired: tableGuestCountRequiredParam,
              tableRequired: tableRequiredParam,
              discountPercentageLimit: discountPercentageLimitParam,
              defaultCustomerId: defaultCustomerIdParam,
              priceListId: priceListIdParam,
              daily: dailyParam,
              submittingRequestsDelayMinutes:
                  submittingRequestsDelayMinutesParam,
              inactiveUsersLogoutMinutes: inactiveUsersLogoutMinutesParam,
              maximumReturnPeriodMinutes: maximumReturnPeriodMinutesParam,
              requireOrderTypesForOrders: requireOrderTypesForOrdersParam,
              roundingType: roundingTypeParam,
              roundDigits: roundDigitsParam,
              kitchenSortingType: kitchenSortingTypeParam,
              printSortingType: printSortingTypeParam,
              activeTips: activeTipsParam,
              discountRequireCustomerInfo: discountRequireCustomerInfoParam,
              returnRequireCustomerInfo: returnRequireCustomerInfoParam,
              requireCancelReason: requireCancelReasonParam,
              autoSentOrderToKitchenAfterPaid:
                  autoSentOrderToKitchenAfterPaidParam,
              autoSyncDataAtStartOfDay: autoSyncDataAtStartOfDayParam,
              autoPrintProductsReport: autoPrintProductsReportParam,
              autoPrintTillsReport: autoPrintTillsReportParam,
              preventEndingDayBeforeInventoryCount:
                  preventEndingDayBeforeInventoryCountParam,
              imei: imeiParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[11],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.idSeq,
        setId: (Category object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addInt64(4, object.displayOrder);
          fbb.addOffset(5, imageUrlOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final displayOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = Category(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              displayOrder: displayOrderParam,
              imageUrl: imageUrlParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Claims: obx_int.EntityDefinition<Claims>(
        model: _entities[12],
        toOneRelations: (Claims object) => [],
        toManyRelations: (Claims object) => {},
        getId: (Claims object) => object.idSeq,
        setId: (Claims object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Claims object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Claims(id: idParam, name: nameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Coupon: obx_int.EntityDefinition<Coupon>(
        model: _entities[13],
        toOneRelations: (Coupon object) => [],
        toManyRelations: (Coupon object) => {},
        getId: (Coupon object) => object.idSeq,
        setId: (Coupon object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Coupon object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final couponCodeOffset = object.couponCode == null
              ? null
              : fbb.writeString(object.couponCode!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final startTimeOffset = object.startTime == null
              ? null
              : fbb.writeString(object.startTime!);
          final endTimeOffset =
              object.endTime == null ? null : fbb.writeString(object.endTime!);
          final discountIdOffset = object.discountId == null
              ? null
              : fbb.writeString(object.discountId!);
          final daysOffset =
              object.days == null ? null : fbb.writeListInt64(object.days!);
          fbb.startTable(15);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, couponCodeOffset);
          fbb.addInt64(3, object.useCountForAll);
          fbb.addInt64(4, object.useCountForOne);
          fbb.addInt64(5, object.maximumUses);
          fbb.addOffset(6, startDateOffset);
          fbb.addOffset(7, endDateOffset);
          fbb.addOffset(8, startTimeOffset);
          fbb.addOffset(9, endTimeOffset);
          fbb.addOffset(10, discountIdOffset);
          fbb.addOffset(11, daysOffset);
          fbb.addInt64(12, object.couponLevel);
          fbb.addInt64(13, object.numberOFProducts);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final couponCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final useCountForAllParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final useCountForOneParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final maximumUsesParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final startTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final endTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final discountIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final daysParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final object = Coupon(
              id: idParam,
              couponCode: couponCodeParam,
              useCountForAll: useCountForAllParam,
              useCountForOne: useCountForOneParam,
              maximumUses: maximumUsesParam,
              startDate: startDateParam,
              endDate: endDateParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              discountId: discountIdParam,
              days: daysParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..couponLevel =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28)
            ..numberOFProducts =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);

          return object;
        }),
    Currencies: obx_int.EntityDefinition<Currencies>(
        model: _entities[14],
        toOneRelations: (Currencies object) => [],
        toManyRelations: (Currencies object) => {},
        getId: (Currencies object) => object.idSeq,
        setId: (Currencies object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Currencies object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final currencyCodeOffset = object.currencyCode == null
              ? null
              : fbb.writeString(object.currencyCode!);
          final displayLocaleOffset = object.displayLocale == null
              ? null
              : fbb.writeString(object.displayLocale!);
          final customFormattingOffset = object.customFormatting == null
              ? null
              : fbb.writeString(object.customFormatting!);
          final densOffset =
              object.dens == null ? null : fbb.writeListInt64(object.dens!);
          fbb.startTable(13);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, currencyCodeOffset);
          fbb.addOffset(5, displayLocaleOffset);
          fbb.addBool(6, object.isDefault);
          fbb.addOffset(7, customFormattingOffset);
          fbb.addFloat64(8, object.exchangeRate);
          fbb.addFloat64(9, object.minExchangeRate);
          fbb.addFloat64(10, object.maxExchangeRate);
          fbb.addOffset(11, densOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final currencyCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final displayLocaleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final isDefaultParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final customFormattingParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final exchangeRateParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 20);
          final minExchangeRateParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final maxExchangeRateParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final densParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final object = Currencies(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              currencyCode: currencyCodeParam,
              displayLocale: displayLocaleParam,
              isDefault: isDefaultParam,
              customFormatting: customFormattingParam,
              exchangeRate: exchangeRateParam,
              minExchangeRate: minExchangeRateParam,
              maxExchangeRate: maxExchangeRateParam,
              dens: densParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Customer: obx_int.EntityDefinition<Customer>(
        model: _entities[15],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {
              obx_int.RelInfo<Customer>.toMany(4, object.idSeq!):
                  object.addersses,
              obx_int.RelInfo<Customer>.toMany(5, object.idSeq!):
                  object.houseAccountTranscations
            },
        getId: (Customer object) => object.idSeq,
        setId: (Customer object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final paymentMethodIdOffset = object.paymentMethodId == null
              ? null
              : fbb.writeString(object.paymentMethodId!);
          final currencyIdOffset = object.currencyId == null
              ? null
              : fbb.writeString(object.currencyId!);
          final taxNumberOffset = object.taxNumber == null
              ? null
              : fbb.writeString(object.taxNumber!);
          final taxRegisterationNameOffset = object.taxRegisterationName == null
              ? null
              : fbb.writeString(object.taxRegisterationName!);
          final blackListNoteOffset = object.blackListNote == null
              ? null
              : fbb.writeString(object.blackListNote!);
          final priceListIdOffset = object.priceListId == null
              ? null
              : fbb.writeString(object.priceListId!);
          fbb.startTable(18);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, mobileOffset);
          fbb.addOffset(5, emailOffset);
          fbb.addFloat64(6, object.debitLimit);
          fbb.addFloat64(7, object.balance);
          fbb.addOffset(8, paymentMethodIdOffset);
          fbb.addOffset(9, currencyIdOffset);
          fbb.addOffset(10, taxNumberOffset);
          fbb.addOffset(11, taxRegisterationNameOffset);
          fbb.addBool(12, object.inBlackList);
          fbb.addOffset(13, blackListNoteOffset);
          fbb.addOffset(14, priceListIdOffset);
          fbb.addBool(15, object.enableHouseAccount);
          fbb.addBool(16, object.taxable);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final debitLimitParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final balanceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final paymentMethodIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final currencyIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final taxNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final taxRegisterationNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final inBlackListParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);
          final blackListNoteParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final priceListIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final taxableParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final object = Customer(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              mobile: mobileParam,
              email: emailParam,
              debitLimit: debitLimitParam,
              balance: balanceParam,
              paymentMethodId: paymentMethodIdParam,
              currencyId: currencyIdParam,
              taxNumber: taxNumberParam,
              taxRegisterationName: taxRegisterationNameParam,
              inBlackList: inBlackListParam,
              blackListNote: blackListNoteParam,
              priceListId: priceListIdParam,
              taxable: taxableParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..enableHouseAccount =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          obx_int.InternalToManyAccess.setRelInfo<Customer>(object.addersses,
              store, obx_int.RelInfo<Customer>.toMany(4, object.idSeq!));
          obx_int.InternalToManyAccess.setRelInfo<Customer>(
              object.houseAccountTranscations,
              store,
              obx_int.RelInfo<Customer>.toMany(5, object.idSeq!));
          return object;
        }),
    DeliveryCompany: obx_int.EntityDefinition<DeliveryCompany>(
        model: _entities[16],
        toOneRelations: (DeliveryCompany object) => [],
        toManyRelations: (DeliveryCompany object) => {},
        getId: (DeliveryCompany object) => object.idSeq,
        setId: (DeliveryCompany object, int id) {
          object.idSeq = id;
        },
        objectToFB: (DeliveryCompany object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final countryIdOffset = object.countryId == null
              ? null
              : fbb.writeString(object.countryId!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          fbb.startTable(10);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, mobileOffset);
          fbb.addOffset(5, emailOffset);
          fbb.addOffset(6, countryIdOffset);
          fbb.addOffset(7, imageUrlOffset);
          fbb.addFloat64(8, object.commissionRate);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final countryIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final commissionRateParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = DeliveryCompany(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              mobile: mobileParam,
              email: emailParam,
              countryId: countryIdParam,
              imageUrl: imageUrlParam,
              commissionRate: commissionRateParam);

          return object;
        }),
    DeliveryCompanyInfo: obx_int.EntityDefinition<DeliveryCompanyInfo>(
        model: _entities[17],
        toOneRelations: (DeliveryCompanyInfo object) => [object.company],
        toManyRelations: (DeliveryCompanyInfo object) => {},
        getId: (DeliveryCompanyInfo object) => object.idSeq,
        setId: (DeliveryCompanyInfo object, int id) {
          object.idSeq = id;
        },
        objectToFB: (DeliveryCompanyInfo object, fb.Builder fbb) {
          final orderNumberOffset = fbb.writeString(object.orderNumber);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addInt64(1, object.company.targetId);
          fbb.addOffset(2, orderNumberOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final orderNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = DeliveryCompanyInfo(orderNumber: orderNumberParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.company.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.company.attach(store);
          return object;
        }),
    DeliveryZone: obx_int.EntityDefinition<DeliveryZone>(
        model: _entities[18],
        toOneRelations: (DeliveryZone object) => [],
        toManyRelations: (DeliveryZone object) => {},
        getId: (DeliveryZone object) => object.idSeq,
        setId: (DeliveryZone object, int id) {
          object.idSeq = id;
        },
        objectToFB: (DeliveryZone object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final deliveryZoneCoordinateOffset =
              object.deliveryZoneCoordinate == null
                  ? null
                  : fbb.writeString(object.deliveryZoneCoordinate!);
          fbb.startTable(8);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, deliveryZoneCoordinateOffset);
          fbb.addFloat64(5, object.minimumDeliveryCharge);
          fbb.addFloat64(6, object.deliveryChargePerKM);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final deliveryZoneCoordinateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final minimumDeliveryChargeParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final deliveryChargePerKMParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = DeliveryZone(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              deliveryZoneCoordinate: deliveryZoneCoordinateParam,
              minimumDeliveryCharge: minimumDeliveryChargeParam,
              deliveryChargePerKM: deliveryChargePerKMParam);

          return object;
        }),
    Department1: obx_int.EntityDefinition<Department1>(
        model: _entities[19],
        toOneRelations: (Department1 object) => [],
        toManyRelations: (Department1 object) => {
              obx_int.RelInfo<Department1>.toMany(6, object.idSeq!):
                  object.categories
            },
        getId: (Department1 object) => object.idSeq,
        setId: (Department1 object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Department1 object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addInt64(4, object.displayOrder);
          fbb.addOffset(5, imageUrlOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final displayOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = Department1(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              displayOrder: displayOrderParam,
              imageUrl: imageUrlParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          obx_int.InternalToManyAccess.setRelInfo<Department1>(
              object.categories,
              store,
              obx_int.RelInfo<Department1>.toMany(6, object.idSeq!));
          return object;
        }),
    Device: obx_int.EntityDefinition<Device>(
        model: _entities[20],
        toOneRelations: (Device object) => [object.info, object.setting],
        toManyRelations: (Device object) => {},
        getId: (Device object) => object.id,
        setId: (Device object, int id) {
          object.id = id;
        },
        objectToFB: (Device object, fb.Builder fbb) {
          final deviceIdOffset = object.deviceId == null
              ? null
              : fbb.writeString(object.deviceId!);
          final deviceTypeIdOffset = object.deviceTypeId == null
              ? null
              : fbb.writeString(object.deviceTypeId!);
          final deviceModelIdOffset = object.deviceModelId == null
              ? null
              : fbb.writeString(object.deviceModelId!);
          final referenceOffset = object.reference == null
              ? null
              : fbb.writeString(object.reference!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final modelOffset =
              object.model == null ? null : fbb.writeString(object.model!);
          final systemVersionOffset = object.systemVersion == null
              ? null
              : fbb.writeString(object.systemVersion!);
          final appVersionOffset = object.appVersion == null
              ? null
              : fbb.writeString(object.appVersion!);
          final buildOffset =
              object.build == null ? null : fbb.writeString(object.build!);
          final latitudeOffset = object.latitude == null
              ? null
              : fbb.writeString(object.latitude!);
          final longitudeOffset = object.longitude == null
              ? null
              : fbb.writeString(object.longitude!);
          final connectionIPAddressOffset = object.connectionIPAddress == null
              ? null
              : fbb.writeString(object.connectionIPAddress!);
          final imeiOffset =
              object.imei == null ? null : fbb.writeString(object.imei!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final refrencePrefixOffset = object.refrencePrefix == null
              ? null
              : fbb.writeString(object.refrencePrefix!);
          final ipOffset =
              object.ip == null ? null : fbb.writeString(object.ip!);
          final productsOffset = object.products == null
              ? null
              : fbb.writeList(object.products!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoriesOffset = object.categories == null
              ? null
              : fbb.writeList(object.categories!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final departmentsOffset = object.departments == null
              ? null
              : fbb.writeList(object.departments!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final usersOffset = object.users == null
              ? null
              : fbb.writeList(
                  object.users!.map(fbb.writeString).toList(growable: false));
          final resturnatSectionsOffset = object.resturnatSections == null
              ? null
              : fbb.writeList(object.resturnatSections!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(31);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, deviceIdOffset);
          fbb.addOffset(2, deviceTypeIdOffset);
          fbb.addOffset(3, deviceModelIdOffset);
          fbb.addInt64(4, object.deviceTypeCode);
          fbb.addInt64(5, object.masterDeviceNo);
          fbb.addOffset(6, referenceOffset);
          fbb.addOffset(7, nameOffset);
          fbb.addOffset(8, fNameOffset);
          fbb.addBool(9, object.enableOnlineOrderReceiver);
          fbb.addOffset(10, modelOffset);
          fbb.addOffset(11, systemVersionOffset);
          fbb.addOffset(12, appVersionOffset);
          fbb.addOffset(13, buildOffset);
          fbb.addOffset(14, latitudeOffset);
          fbb.addOffset(15, longitudeOffset);
          fbb.addOffset(16, connectionIPAddressOffset);
          fbb.addInt64(17, object.connectionPort);
          fbb.addInt64(18, object.connectionType);
          fbb.addOffset(19, imeiOffset);
          fbb.addOffset(20, orderTypesOffset);
          fbb.addOffset(21, refrencePrefixOffset);
          fbb.addOffset(22, ipOffset);
          fbb.addInt64(23, object.info.targetId);
          fbb.addInt64(24, object.setting.targetId);
          fbb.addOffset(25, productsOffset);
          fbb.addOffset(26, categoriesOffset);
          fbb.addOffset(27, departmentsOffset);
          fbb.addOffset(28, usersOffset);
          fbb.addOffset(29, resturnatSectionsOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final deviceIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final deviceTypeIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final deviceModelIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final masterDeviceNoParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final referenceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final enableOnlineOrderReceiverParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final modelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final systemVersionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final appVersionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final buildParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final latitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final longitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final connectionIPAddressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final connectionPortParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 38);
          final connectionTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final imeiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final deviceTypeCodeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final refrencePrefixParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 46);
          final categoriesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 56);
          final departmentsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 58);
          final productsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 54);
          final resturnatSectionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 62);
          final usersParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 60);
          final object = Device(
              id: idParam,
              deviceId: deviceIdParam,
              deviceTypeId: deviceTypeIdParam,
              deviceModelId: deviceModelIdParam,
              masterDeviceNo: masterDeviceNoParam,
              reference: referenceParam,
              name: nameParam,
              fName: fNameParam,
              enableOnlineOrderReceiver: enableOnlineOrderReceiverParam,
              model: modelParam,
              systemVersion: systemVersionParam,
              appVersion: appVersionParam,
              build: buildParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              connectionIPAddress: connectionIPAddressParam,
              connectionPort: connectionPortParam,
              connectionType: connectionTypeParam,
              orderTypes: orderTypesParam,
              imei: imeiParam,
              deviceTypeCode: deviceTypeCodeParam,
              refrencePrefix: refrencePrefixParam,
              categories: categoriesParam,
              departments: departmentsParam,
              products: productsParam,
              resturnatSections: resturnatSectionsParam,
              users: usersParam)
            ..ip = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 48);
          object.info.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          object.info.attach(store);
          object.setting.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          object.setting.attach(store);
          return object;
        }),
    DeviceSetting: obx_int.EntityDefinition<DeviceSetting>(
        model: _entities[21],
        toOneRelations: (DeviceSetting object) => [],
        toManyRelations: (DeviceSetting object) => {},
        getId: (DeviceSetting object) => object.idSeq,
        setId: (DeviceSetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (DeviceSetting object, fb.Builder fbb) {
          final newOrderDefaultTypeOffset = object.newOrderDefaultType == null
              ? null
              : fbb.writeString(object.newOrderDefaultType!);
          final printLanguageOffset = object.printLanguage == null
              ? null
              : fbb.writeString(object.printLanguage!);
          final defaultTagOffset = object.defaultTag == null
              ? null
              : fbb.writeString(object.defaultTag!);
          final emailForDailyReportOffset = object.emailForDailyReport == null
              ? null
              : fbb.writeString(object.emailForDailyReport!);
          final emailForShiftReportOffset = object.emailForShiftReport == null
              ? null
              : fbb.writeString(object.emailForShiftReport!);
          final emailForTillReportOffset = object.emailForTillReport == null
              ? null
              : fbb.writeString(object.emailForTillReport!);
          final invoiceNumberPerfixSymobleOffset =
              object.invoiceNumberPerfixSymoble == null
                  ? null
                  : fbb.writeString(object.invoiceNumberPerfixSymoble!);
          final invoiceNumberPerfixOffset = object.invoiceNumberPerfix == null
              ? null
              : fbb.writeString(object.invoiceNumberPerfix!);
          fbb.startTable(24);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addInt64(1, object.dailyStartCallNumber);
          fbb.addInt64(2, object.dailyReCallNumber);
          fbb.addOffset(3, newOrderDefaultTypeOffset);
          fbb.addOffset(4, printLanguageOffset);
          fbb.addOffset(5, defaultTagOffset);
          fbb.addOffset(6, emailForDailyReportOffset);
          fbb.addOffset(7, emailForShiftReportOffset);
          fbb.addOffset(8, emailForTillReportOffset);
          fbb.addBool(9, object.autoConnectToDevices);
          fbb.addBool(10, object.enableBarcodeScanner);
          fbb.addBool(11, object.acceptOnlineOrders);
          fbb.addBool(12, object.sentOnlineOrdersToKitchen);
          fbb.addBool(13, object.printOnlineOrdersUponReceipt);
          fbb.addBool(14, object.disableAutoPrintInvoice);
          fbb.addBool(15, object.readCallNumberFromMasterCasher);
          fbb.addBool(16, object.printReceiptVoucherTransactions);
          fbb.addBool(17, object.forceSelectPriceList);
          fbb.addBool(18, object.forceSelectChareOnProductSale);
          fbb.addBool(19, object.forceRestCallNumberEveryDay);
          fbb.addOffset(20, invoiceNumberPerfixSymobleOffset);
          fbb.addOffset(21, invoiceNumberPerfixOffset);
          fbb.addBool(22, object.refrencePerfix);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final dailyStartCallNumberParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final dailyReCallNumberParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final newOrderDefaultTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final printLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final defaultTagParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final emailForDailyReportParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final emailForShiftReportParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final emailForTillReportParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final autoConnectToDevicesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final enableBarcodeScannerParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final acceptOnlineOrdersParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final sentOnlineOrdersToKitchenParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);
          final printOnlineOrdersUponReceiptParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30);
          final disableAutoPrintInvoiceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final readCallNumberFromMasterCasherParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final printReceiptVoucherTransactionsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final forceSelectPriceListParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final forceSelectChareOnProductSaleParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final forceRestCallNumberEveryDayParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final invoiceNumberPerfixSymobleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final invoiceNumberPerfixParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 46);
          final refrencePerfixParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final object = DeviceSetting(
              idSeq: idSeqParam,
              dailyStartCallNumber: dailyStartCallNumberParam,
              dailyReCallNumber: dailyReCallNumberParam,
              newOrderDefaultType: newOrderDefaultTypeParam,
              printLanguage: printLanguageParam,
              defaultTag: defaultTagParam,
              emailForDailyReport: emailForDailyReportParam,
              emailForShiftReport: emailForShiftReportParam,
              emailForTillReport: emailForTillReportParam,
              autoConnectToDevices: autoConnectToDevicesParam,
              enableBarcodeScanner: enableBarcodeScannerParam,
              acceptOnlineOrders: acceptOnlineOrdersParam,
              sentOnlineOrdersToKitchen: sentOnlineOrdersToKitchenParam,
              printOnlineOrdersUponReceipt: printOnlineOrdersUponReceiptParam,
              disableAutoPrintInvoice: disableAutoPrintInvoiceParam,
              readCallNumberFromMasterCasher:
                  readCallNumberFromMasterCasherParam,
              printReceiptVoucherTransactions:
                  printReceiptVoucherTransactionsParam,
              forceSelectPriceList: forceSelectPriceListParam,
              forceSelectChareOnProductSale: forceSelectChareOnProductSaleParam,
              forceRestCallNumberEveryDay: forceRestCallNumberEveryDayParam,
              invoiceNumberPerfixSymoble: invoiceNumberPerfixSymobleParam,
              invoiceNumberPerfix: invoiceNumberPerfixParam,
              refrencePerfix: refrencePerfixParam);

          return object;
        }),
    Discount: obx_int.EntityDefinition<Discount>(
        model: _entities[22],
        toOneRelations: (Discount object) => [],
        toManyRelations: (Discount object) => {},
        getId: (Discount object) => object.idSeq,
        setId: (Discount object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Discount object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final startTimeOffset = object.startTime == null
              ? null
              : fbb.writeString(object.startTime!);
          final endTimeOffset =
              object.endTime == null ? null : fbb.writeString(object.endTime!);
          final productIDsOffset = object.productIDs == null
              ? null
              : fbb.writeList(object.productIDs!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final daysOffset =
              object.days == null ? null : fbb.writeListInt64(object.days!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final priceListOffset = object.priceList == null
              ? null
              : fbb.writeList(object.priceList!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final customersOffset = object.customers == null
              ? null
              : fbb.writeList(object.customers!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final departmentsOffset = object.departments == null
              ? null
              : fbb.writeList(object.departments!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoriesOffset = object.categories == null
              ? null
              : fbb.writeList(object.categories!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(23);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, startDateOffset);
          fbb.addOffset(5, endDateOffset);
          fbb.addOffset(6, startTimeOffset);
          fbb.addOffset(7, endTimeOffset);
          fbb.addInt64(8, object.discountAppliedTo);
          fbb.addInt64(9, object.discountType);
          fbb.addFloat64(10, object.discountPercentage);
          fbb.addFloat64(11, object.discountAmount);
          fbb.addFloat64(12, object.maximumDiscountAmount);
          fbb.addFloat64(13, object.minimalOrderAmount);
          fbb.addBool(14, object.taxable);
          fbb.addOffset(15, productIDsOffset);
          fbb.addOffset(16, daysOffset);
          fbb.addOffset(17, orderTypesOffset);
          fbb.addOffset(18, priceListOffset);
          fbb.addOffset(19, customersOffset);
          fbb.addOffset(20, departmentsOffset);
          fbb.addOffset(21, categoriesOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final startTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final endTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final discountAppliedToParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final discountTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final discountPercentageParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final discountAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final maximumDiscountAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 28);
          final minimalOrderAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 30);
          final taxableParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final productIDsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 34);
          final daysParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 38);
          final priceListParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 40);
          final customersParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 42);
          final departmentsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 44);
          final categoriesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 46);
          final object = Discount(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              startDate: startDateParam,
              endDate: endDateParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              discountAppliedTo: discountAppliedToParam,
              discountType: discountTypeParam,
              discountPercentage: discountPercentageParam,
              discountAmount: discountAmountParam,
              maximumDiscountAmount: maximumDiscountAmountParam,
              minimalOrderAmount: minimalOrderAmountParam,
              taxable: taxableParam,
              productIDs: productIDsParam,
              days: daysParam,
              orderTypes: orderTypesParam,
              priceList: priceListParam,
              customers: customersParam,
              departments: departmentsParam,
              categories: categoriesParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    DiscountSetting: obx_int.EntityDefinition<DiscountSetting>(
        model: _entities[23],
        toOneRelations: (DiscountSetting object) => [],
        toManyRelations: (DiscountSetting object) => {},
        getId: (DiscountSetting object) => object.idSeq,
        setId: (DiscountSetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (DiscountSetting object, fb.Builder fbb) {
          fbb.startTable(12);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addBool(1, object.enableDiscount);
          fbb.addBool(2, object.enablePromotion);
          fbb.addBool(3, object.enableCoupon);
          fbb.addBool(4, object.enableTimeEvent);
          fbb.addBool(5, object.enableDiscountInSalesInvoice);
          fbb.addBool(6, object.enableDiscountInPurchaseInvoice);
          fbb.addBool(7, object.enableDiscountInSalesInvoiceProducts);
          fbb.addBool(8, object.enableDiscountInPurchaseInvoiceItems);
          fbb.addBool(9, object.enableFreeQuantityInSalesInvoiceItems);
          fbb.addBool(10, object.enableFreeQuantityInPurchaseInvoiceItems);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final enableDiscountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final enablePromotionParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8);
          final enableCouponParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final enableTimeEventParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12);
          final enableDiscountInSalesInvoiceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final enableDiscountInPurchaseInvoiceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final enableDiscountInSalesInvoiceProductsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final enableDiscountInPurchaseInvoiceItemsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final enableFreeQuantityInSalesInvoiceItemsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final enableFreeQuantityInPurchaseInvoiceItemsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final object = DiscountSetting(
              enableDiscount: enableDiscountParam,
              enablePromotion: enablePromotionParam,
              enableCoupon: enableCouponParam,
              enableTimeEvent: enableTimeEventParam,
              enableDiscountInSalesInvoice: enableDiscountInSalesInvoiceParam,
              enableDiscountInPurchaseInvoice:
                  enableDiscountInPurchaseInvoiceParam,
              enableDiscountInSalesInvoiceProducts:
                  enableDiscountInSalesInvoiceProductsParam,
              enableDiscountInPurchaseInvoiceItems:
                  enableDiscountInPurchaseInvoiceItemsParam,
              enableFreeQuantityInSalesInvoiceItems:
                  enableFreeQuantityInSalesInvoiceItemsParam,
              enableFreeQuantityInPurchaseInvoiceItems:
                  enableFreeQuantityInPurchaseInvoiceItemsParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ExtractCategory: obx_int.EntityDefinition<ExtractCategory>(
        model: _entities[24],
        toOneRelations: (ExtractCategory object) => [],
        toManyRelations: (ExtractCategory object) => {},
        getId: (ExtractCategory object) => object.idSeq,
        setId: (ExtractCategory object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ExtractCategory object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.addOffset(3, imageOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = ExtractCategory(
              id: idParam,
              order: orderParam,
              name: nameParam,
              image: imageParam,
              fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ExtractDepartment: obx_int.EntityDefinition<ExtractDepartment>(
        model: _entities[25],
        toOneRelations: (ExtractDepartment object) => [],
        toManyRelations: (ExtractDepartment object) => {
              obx_int.RelInfo<ExtractDepartment>.toMany(7, object.idSeq!):
                  object.categories
            },
        getId: (ExtractDepartment object) => object.idSeq,
        setId: (ExtractDepartment object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ExtractDepartment object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.addOffset(3, imageOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = ExtractDepartment(
              id: idParam,
              order: orderParam,
              name: nameParam,
              image: imageParam,
              fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          obx_int.InternalToManyAccess.setRelInfo<ExtractDepartment>(
              object.categories,
              store,
              obx_int.RelInfo<ExtractDepartment>.toMany(7, object.idSeq!));
          return object;
        }),
    ExtractProduct: obx_int.EntityDefinition<ExtractProduct>(
        model: _entities[26],
        toOneRelations: (ExtractProduct object) => [],
        toManyRelations: (ExtractProduct object) => {
              obx_int.RelInfo<ExtractProduct>.toMany(8, object.idSeq!):
                  object.units,
              obx_int.RelInfo<ExtractProduct>.toMany(9, object.idSeq!):
                  object.groups
            },
        getId: (ExtractProduct object) => object.idSeq,
        setId: (ExtractProduct object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ExtractProduct object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final skuOffset =
              object.sku == null ? null : fbb.writeString(object.sku!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          final productTypeIdOffset = object.productTypeId == null
              ? null
              : fbb.writeString(object.productTypeId!);
          final costTypeOffset = object.costType == null
              ? null
              : fbb.writeString(object.costType!);
          final salesMethodOffset = object.salesMethod == null
              ? null
              : fbb.writeString(object.salesMethod!);
          final availableStartDateTimeOffset =
              object.availableStartDateTime == null
                  ? null
                  : fbb.writeString(object.availableStartDateTime!);
          final availableEndDateTimeOffset = object.availableEndDateTime == null
              ? null
              : fbb.writeString(object.availableEndDateTime!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final fDescriptionOffset = object.fDescription == null
              ? null
              : fbb.writeString(object.fDescription!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final categoryIdOffset = object.categoryId == null
              ? null
              : fbb.writeString(object.categoryId!);
          final departmentIdOffset = object.departmentId == null
              ? null
              : fbb.writeString(object.departmentId!);
          final taxGroupIdOffset = object.taxGroupId == null
              ? null
              : fbb.writeString(object.taxGroupId!);
          final subNameOffset =
              object.subName == null ? null : fbb.writeString(object.subName!);
          final fSubNameOffset = object.fSubName == null
              ? null
              : fbb.writeString(object.fSubName!);
          final promotionalNameOffset = object.promotionalName == null
              ? null
              : fbb.writeString(object.promotionalName!);
          final fPromotionalNameOffset = object.fPromotionalName == null
              ? null
              : fbb.writeString(object.fPromotionalName!);
          final tagsOffset =
              object.tags == null ? null : fbb.writeString(object.tags!);
          final fTagsOffset =
              object.fTags == null ? null : fbb.writeString(object.fTags!);
          fbb.startTable(51);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, skuOffset);
          fbb.addOffset(5, barcodeOffset);
          fbb.addOffset(6, productTypeIdOffset);
          fbb.addOffset(7, costTypeOffset);
          fbb.addInt64(8, object.priceType);
          fbb.addOffset(9, salesMethodOffset);
          fbb.addFloat64(10, object.price);
          fbb.addFloat64(11, object.cost);
          fbb.addInt64(12, object.preparationTime);
          fbb.addBool(13, object.activeQRScan);
          fbb.addBool(14, object.qrScanOnSameDate);
          fbb.addBool(15, object.enableSalesDiscount);
          fbb.addFloat64(16, object.discountPercentageLimit);
          fbb.addBool(17, object.enableFreeQuantity);
          fbb.addBool(18, object.enableDateExpire);
          fbb.addBool(19, object.enableIMEISerial);
          fbb.addBool(20, object.enableWeights);
          fbb.addBool(21, object.scanPriceFromScale);
          fbb.addBool(22, object.scalePriceIncludeTax);
          fbb.addBool(23, object.independentPrinting);
          fbb.addBool(24, object.calculateQuantityFromTotalPrice);
          fbb.addBool(25, object.reservationRequired);
          fbb.addInt64(26, object.scaleBarcodeDigits);
          fbb.addInt64(27, object.scaleProductCodeDigits);
          fbb.addInt64(28, object.scaleIntDigits);
          fbb.addInt64(29, object.scaledecimalDigits);
          fbb.addBool(30, object.scaleProductCodeFirstInBracode);
          fbb.addOffset(31, availableStartDateTimeOffset);
          fbb.addOffset(32, availableEndDateTimeOffset);
          fbb.addOffset(33, descriptionOffset);
          fbb.addOffset(34, fDescriptionOffset);
          fbb.addOffset(35, imageUrlOffset);
          fbb.addInt64(36, object.calories);
          fbb.addInt64(37, object.minimumLevel);
          fbb.addInt64(38, object.maximumLevel);
          fbb.addOffset(39, categoryIdOffset);
          fbb.addOffset(40, departmentIdOffset);
          fbb.addInt64(41, object.productNature);
          fbb.addBool(42, object.active);
          fbb.addOffset(43, taxGroupIdOffset);
          fbb.addOffset(44, subNameOffset);
          fbb.addOffset(45, fSubNameOffset);
          fbb.addOffset(46, promotionalNameOffset);
          fbb.addOffset(47, fPromotionalNameOffset);
          fbb.addOffset(48, tagsOffset);
          fbb.addOffset(49, fTagsOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final skuParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final barcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final productTypeIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final costTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final priceTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final salesMethodParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final costParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final preparationTimeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final activeQRScanParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30);
          final qrScanOnSameDateParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final enableSalesDiscountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final discountPercentageLimitParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 36);
          final enableFreeQuantityParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final enableDateExpireParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final enableIMEISerialParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final enableWeightsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44);
          final scanPriceFromScaleParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 46);
          final scalePriceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final independentPrintingParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 50);
          final calculateQuantityFromTotalPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 52);
          final reservationRequiredParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 54);
          final scaleBarcodeDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 56);
          final scaleProductCodeDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 58);
          final scaleIntDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 60);
          final scaledecimalDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 62);
          final scaleProductCodeFirstInBracodeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 64);
          final availableStartDateTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 66);
          final availableEndDateTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 68);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 70);
          final fDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 72);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 74);
          final caloriesParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 76);
          final minimumLevelParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 78);
          final maximumLevelParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 80);
          final categoryIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 82);
          final departmentIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 84);
          final activeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 88);
          final productNatureParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 86);
          final taxGroupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 90);
          final subNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 92);
          final fSubNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 94);
          final promotionalNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 96);
          final fPromotionalNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 98);
          final tagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 100);
          final fTagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 102);
          final object = ExtractProduct(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              sku: skuParam,
              barcode: barcodeParam,
              productTypeId: productTypeIdParam,
              costType: costTypeParam,
              priceType: priceTypeParam,
              salesMethod: salesMethodParam,
              price: priceParam,
              cost: costParam,
              preparationTime: preparationTimeParam,
              activeQRScan: activeQRScanParam,
              qrScanOnSameDate: qrScanOnSameDateParam,
              enableSalesDiscount: enableSalesDiscountParam,
              discountPercentageLimit: discountPercentageLimitParam,
              enableFreeQuantity: enableFreeQuantityParam,
              enableDateExpire: enableDateExpireParam,
              enableIMEISerial: enableIMEISerialParam,
              enableWeights: enableWeightsParam,
              scanPriceFromScale: scanPriceFromScaleParam,
              scalePriceIncludeTax: scalePriceIncludeTaxParam,
              independentPrinting: independentPrintingParam,
              calculateQuantityFromTotalPrice:
                  calculateQuantityFromTotalPriceParam,
              reservationRequired: reservationRequiredParam,
              scaleBarcodeDigits: scaleBarcodeDigitsParam,
              scaleProductCodeDigits: scaleProductCodeDigitsParam,
              scaleIntDigits: scaleIntDigitsParam,
              scaledecimalDigits: scaledecimalDigitsParam,
              scaleProductCodeFirstInBracode:
                  scaleProductCodeFirstInBracodeParam,
              availableStartDateTime: availableStartDateTimeParam,
              availableEndDateTime: availableEndDateTimeParam,
              description: descriptionParam,
              fDescription: fDescriptionParam,
              imageUrl: imageUrlParam,
              calories: caloriesParam,
              minimumLevel: minimumLevelParam,
              maximumLevel: maximumLevelParam,
              categoryId: categoryIdParam,
              departmentId: departmentIdParam,
              active: activeParam,
              productNature: productNatureParam,
              taxGroupId: taxGroupIdParam,
              subName: subNameParam,
              fSubName: fSubNameParam,
              promotionalName: promotionalNameParam,
              fPromotionalName: fPromotionalNameParam,
              tags: tagsParam,
              fTags: fTagsParam);
          obx_int.InternalToManyAccess.setRelInfo<ExtractProduct>(object.units,
              store, obx_int.RelInfo<ExtractProduct>.toMany(8, object.idSeq!));
          obx_int.InternalToManyAccess.setRelInfo<ExtractProduct>(object.groups,
              store, obx_int.RelInfo<ExtractProduct>.toMany(9, object.idSeq!));
          return object;
        }),
    Fee: obx_int.EntityDefinition<Fee>(
        model: _entities[27],
        toOneRelations: (Fee object) => [],
        toManyRelations: (Fee object) => {},
        getId: (Fee object) => object.idSeq,
        setId: (Fee object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Fee object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final daysOffset =
              object.days == null ? null : fbb.writeListInt64(object.days!);
          final productsOffset = object.products == null
              ? null
              : fbb.writeList(object.products!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final taxGroupIdOffset = object.taxGroupId == null
              ? null
              : fbb.writeString(object.taxGroupId!);
          fbb.startTable(20);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addInt64(4, object.type);
          fbb.addInt64(5, object.valueType);
          fbb.addFloat64(6, object.value);
          fbb.addFloat64(7, object.percentage);
          fbb.addOffset(8, orderTypesOffset);
          fbb.addOffset(9, daysOffset);
          fbb.addOffset(10, productsOffset);
          fbb.addOffset(11, taxGroupIdOffset);
          fbb.addBool(12, object.applyAuto);
          fbb.addBool(13, object.applyToSubtotal);
          fbb.addBool(14, object.applyForProducts);
          fbb.addBool(15, object.printSeparatelyInTotalInvoice);
          fbb.addBool(16, object.amountIncludeInProductPrice);
          fbb.addFloat64(17, object.minAmountPerProduct);
          fbb.addFloat64(18, object.maxAmountPerProduct);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Fee()
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..id = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..fName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..type =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12)
            ..valueType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14)
            ..value = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 16)
            ..percentage = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 18)
            ..orderTypes =
                const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                    .vTableGetNullable(buffer, rootOffset, 20)
            ..days = const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..products = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..taxGroupId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..applyAuto =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28)
            ..applyToSubtotal =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30)
            ..applyForProducts =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32)
            ..printSeparatelyInTotalInvoice =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34)
            ..amountIncludeInProductPrice =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36)
            ..minAmountPerProduct = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 38)
            ..maxAmountPerProduct = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 40);

          return object;
        }),
    FeeValue: obx_int.EntityDefinition<FeeValue>(
        model: _entities[28],
        toOneRelations: (FeeValue object) => [object.taxInfo],
        toManyRelations: (FeeValue object) => {},
        getId: (FeeValue object) => object.idSeq,
        setId: (FeeValue object, int id) {
          object.idSeq = id;
        },
        objectToFB: (FeeValue object, fb.Builder fbb) {
          final feeIdOffset =
              object.feeId == null ? null : fbb.writeString(object.feeId!);
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, feeIdOffset);
          fbb.addFloat64(2, object.value);
          fbb.addBool(3, object.applyAuto);
          fbb.addInt64(4, object.taxInfo.targetId);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final feeIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final valueParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final applyAutoParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final object = FeeValue(
              feeId: feeIdParam, value: valueParam, applyAuto: applyAutoParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.taxInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.taxInfo.attach(store);
          return object;
        }),
    FreeOption: obx_int.EntityDefinition<FreeOption>(
        model: _entities[29],
        toOneRelations: (FreeOption object) => [],
        toManyRelations: (FreeOption object) => {},
        getId: (FreeOption object) => object.idSeq,
        setId: (FreeOption object, int id) {
          object.idSeq = id;
        },
        objectToFB: (FreeOption object, fb.Builder fbb) {
          final optionIdOffset = object.optionId == null
              ? null
              : fbb.writeString(object.optionId!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, optionIdOffset);
          fbb.addFloat64(2, object.freeQuantity);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final optionIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final freeQuantityParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = FreeOption(
              optionId: optionIdParam, freeQuantity: freeQuantityParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Group: obx_int.EntityDefinition<Group>(
        model: _entities[30],
        toOneRelations: (Group object) => [],
        toManyRelations: (Group object) => {},
        getId: (Group object) => object.idSeq,
        setId: (Group object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Group object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final groupIdOffset =
              object.groupId == null ? null : fbb.writeString(object.groupId!);
          final groupNameOffset = object.groupName == null
              ? null
              : fbb.writeString(object.groupName!);
          final referenceOffset = object.reference == null
              ? null
              : fbb.writeString(object.reference!);
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, groupIdOffset);
          fbb.addOffset(3, groupNameOffset);
          fbb.addOffset(4, referenceOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final groupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final groupNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final referenceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = Group(
              id: idParam,
              groupId: groupIdParam,
              groupName: groupNameParam,
              reference: referenceParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Ingredient: obx_int.EntityDefinition<Ingredient>(
        model: _entities[31],
        toOneRelations: (Ingredient object) => [],
        toManyRelations: (Ingredient object) => {},
        getId: (Ingredient object) => object.idSeq,
        setId: (Ingredient object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Ingredient object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final ingredientItemIdOffset = object.ingredientItemId == null
              ? null
              : fbb.writeString(object.ingredientItemId!);
          final ingredientItemNameOffset = object.ingredientItemName == null
              ? null
              : fbb.writeString(object.ingredientItemName!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          final unitOfMeasureNameOffset = object.unitOfMeasureName == null
              ? null
              : fbb.writeString(object.unitOfMeasureName!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeList(object.orderTypes!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(16);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addBool(1, object.isActive);
          fbb.addInt64(2, object.displayOrder);
          fbb.addOffset(3, idOffset);
          fbb.addOffset(4, ingredientItemIdOffset);
          fbb.addOffset(5, ingredientItemNameOffset);
          fbb.addOffset(6, barcodeOffset);
          fbb.addOffset(7, unitOfMeasureNameOffset);
          fbb.addFloat64(8, object.warehouseToIngredientFactor);
          fbb.addFloat64(9, object.quantity);
          fbb.addFloat64(10, object.wasteQuantity);
          fbb.addFloat64(11, object.unitCost);
          fbb.addFloat64(12, object.estimatedUnitCost);
          fbb.addFloat64(13, object.yieldPercentage);
          fbb.addOffset(14, orderTypesOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final isActiveParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final displayOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final ingredientItemIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final ingredientItemNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final barcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final unitOfMeasureNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final warehouseToIngredientFactorParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 20);
          final quantityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final wasteQuantityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final unitCostParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final estimatedUnitCostParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 28);
          final yieldPercentageParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 30);
          final orderTypesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 32);
          final object = Ingredient(
              isActive: isActiveParam,
              displayOrder: displayOrderParam,
              id: idParam,
              ingredientItemId: ingredientItemIdParam,
              ingredientItemName: ingredientItemNameParam,
              barcode: barcodeParam,
              unitOfMeasureName: unitOfMeasureNameParam,
              warehouseToIngredientFactor: warehouseToIngredientFactorParam,
              quantity: quantityParam,
              wasteQuantity: wasteQuantityParam,
              unitCost: unitCostParam,
              estimatedUnitCost: estimatedUnitCostParam,
              yieldPercentage: yieldPercentageParam,
              orderTypes: orderTypesParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Language: obx_int.EntityDefinition<Language>(
        model: _entities[32],
        toOneRelations: (Language object) => [],
        toManyRelations: (Language object) => {},
        getId: (Language object) => object.idSeq,
        setId: (Language object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Language object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final languageCultureOffset = object.languageCulture == null
              ? null
              : fbb.writeString(object.languageCulture!);
          final uniqueSeoCodeOffset = object.uniqueSeoCode == null
              ? null
              : fbb.writeString(object.uniqueSeoCode!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, fNameOffset);
          fbb.addOffset(3, languageCultureOffset);
          fbb.addOffset(4, uniqueSeoCodeOffset);
          fbb.addBool(5, object.rtl);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final languageCultureParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final uniqueSeoCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final rtlParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final object = Language(
              name: nameParam,
              fName: fNameParam,
              languageCulture: languageCultureParam,
              uniqueSeoCode: uniqueSeoCodeParam,
              rtl: rtlParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    LoginHistory: obx_int.EntityDefinition<LoginHistory>(
        model: _entities[33],
        toOneRelations: (LoginHistory object) => [],
        toManyRelations: (LoginHistory object) => {},
        getId: (LoginHistory object) => object.id,
        setId: (LoginHistory object, int id) {
          object.id = id;
        },
        objectToFB: (LoginHistory object, fb.Builder fbb) {
          final loginTimeOffset = object.loginTime == null
              ? null
              : fbb.writeString(object.loginTime!);
          final logoutTimeOffset = object.logoutTime == null
              ? null
              : fbb.writeString(object.logoutTime!);
          final usertIdOffset =
              object.usertId == null ? null : fbb.writeString(object.usertId!);
          final deviceNoOffset = object.deviceNo == null
              ? null
              : fbb.writeString(object.deviceNo!);
          final deviceRefOffset = object.deviceRef == null
              ? null
              : fbb.writeString(object.deviceRef!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.idIdentity);
          fbb.addOffset(2, loginTimeOffset);
          fbb.addOffset(3, logoutTimeOffset);
          fbb.addOffset(4, usertIdOffset);
          fbb.addOffset(5, deviceNoOffset);
          fbb.addOffset(6, deviceRefOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idIdentityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final loginTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final logoutTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final usertIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final deviceNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final deviceRefParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = LoginHistory(
              id: idParam,
              idIdentity: idIdentityParam,
              loginTime: loginTimeParam,
              logoutTime: logoutTimeParam,
              usertId: usertIdParam,
              deviceNo: deviceNoParam,
              deviceRef: deviceRefParam);

          return object;
        }),
    LogoData: obx_int.EntityDefinition<LogoData>(
        model: _entities[34],
        toOneRelations: (LogoData object) => [],
        toManyRelations: (LogoData object) => {},
        getId: (LogoData object) => object.id,
        setId: (LogoData object, int id) {
          object.id = id;
        },
        objectToFB: (LogoData object, fb.Builder fbb) {
          final logoUrlOffset =
              object.logoUrl == null ? null : fbb.writeString(object.logoUrl!);
          final logoDataOffset = object.logoData == null
              ? null
              : fbb.writeListInt8(object.logoData!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, logoUrlOffset);
          fbb.addOffset(2, logoDataOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final logoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final logoDataParam =
              const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final object = LogoData(
              id: idParam, logoUrl: logoUrlParam, logoData: logoDataParam);

          return object;
        }),
    LoyaltySetting: obx_int.EntityDefinition<LoyaltySetting>(
        model: _entities[35],
        toOneRelations: (LoyaltySetting object) => [],
        toManyRelations: (LoyaltySetting object) => {},
        getId: (LoyaltySetting object) => object.idSeq,
        setId: (LoyaltySetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (LoyaltySetting object, fb.Builder fbb) {
          final loyaltyMethodOffset = object.loyaltyMethod == null
              ? null
              : fbb.writeString(object.loyaltyMethod!);
          final bonusTypeOffset = object.bonusType == null
              ? null
              : fbb.writeString(object.bonusType!);
          fbb.startTable(14);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addBool(1, object.enableSystem);
          fbb.addOffset(2, loyaltyMethodOffset);
          fbb.addFloat64(3, object.lowestOrderPrice);
          fbb.addFloat64(4, object.delayInEarningPointsMinutes);
          fbb.addOffset(5, bonusTypeOffset);
          fbb.addFloat64(6, object.bonusValue);
          fbb.addFloat64(7, object.maximumBonusLimit);
          fbb.addFloat64(8, object.requiredBonusPoint);
          fbb.addFloat64(9, object.bonusValidityDays);
          fbb.addBool(10, object.enableSMSNotifications);
          fbb.addBool(11, object.displayBonusOnNewOrder);
          fbb.addBool(12, object.printBonusBalanceOnNewOrder);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final enableSystemParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final loyaltyMethodParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final lowestOrderPriceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final delayInEarningPointsMinutesParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final bonusTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final bonusValueParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final maximumBonusLimitParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final requiredBonusPointParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 20);
          final bonusValidityDaysParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final enableSMSNotificationsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final displayBonusOnNewOrderParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final printBonusBalanceOnNewOrderParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);
          final object = LoyaltySetting(
              enableSystem: enableSystemParam,
              loyaltyMethod: loyaltyMethodParam,
              lowestOrderPrice: lowestOrderPriceParam,
              delayInEarningPointsMinutes: delayInEarningPointsMinutesParam,
              bonusType: bonusTypeParam,
              bonusValue: bonusValueParam,
              maximumBonusLimit: maximumBonusLimitParam,
              requiredBonusPoint: requiredBonusPointParam,
              bonusValidityDays: bonusValidityDaysParam,
              enableSMSNotifications: enableSMSNotificationsParam,
              displayBonusOnNewOrder: displayBonusOnNewOrderParam,
              printBonusBalanceOnNewOrder: printBonusBalanceOnNewOrderParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Menu: obx_int.EntityDefinition<Menu>(
        model: _entities[36],
        toOneRelations: (Menu object) => [],
        toManyRelations: (Menu object) => {
              obx_int.RelInfo<Menu>.toMany(10, object.idSeq!):
                  object.departments,
              obx_int.RelInfo<Menu>.toMany(11, object.idSeq!):
                  object.categories,
              obx_int.RelInfo<Menu>.toMany(12, object.idSeq!): object.products,
              obx_int.RelInfo<Menu>.toMany(13, object.idSeq!): object.giftCards
            },
        getId: (Menu object) => object.idSeq,
        setId: (Menu object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Menu object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Menu(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              fName: fNameParam);
          obx_int.InternalToManyAccess.setRelInfo<Menu>(object.departments,
              store, obx_int.RelInfo<Menu>.toMany(10, object.idSeq!));
          obx_int.InternalToManyAccess.setRelInfo<Menu>(object.categories,
              store, obx_int.RelInfo<Menu>.toMany(11, object.idSeq!));
          obx_int.InternalToManyAccess.setRelInfo<Menu>(object.products, store,
              obx_int.RelInfo<Menu>.toMany(12, object.idSeq!));
          obx_int.InternalToManyAccess.setRelInfo<Menu>(object.giftCards, store,
              obx_int.RelInfo<Menu>.toMany(13, object.idSeq!));
          return object;
        }),
    MenuCategory: obx_int.EntityDefinition<MenuCategory>(
        model: _entities[37],
        toOneRelations: (MenuCategory object) => [],
        toManyRelations: (MenuCategory object) => {},
        getId: (MenuCategory object) => object.idSeq,
        setId: (MenuCategory object, int id) {
          object.idSeq = id;
        },
        objectToFB: (MenuCategory object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object =
              MenuCategory(idSeq: idSeqParam, id: idParam, order: orderParam);

          return object;
        }),
    MenuDepartment: obx_int.EntityDefinition<MenuDepartment>(
        model: _entities[38],
        toOneRelations: (MenuDepartment object) => [],
        toManyRelations: (MenuDepartment object) => {},
        getId: (MenuDepartment object) => object.idSeq,
        setId: (MenuDepartment object, int id) {
          object.idSeq = id;
        },
        objectToFB: (MenuDepartment object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object =
              MenuDepartment(idSeq: idSeqParam, id: idParam, order: orderParam);

          return object;
        }),
    MenuGiftCard: obx_int.EntityDefinition<MenuGiftCard>(
        model: _entities[39],
        toOneRelations: (MenuGiftCard object) => [],
        toManyRelations: (MenuGiftCard object) => {},
        getId: (MenuGiftCard object) => object.idSeq,
        setId: (MenuGiftCard object, int id) {
          object.idSeq = id;
        },
        objectToFB: (MenuGiftCard object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object =
              MenuGiftCard(idSeq: idSeqParam, id: idParam, order: orderParam);

          return object;
        }),
    MenuProduct: obx_int.EntityDefinition<MenuProduct>(
        model: _entities[40],
        toOneRelations: (MenuProduct object) => [],
        toManyRelations: (MenuProduct object) => {},
        getId: (MenuProduct object) => object.idSeq,
        setId: (MenuProduct object, int id) {
          object.idSeq = id;
        },
        objectToFB: (MenuProduct object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.order);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object =
              MenuProduct(idSeq: idSeqParam, id: idParam, order: orderParam);

          return object;
        }),
    Modifier: obx_int.EntityDefinition<Modifier>(
        model: _entities[41],
        toOneRelations: (Modifier object) => [],
        toManyRelations: (Modifier object) => {
              obx_int.RelInfo<Modifier>.toMany(14, object.idSeq!):
                  object.options
            },
        getId: (Modifier object) => object.idSeq,
        setId: (Modifier object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Modifier object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fnameOffset =
              object.fname == null ? null : fbb.writeString(object.fname!);
          fbb.startTable(8);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.minimumOptions);
          fbb.addInt64(3, object.maximumOptions);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, fnameOffset);
          fbb.addBool(6, object.isUnique);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final minimumOptionsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final isUniqueParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final maximumOptionsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = Modifier(
              id: idParam,
              minimumOptions: minimumOptionsParam,
              isUnique: isUniqueParam,
              maximumOptions: maximumOptionsParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..fname = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);
          obx_int.InternalToManyAccess.setRelInfo<Modifier>(object.options,
              store, obx_int.RelInfo<Modifier>.toMany(14, object.idSeq!));
          return object;
        }),
    Option: obx_int.EntityDefinition<Option>(
        model: _entities[42],
        toOneRelations: (Option object) => [],
        toManyRelations: (Option object) => {},
        getId: (Option object) => object.idSeq,
        setId: (Option object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Option object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final costTypeOffset = object.costType == null
              ? null
              : fbb.writeString(object.costType!);
          final modifierTypeOffset = object.modifierType == null
              ? null
              : fbb.writeString(object.modifierType!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fnameOffset =
              object.fname == null ? null : fbb.writeString(object.fname!);
          final taxGroupIdOffset = object.taxGroupId == null
              ? null
              : fbb.writeString(object.taxGroupId!);
          fbb.startTable(15);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, costTypeOffset);
          fbb.addOffset(3, modifierTypeOffset);
          fbb.addInt64(4, object.instructionType);
          fbb.addFloat64(5, object.price);
          fbb.addFloat64(6, object.cost);
          fbb.addFloat64(7, object.calories);
          fbb.addBool(8, object.inStock);
          fbb.addBool(9, object.isDefault);
          fbb.addInt64(10, object.displayOrder);
          fbb.addOffset(11, nameOffset);
          fbb.addOffset(12, fnameOffset);
          fbb.addOffset(13, taxGroupIdOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final costTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final modifierTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final instructionTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final costParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final caloriesParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final inStockParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final isDefaultParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final displayOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final taxGroupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final object = Option(
              id: idParam,
              costType: costTypeParam,
              modifierType: modifierTypeParam,
              instructionType: instructionTypeParam,
              price: priceParam,
              cost: costParam,
              calories: caloriesParam,
              inStock: inStockParam,
              isDefault: isDefaultParam,
              displayOrder: displayOrderParam,
              taxGroupId: taxGroupIdParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..fname = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 28);

          return object;
        }),
    OrderC: obx_int.EntityDefinition<OrderC>(
        model: _entities[43],
        toOneRelations: (OrderC object) => [
              object.deliveryCompanyInfo,
              object.customer,
              object.address,
              object.promotion,
              object.discount,
              object.giftCard
            ],
        toManyRelations: (OrderC object) => {
              obx_int.RelInfo<OrderC>.toMany(15, object.posTransactionType!):
                  object.products,
              obx_int.RelInfo<OrderC>.toMany(16, object.posTransactionType!):
                  object.fees,
              obx_int.RelInfo<OrderC>.toMany(17, object.posTransactionType!):
                  object.feeValues,
              obx_int.RelInfo<OrderC>.toMany(18, object.posTransactionType!):
                  object.payments
            },
        getId: (OrderC object) => object.posTransactionType,
        setId: (OrderC object, int id) {
          object.posTransactionType = id;
        },
        objectToFB: (OrderC object, fb.Builder fbb) {
          final invoiceNumberOffset = object.invoiceNumber == null
              ? null
              : fbb.writeString(object.invoiceNumber!);
          final deviceIdOffset = object.deviceId == null
              ? null
              : fbb.writeString(object.deviceId!);
          final parentOrderIdOffset = object.parentOrderId == null
              ? null
              : fbb.writeString(object.parentOrderId!);
          final orderRefOffset = fbb.writeString(object.orderRef);
          final callNameOffset = object.callName == null
              ? null
              : fbb.writeString(object.callName!);
          final tableIdOffset =
              object.tableId == null ? null : fbb.writeString(object.tableId!);
          final tableCaptionOffset = object.tableCaption == null
              ? null
              : fbb.writeString(object.tableCaption!);
          final noteOffset =
              object.note == null ? null : fbb.writeString(object.note!);
          final kitchenNoteOffset = object.kitchenNote == null
              ? null
              : fbb.writeString(object.kitchenNote!);
          final msgCanselOffset = object.msgCansel == null
              ? null
              : fbb.writeString(object.msgCansel!);
          final checksumOffset = object.checksum == null
              ? null
              : fbb.writeString(object.checksum!);
          final masterChecksumOffset = object.masterChecksum == null
              ? null
              : fbb.writeString(object.masterChecksum!);
          final serverChecksumOffset = object.serverChecksum == null
              ? null
              : fbb.writeString(object.serverChecksum!);
          final shiftIdOffset =
              object.shiftId == null ? null : fbb.writeString(object.shiftId!);
          final tillIdOffset =
              object.tillId == null ? null : fbb.writeString(object.tillId!);
          final priceListIdOffset = object.priceListId == null
              ? null
              : fbb.writeString(object.priceListId!);
          final donationForIdOffset = object.donationForId == null
              ? null
              : fbb.writeString(object.donationForId!);
          final supervisorIdOffset = object.supervisorId == null
              ? null
              : fbb.writeString(object.supervisorId!);
          final referenceOffset = object.reference == null
              ? null
              : fbb.writeString(object.reference!);
          final casherNoteOffset = object.casherNote == null
              ? null
              : fbb.writeString(object.casherNote!);
          final trackingStatusIdOffset = object.trackingStatusId == null
              ? null
              : fbb.writeString(object.trackingStatusId!);
          final couponIdOffset = object.couponId == null
              ? null
              : fbb.writeString(object.couponId!);
          final createdOnOffset = object.createdOn == null
              ? null
              : fbb.writeString(object.createdOn!);
          final createdByOffset = object.createdBy == null
              ? null
              : fbb.writeString(object.createdBy!);
          final lastModifiedByOffset = object.lastModifiedBy == null
              ? null
              : fbb.writeString(object.lastModifiedBy!);
          final lastModifiedOnOffset = object.lastModifiedOn == null
              ? null
              : fbb.writeString(object.lastModifiedOn!);
          fbb.startTable(60);
          fbb.addInt64(0, object.idSeq);
          fbb.addOffset(1, invoiceNumberOffset);
          fbb.addOffset(2, deviceIdOffset);
          fbb.addInt64(3, object.startDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.timeOfReceipt?.millisecondsSinceEpoch);
          fbb.addOffset(5, parentOrderIdOffset);
          fbb.addInt64(6, object.splitIndex);
          fbb.addOffset(7, orderRefOffset);
          fbb.addOffset(8, callNameOffset);
          fbb.addInt64(9, object.orderType);
          fbb.addInt64(10, object.status);
          fbb.addInt64(11, object.orderSource);
          fbb.addInt64(12, object.endTime?.millisecondsSinceEpoch);
          fbb.addInt64(13, object.deliveryCompanyInfo.targetId);
          fbb.addOffset(15, tableIdOffset);
          fbb.addOffset(16, tableCaptionOffset);
          fbb.addInt64(17, object.numberVistor);
          fbb.addFloat64(18, object.minimumReservationPrice);
          fbb.addInt64(19, object.customer.targetId);
          fbb.addInt64(20, object.address.targetId);
          fbb.addInt64(21, object.promotion.targetId);
          fbb.addInt64(22, object.discount.targetId);
          fbb.addFloat64(23, object.priceDiscount);
          fbb.addFloat64(24, object.pricePromotion);
          fbb.addOffset(25, noteOffset);
          fbb.addOffset(26, kitchenNoteOffset);
          fbb.addOffset(27, msgCanselOffset);
          fbb.addFloat64(28, object.subTotal);
          fbb.addOffset(29, checksumOffset);
          fbb.addOffset(30, masterChecksumOffset);
          fbb.addOffset(31, serverChecksumOffset);
          fbb.addFloat64(32, object.totalFee);
          fbb.addFloat64(33, object.taxPrice);
          fbb.addFloat64(34, object.totalPaid);
          fbb.addOffset(35, shiftIdOffset);
          fbb.addOffset(36, tillIdOffset);
          fbb.addFloat64(37, object.totalCalories);
          fbb.addFloat64(38, object.totalDiscountForOrderAndProduct);
          fbb.addOffset(39, priceListIdOffset);
          fbb.addInt64(40, object.posTransactionType ?? 0);
          fbb.addInt64(41, object.callNumber);
          fbb.addInt64(42, object.giftCard.targetId);
          fbb.addInt64(43, object.paymentStatus);
          fbb.addInt64(44, object.refundStatus);
          fbb.addInt64(45, object.deliveryStatus);
          fbb.addFloat64(46, object.roundingAmount);
          fbb.addFloat64(47, object.tipAmount);
          fbb.addFloat64(48, object.donationAmount);
          fbb.addOffset(49, donationForIdOffset);
          fbb.addOffset(50, supervisorIdOffset);
          fbb.addOffset(51, referenceOffset);
          fbb.addOffset(52, casherNoteOffset);
          fbb.addOffset(53, trackingStatusIdOffset);
          fbb.addOffset(54, couponIdOffset);
          fbb.addOffset(55, createdOnOffset);
          fbb.addOffset(56, createdByOffset);
          fbb.addOffset(57, lastModifiedByOffset);
          fbb.addOffset(58, lastModifiedOnOffset);
          fbb.finish(fbb.endTable());
          return object.posTransactionType ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final timeOfReceiptValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final object = OrderC()
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..invoiceNumber = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..deviceId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..startDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..timeOfReceipt = timeOfReceiptValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(timeOfReceiptValue)
            ..parentOrderId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..splitIndex =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16)
            ..orderRef = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..callName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..orderType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)
            ..orderSource =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)
            ..endTime = endTimeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(endTimeValue)
            ..tableId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 34)
            ..tableCaption = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 36)
            ..numberVistor =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 38)
            ..minimumReservationPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 40)
            ..priceDiscount = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 50)
            ..pricePromotion = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 52)
            ..note = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 54)
            ..kitchenNote = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 56)
            ..msgCansel = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 58)
            ..subTotal =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 60, 0)
            ..checksum = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 62)
            ..masterChecksum = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 64)
            ..serverChecksum = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 66)
            ..totalFee = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 68)
            ..taxPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 70)
            ..totalPaid = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 72)
            ..shiftId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 74)
            ..tillId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 76)
            ..totalCalories = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 78)
            ..totalDiscountForOrderAndProduct = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 80)
            ..priceListId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 82)
            ..posTransactionType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 84)
            ..callNumber =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 86)
            ..paymentStatus =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 90)
            ..refundStatus =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 92)
            ..deliveryStatus =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 94)
            ..roundingAmount = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 96)
            ..tipAmount = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 98)
            ..donationAmount = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 100)
            ..donationForId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 102)
            ..supervisorId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 104)
            ..reference = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 106)
            ..casherNote = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 108)
            ..trackingStatusId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 110)
            ..couponId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 112)
            ..createdOn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 114)
            ..createdBy = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 116)
            ..lastModifiedBy = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 118)
            ..lastModifiedOn = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 120);
          object.deliveryCompanyInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.deliveryCompanyInfo.attach(store);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          object.customer.attach(store);
          object.address.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
          object.address.attach(store);
          object.promotion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0);
          object.promotion.attach(store);
          object.discount.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0);
          object.discount.attach(store);
          object.giftCard.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 88, 0);
          object.giftCard.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<OrderC>(
              object.products,
              store,
              obx_int.RelInfo<OrderC>.toMany(15, object.posTransactionType!));
          obx_int.InternalToManyAccess.setRelInfo<OrderC>(object.fees, store,
              obx_int.RelInfo<OrderC>.toMany(16, object.posTransactionType!));
          obx_int.InternalToManyAccess.setRelInfo<OrderC>(
              object.feeValues,
              store,
              obx_int.RelInfo<OrderC>.toMany(17, object.posTransactionType!));
          obx_int.InternalToManyAccess.setRelInfo<OrderC>(
              object.payments,
              store,
              obx_int.RelInfo<OrderC>.toMany(18, object.posTransactionType!));
          return object;
        }),
    PaymentMethod: obx_int.EntityDefinition<PaymentMethod>(
        model: _entities[44],
        toOneRelations: (PaymentMethod object) => [],
        toManyRelations: (PaymentMethod object) => {},
        getId: (PaymentMethod object) => object.idSeq,
        setId: (PaymentMethod object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PaymentMethod object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          fbb.startTable(11);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addInt64(4, object.paymentType);
          fbb.addInt64(5, object.displayOrder);
          fbb.addBool(6, object.isActive);
          fbb.addBool(7, object.isDeleted);
          fbb.addBool(8, object.autoOpenCashDrawer);
          fbb.addOffset(9, imageUrlOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final paymentTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final displayOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final isActiveParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final isDeletedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final autoOpenCashDrawerParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final object = PaymentMethod(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              paymentType: paymentTypeParam,
              displayOrder: displayOrderParam,
              isActive: isActiveParam,
              isDeleted: isDeletedParam,
              autoOpenCashDrawer: autoOpenCashDrawerParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..imageUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22);

          return object;
        }),
    PaymentValue: obx_int.EntityDefinition<PaymentValue>(
        model: _entities[45],
        toOneRelations: (PaymentValue object) => [object.method],
        toManyRelations: (PaymentValue object) => {},
        getId: (PaymentValue object) => object.idSeq,
        setId: (PaymentValue object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PaymentValue object, fb.Builder fbb) {
          final refreanceOffset = fbb.writeString(object.refreance);
          final currencyCodeOffset = object.currencyCode == null
              ? null
              : fbb.writeString(object.currencyCode!);
          final defaultCurrencyIdOffset = object.defaultCurrencyId == null
              ? null
              : fbb.writeString(object.defaultCurrencyId!);
          fbb.startTable(10);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, refreanceOffset);
          fbb.addInt64(2, object.method.targetId);
          fbb.addFloat64(3, object.amt);
          fbb.addFloat64(4, object.remainAmt);
          fbb.addFloat64(5, object.exchangeRate);
          fbb.addFloat64(6, object.amountCurecny);
          fbb.addOffset(7, currencyCodeOffset);
          fbb.addOffset(8, defaultCurrencyIdOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final amtParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final refreanceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final defaultCurrencyIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final amountCurecnyParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final exchangeRateParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final currencyCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final remainAmtParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = PaymentValue(
              amt: amtParam,
              refreance: refreanceParam,
              defaultCurrencyId: defaultCurrencyIdParam,
              amountCurecny: amountCurecnyParam,
              exchangeRate: exchangeRateParam,
              currencyCode: currencyCodeParam,
              remainAmt: remainAmtParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.method.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.method.attach(store);
          return object;
        }),
    PolicySetting: obx_int.EntityDefinition<PolicySetting>(
        model: _entities[46],
        toOneRelations: (PolicySetting object) => [],
        toManyRelations: (PolicySetting object) => {},
        getId: (PolicySetting object) => object.idSeq,
        setId: (PolicySetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PolicySetting object, fb.Builder fbb) {
          final orderPolicyAROffset = object.orderPolicyAR == null
              ? null
              : fbb.writeString(object.orderPolicyAR!);
          final orderPolicyENOffset = object.orderPolicyEN == null
              ? null
              : fbb.writeString(object.orderPolicyEN!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addBool(1, object.enableOrderCancelation);
          fbb.addBool(2, object.enablePosRefund);
          fbb.addBool(3, object.enableUsingExpiredTicket);
          fbb.addOffset(4, orderPolicyAROffset);
          fbb.addOffset(5, orderPolicyENOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final enableOrderCancelationParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final enablePosRefundParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8);
          final enableUsingExpiredTicketParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final orderPolicyARParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final orderPolicyENParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = PolicySetting(
              enableOrderCancelation: enableOrderCancelationParam,
              enablePosRefund: enablePosRefundParam,
              enableUsingExpiredTicket: enableUsingExpiredTicketParam,
              orderPolicyAR: orderPolicyARParam,
              orderPolicyEN: orderPolicyENParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    PosUser: obx_int.EntityDefinition<PosUser>(
        model: _entities[47],
        toOneRelations: (PosUser object) => [object.cashierSetting],
        toManyRelations: (PosUser object) =>
            {obx_int.RelInfo<PosUser>.toMany(19, object.idSeq!): object.roles},
        getId: (PosUser object) => object.idSeq,
        setId: (PosUser object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PosUser object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          final passwordHashOffset = object.passwordHash == null
              ? null
              : fbb.writeString(object.passwordHash!);
          final pinMD5Offset =
              object.pinMD5 == null ? null : fbb.writeString(object.pinMD5!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final appslanguageCodeOffset = object.appslanguageCode == null
              ? null
              : fbb.writeString(object.appslanguageCode!);
          final appsDataLanguageCodeOffset = object.appsDataLanguageCode == null
              ? null
              : fbb.writeString(object.appsDataLanguageCode!);
          final dashboardlanguageCodeOffset =
              object.dashboardlanguageCode == null
                  ? null
                  : fbb.writeString(object.dashboardlanguageCode!);
          fbb.startTable(14);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, phoneNumberOffset);
          fbb.addOffset(4, passwordHashOffset);
          fbb.addInt64(5, object.pin);
          fbb.addOffset(6, pinMD5Offset);
          fbb.addOffset(7, imageUrlOffset);
          fbb.addOffset(8, orderTypesOffset);
          fbb.addOffset(9, appslanguageCodeOffset);
          fbb.addOffset(10, appsDataLanguageCodeOffset);
          fbb.addOffset(11, dashboardlanguageCodeOffset);
          fbb.addInt64(12, object.cashierSetting.targetId);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final phoneNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final passwordHashParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final pinParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final pinMD5Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final appsDataLanguageCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final appslanguageCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final dashboardlanguageCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final object = PosUser(
              id: idParam,
              name: nameParam,
              phoneNumber: phoneNumberParam,
              passwordHash: passwordHashParam,
              pin: pinParam,
              pinMD5: pinMD5Param,
              imageUrl: imageUrlParam,
              appsDataLanguageCode: appsDataLanguageCodeParam,
              appslanguageCode: appslanguageCodeParam,
              dashboardlanguageCode: dashboardlanguageCodeParam,
              orderTypes: orderTypesParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.cashierSetting.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.cashierSetting.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<PosUser>(object.roles, store,
              obx_int.RelInfo<PosUser>.toMany(19, object.idSeq!));
          return object;
        }),
    PriceList: obx_int.EntityDefinition<PriceList>(
        model: _entities[48],
        toOneRelations: (PriceList object) => [],
        toManyRelations: (PriceList object) => {},
        getId: (PriceList object) => object.idSeq,
        setId: (PriceList object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PriceList object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addBool(4, object.priceIncludeTax);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final priceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12);
          final object = PriceList(
              idSeq: idSeqParam,
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              priceIncludeTax: priceIncludeTaxParam);

          return object;
        }),
    PriceListValue: obx_int.EntityDefinition<PriceListValue>(
        model: _entities[49],
        toOneRelations: (PriceListValue object) => [],
        toManyRelations: (PriceListValue object) => {
              obx_int.RelInfo<PriceListValue>.toMany(20, object.idSeq!):
                  object.slaps
            },
        getId: (PriceListValue object) => object.idSeq,
        setId: (PriceListValue object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PriceListValue object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addFloat64(2, object.price);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final priceParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object =
              PriceListValue(idSeq: idSeqParam, id: idParam, price: priceParam);
          obx_int.InternalToManyAccess.setRelInfo<PriceListValue>(object.slaps,
              store, obx_int.RelInfo<PriceListValue>.toMany(20, object.idSeq!));
          return object;
        }),
    Printer: obx_int.EntityDefinition<Printer>(
        model: _entities[50],
        toOneRelations: (Printer object) => [],
        toManyRelations: (Printer object) => {
              obx_int.RelInfo<Printer>.toMany(21, object.idSeq!):
                  object.settings
            },
        getId: (Printer object) => object.idSeq,
        setId: (Printer object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Printer object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final deviceIdOffset = object.deviceId == null
              ? null
              : fbb.writeString(object.deviceId!);
          final printerModelIdOffset = object.printerModelId == null
              ? null
              : fbb.writeString(object.printerModelId!);
          final ipAddressOffset = object.ipAddress == null
              ? null
              : fbb.writeString(object.ipAddress!);
          final productsOffset = object.products == null
              ? null
              : fbb.writeList(object.products!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final departmentsOffset = object.departments == null
              ? null
              : fbb.writeList(object.departments!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoriesOffset = object.categories == null
              ? null
              : fbb.writeList(object.categories!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          fbb.startTable(16);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, deviceIdOffset);
          fbb.addOffset(5, printerModelIdOffset);
          fbb.addInt64(6, object.connectionType);
          fbb.addOffset(7, ipAddressOffset);
          fbb.addInt64(8, object.printerType);
          fbb.addInt64(9, object.printTo);
          fbb.addInt64(10, object.port);
          fbb.addOffset(11, productsOffset);
          fbb.addOffset(12, departmentsOffset);
          fbb.addOffset(13, categoriesOffset);
          fbb.addOffset(14, orderTypesOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final deviceIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final printerModelIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final connectionTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final ipAddressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final portParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final printerTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final printToParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final object = Printer(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              deviceId: deviceIdParam,
              printerModelId: printerModelIdParam,
              connectionType: connectionTypeParam,
              ipAddress: ipAddressParam,
              port: portParam,
              printerType: printerTypeParam,
              printTo: printToParam,
              orderTypes: orderTypesParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..products = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..departments = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 28)
            ..categories = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 30);
          obx_int.InternalToManyAccess.setRelInfo<Printer>(object.settings,
              store, obx_int.RelInfo<Printer>.toMany(21, object.idSeq!));
          return object;
        }),
    PrinterSetting: obx_int.EntityDefinition<PrinterSetting>(
        model: _entities[51],
        toOneRelations: (PrinterSetting object) => [],
        toManyRelations: (PrinterSetting object) => {},
        getId: (PrinterSetting object) => object.idSeq,
        setId: (PrinterSetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (PrinterSetting object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final printerIdOffset = object.printerId == null
              ? null
              : fbb.writeString(object.printerId!);
          final paperSizeOffset = object.paperSize == null
              ? null
              : fbb.writeString(object.paperSize!);
          final cutterCommandCodeOffset = object.cutterCommandCode == null
              ? null
              : fbb.writeString(object.cutterCommandCode!);
          fbb.startTable(10);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, printerIdOffset);
          fbb.addOffset(3, paperSizeOffset);
          fbb.addInt64(4, object.scale);
          fbb.addInt64(5, object.imageCutterFactor);
          fbb.addOffset(6, cutterCommandCodeOffset);
          fbb.addBool(7, object.autoPrint);
          fbb.addInt64(8, object.numberOfCopy);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final printerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final paperSizeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final scaleParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final imageCutterFactorParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final cutterCommandCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final autoPrintParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final numberOfCopyParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final object = PrinterSetting(
              id: idParam,
              printerId: printerIdParam,
              paperSize: paperSizeParam,
              scale: scaleParam,
              imageCutterFactor: imageCutterFactorParam,
              cutterCommandCode: cutterCommandCodeParam,
              autoPrint: autoPrintParam,
              numberOfCopy: numberOfCopyParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Product1: obx_int.EntityDefinition<Product1>(
        model: _entities[52],
        toOneRelations: (Product1 object) => [],
        toManyRelations: (Product1 object) => {
              obx_int.RelInfo<Product1>.toMany(22, object.idSeq!): object.units,
              obx_int.RelInfo<Product1>.toMany(23, object.idSeq!):
                  object.modifiers,
              obx_int.RelInfo<Product1>.toMany(24, object.idSeq!):
                  object.ingredients,
              obx_int.RelInfo<Product1>.toMany(25, object.idSeq!): object.groups
            },
        getId: (Product1 object) => object.idSeq,
        setId: (Product1 object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Product1 object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final skuOffset =
              object.sku == null ? null : fbb.writeString(object.sku!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          final productTypeIdOffset = object.productTypeId == null
              ? null
              : fbb.writeString(object.productTypeId!);
          final costTypeOffset = object.costType == null
              ? null
              : fbb.writeString(object.costType!);
          final salesMethodOffset = object.salesMethod == null
              ? null
              : fbb.writeString(object.salesMethod!);
          final availableStartDateTimeOffset =
              object.availableStartDateTime == null
                  ? null
                  : fbb.writeString(object.availableStartDateTime!);
          final availableEndDateTimeOffset = object.availableEndDateTime == null
              ? null
              : fbb.writeString(object.availableEndDateTime!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final fDescriptionOffset = object.fDescription == null
              ? null
              : fbb.writeString(object.fDescription!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final categoryIdOffset = object.categoryId == null
              ? null
              : fbb.writeString(object.categoryId!);
          final departmentIdOffset = object.departmentId == null
              ? null
              : fbb.writeString(object.departmentId!);
          final taxGroupIdOffset = object.taxGroupId == null
              ? null
              : fbb.writeString(object.taxGroupId!);
          final subNameOffset =
              object.subName == null ? null : fbb.writeString(object.subName!);
          final fSubNameOffset = object.fSubName == null
              ? null
              : fbb.writeString(object.fSubName!);
          final promotionalNameOffset = object.promotionalName == null
              ? null
              : fbb.writeString(object.promotionalName!);
          final fPromotionalNameOffset = object.fPromotionalName == null
              ? null
              : fbb.writeString(object.fPromotionalName!);
          final tagsOffset =
              object.tags == null ? null : fbb.writeString(object.tags!);
          final fTagsOffset =
              object.fTags == null ? null : fbb.writeString(object.fTags!);
          fbb.startTable(52);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, skuOffset);
          fbb.addOffset(5, barcodeOffset);
          fbb.addOffset(6, productTypeIdOffset);
          fbb.addOffset(7, costTypeOffset);
          fbb.addInt64(8, object.priceType);
          fbb.addOffset(9, salesMethodOffset);
          fbb.addFloat64(10, object.price);
          fbb.addFloat64(11, object.cost);
          fbb.addInt64(12, object.preparationTime);
          fbb.addBool(13, object.activeQRScan);
          fbb.addBool(14, object.qrScanOnSameDate);
          fbb.addBool(15, object.enableSalesDiscount);
          fbb.addFloat64(16, object.discountPercentageLimit);
          fbb.addBool(17, object.enableFreeQuantity);
          fbb.addBool(18, object.enableDateExpire);
          fbb.addBool(19, object.enableIMEISerial);
          fbb.addBool(20, object.enableWeights);
          fbb.addBool(21, object.scanPriceFromScale);
          fbb.addBool(22, object.scalePriceIncludeTax);
          fbb.addBool(23, object.independentPrinting);
          fbb.addBool(24, object.calculateQuantityFromTotalPrice);
          fbb.addBool(25, object.reservationRequired);
          fbb.addInt64(26, object.scaleBarcodeDigits);
          fbb.addInt64(27, object.scaleProductCodeDigits);
          fbb.addInt64(28, object.scaleIntDigits);
          fbb.addInt64(29, object.scaledecimalDigits);
          fbb.addBool(30, object.scaleProductCodeFirstInBracode);
          fbb.addOffset(31, availableStartDateTimeOffset);
          fbb.addOffset(32, availableEndDateTimeOffset);
          fbb.addOffset(33, descriptionOffset);
          fbb.addOffset(34, fDescriptionOffset);
          fbb.addOffset(35, imageUrlOffset);
          fbb.addInt64(36, object.calories);
          fbb.addInt64(37, object.minimumLevel);
          fbb.addInt64(38, object.maximumLevel);
          fbb.addOffset(39, categoryIdOffset);
          fbb.addOffset(40, departmentIdOffset);
          fbb.addInt64(41, object.productNature);
          fbb.addBool(42, object.active);
          fbb.addOffset(43, taxGroupIdOffset);
          fbb.addOffset(44, subNameOffset);
          fbb.addOffset(45, fSubNameOffset);
          fbb.addOffset(46, promotionalNameOffset);
          fbb.addOffset(47, fPromotionalNameOffset);
          fbb.addOffset(48, tagsOffset);
          fbb.addOffset(49, fTagsOffset);
          fbb.addBool(50, object.showAlertPreparationTime);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final skuParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final barcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final productTypeIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final costTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final priceTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final salesMethodParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final costParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final preparationTimeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final activeQRScanParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30);
          final qrScanOnSameDateParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final enableSalesDiscountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final discountPercentageLimitParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 36);
          final enableFreeQuantityParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final enableDateExpireParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final enableIMEISerialParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final enableWeightsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44);
          final scanPriceFromScaleParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 46);
          final scalePriceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final independentPrintingParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 50);
          final calculateQuantityFromTotalPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 52);
          final reservationRequiredParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 54);
          final scaleBarcodeDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 56);
          final scaleProductCodeDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 58);
          final scaleIntDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 60);
          final scaledecimalDigitsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 62);
          final scaleProductCodeFirstInBracodeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 64);
          final availableStartDateTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 66);
          final availableEndDateTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 68);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 70);
          final fDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 72);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 74);
          final caloriesParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 76);
          final minimumLevelParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 78);
          final maximumLevelParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 80);
          final productNatureParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 86);
          final activeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 88);
          final taxGroupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 90);
          final subNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 92);
          final fSubNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 94);
          final promotionalNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 96);
          final fPromotionalNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 98);
          final tagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 100);
          final fTagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 102);
          final showAlertPreparationTimeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 104);
          final object = Product1(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              sku: skuParam,
              barcode: barcodeParam,
              productTypeId: productTypeIdParam,
              costType: costTypeParam,
              priceType: priceTypeParam,
              salesMethod: salesMethodParam,
              price: priceParam,
              cost: costParam,
              preparationTime: preparationTimeParam,
              activeQRScan: activeQRScanParam,
              qrScanOnSameDate: qrScanOnSameDateParam,
              enableSalesDiscount: enableSalesDiscountParam,
              discountPercentageLimit: discountPercentageLimitParam,
              enableFreeQuantity: enableFreeQuantityParam,
              enableDateExpire: enableDateExpireParam,
              enableIMEISerial: enableIMEISerialParam,
              enableWeights: enableWeightsParam,
              scanPriceFromScale: scanPriceFromScaleParam,
              scalePriceIncludeTax: scalePriceIncludeTaxParam,
              independentPrinting: independentPrintingParam,
              calculateQuantityFromTotalPrice:
                  calculateQuantityFromTotalPriceParam,
              reservationRequired: reservationRequiredParam,
              scaleBarcodeDigits: scaleBarcodeDigitsParam,
              scaleProductCodeDigits: scaleProductCodeDigitsParam,
              scaleIntDigits: scaleIntDigitsParam,
              scaledecimalDigits: scaledecimalDigitsParam,
              scaleProductCodeFirstInBracode:
                  scaleProductCodeFirstInBracodeParam,
              availableStartDateTime: availableStartDateTimeParam,
              availableEndDateTime: availableEndDateTimeParam,
              description: descriptionParam,
              fDescription: fDescriptionParam,
              imageUrl: imageUrlParam,
              calories: caloriesParam,
              minimumLevel: minimumLevelParam,
              maximumLevel: maximumLevelParam,
              productNature: productNatureParam,
              active: activeParam,
              taxGroupId: taxGroupIdParam,
              subName: subNameParam,
              fSubName: fSubNameParam,
              promotionalName: promotionalNameParam,
              fPromotionalName: fPromotionalNameParam,
              tags: tagsParam,
              fTags: fTagsParam,
              showAlertPreparationTime: showAlertPreparationTimeParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..categoryId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 82)
            ..departmentId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 84);
          obx_int.InternalToManyAccess.setRelInfo<Product1>(object.units, store,
              obx_int.RelInfo<Product1>.toMany(22, object.idSeq!));
          obx_int.InternalToManyAccess.setRelInfo<Product1>(object.modifiers,
              store, obx_int.RelInfo<Product1>.toMany(23, object.idSeq!));
          obx_int.InternalToManyAccess.setRelInfo<Product1>(object.ingredients,
              store, obx_int.RelInfo<Product1>.toMany(24, object.idSeq!));
          obx_int.InternalToManyAccess.setRelInfo<Product1>(object.groups,
              store, obx_int.RelInfo<Product1>.toMany(25, object.idSeq!));
          return object;
        }),
    ProductPriceList: obx_int.EntityDefinition<ProductPriceList>(
        model: _entities[53],
        toOneRelations: (ProductPriceList object) => [],
        toManyRelations: (ProductPriceList object) => {},
        getId: (ProductPriceList object) => object.idSeq,
        setId: (ProductPriceList object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ProductPriceList object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addFloat64(2, object.price);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final priceParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = ProductPriceList(id: idParam, price: priceParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Promotion: obx_int.EntityDefinition<Promotion>(
        model: _entities[54],
        toOneRelations: (Promotion object) => [],
        toManyRelations: (Promotion object) => {},
        getId: (Promotion object) => object.idSeq,
        setId: (Promotion object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Promotion object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final startTimeOffset = object.startTime == null
              ? null
              : fbb.writeString(object.startTime!);
          final endTimeOffset =
              object.endTime == null ? null : fbb.writeString(object.endTime!);
          final daysOffset =
              object.days == null ? null : fbb.writeListInt64(object.days!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final purchaseProductsOffset = object.purchaseProducts == null
              ? null
              : fbb.writeList(object.purchaseProducts!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final discountProductsOffset = object.discountProducts == null
              ? null
              : fbb.writeList(object.discountProducts!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(23);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, startDateOffset);
          fbb.addOffset(5, endDateOffset);
          fbb.addOffset(6, startTimeOffset);
          fbb.addOffset(7, endTimeOffset);
          fbb.addInt64(8, object.promotionType);
          fbb.addInt64(9, object.discountType);
          fbb.addFloat64(10, object.discountPercentage);
          fbb.addFloat64(11, object.discountAmount);
          fbb.addFloat64(12, object.maximumDiscountAmount);
          fbb.addInt64(13, object.promotionApplyType);
          fbb.addFloat64(14, object.customerQuantity);
          fbb.addFloat64(15, object.customerAmount);
          fbb.addInt64(16, object.promotionApplyToType);
          fbb.addOffset(17, daysOffset);
          fbb.addOffset(18, orderTypesOffset);
          fbb.addOffset(19, purchaseProductsOffset);
          fbb.addOffset(20, discountProductsOffset);
          fbb.addInt64(21, object.priority);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final startTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final endTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final promotionTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final discountTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final discountPercentageParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final discountAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final maximumDiscountAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 28);
          final promotionApplyTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final customerQuantityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 32);
          final customerAmountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 34);
          final promotionApplyToTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 36);
          final daysParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 38);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 40);
          final purchaseProductsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 42);
          final discountProductsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 44);
          final priorityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 46);
          final object = Promotion(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              startDate: startDateParam,
              endDate: endDateParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              promotionType: promotionTypeParam,
              discountType: discountTypeParam,
              discountPercentage: discountPercentageParam,
              discountAmount: discountAmountParam,
              maximumDiscountAmount: maximumDiscountAmountParam,
              promotionApplyType: promotionApplyTypeParam,
              customerQuantity: customerQuantityParam,
              customerAmount: customerAmountParam,
              promotionApplyToType: promotionApplyToTypeParam,
              days: daysParam,
              orderTypes: orderTypesParam,
              purchaseProducts: purchaseProductsParam,
              discountProducts: discountProductsParam,
              priority: priorityParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ReasonsCanceling: obx_int.EntityDefinition<ReasonsCanceling>(
        model: _entities[55],
        toOneRelations: (ReasonsCanceling object) => [],
        toManyRelations: (ReasonsCanceling object) => {},
        getId: (ReasonsCanceling object) => object.idSeq,
        setId: (ReasonsCanceling object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ReasonsCanceling object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = ReasonsCanceling(
              id: idParam, name: nameParam, fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ReasonsDrawerOpen: obx_int.EntityDefinition<ReasonsDrawerOpen>(
        model: _entities[56],
        toOneRelations: (ReasonsDrawerOpen object) => [],
        toManyRelations: (ReasonsDrawerOpen object) => {},
        getId: (ReasonsDrawerOpen object) => object.idSeq,
        setId: (ReasonsDrawerOpen object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ReasonsDrawerOpen object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = ReasonsDrawerOpen(
              id: idParam, name: nameParam, fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ResturantSection: obx_int.EntityDefinition<ResturantSection>(
        model: _entities[57],
        toOneRelations: (ResturantSection object) => [],
        toManyRelations: (ResturantSection object) => {
              obx_int.RelInfo<ResturantSection>.toMany(26, object.idSeq!):
                  object.tables
            },
        getId: (ResturantSection object) => object.idSeq,
        setId: (ResturantSection object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ResturantSection object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = ResturantSection(
              id: idParam, name: nameParam, fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          obx_int.InternalToManyAccess.setRelInfo<ResturantSection>(
              object.tables,
              store,
              obx_int.RelInfo<ResturantSection>.toMany(26, object.idSeq!));
          return object;
        }),
    Roles: obx_int.EntityDefinition<Roles>(
        model: _entities[58],
        toOneRelations: (Roles object) => [],
        toManyRelations: (Roles object) =>
            {obx_int.RelInfo<Roles>.toMany(27, object.idSeq!): object.claims},
        getId: (Roles object) => object.idSeq,
        setId: (Roles object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Roles object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Roles(id: idParam, name: nameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          obx_int.InternalToManyAccess.setRelInfo<Roles>(object.claims, store,
              obx_int.RelInfo<Roles>.toMany(27, object.idSeq!));
          return object;
        }),
    SalesInvoiceTemplates: obx_int.EntityDefinition<SalesInvoiceTemplates>(
        model: _entities[59],
        toOneRelations: (SalesInvoiceTemplates object) => [],
        toManyRelations: (SalesInvoiceTemplates object) => {},
        getId: (SalesInvoiceTemplates object) => object.idSeq,
        setId: (SalesInvoiceTemplates object, int id) {
          object.idSeq = id;
        },
        objectToFB: (SalesInvoiceTemplates object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final printedTitleOffset = object.printedTitle == null
              ? null
              : fbb.writeString(object.printedTitle!);
          final fPrintedTitleOffset = object.fPrintedTitle == null
              ? null
              : fbb.writeString(object.fPrintedTitle!);
          final headerInvoiceMessageOffset = object.headerInvoiceMessage == null
              ? null
              : fbb.writeString(object.headerInvoiceMessage!);
          final fHeaderInvoiceMessageOffset =
              object.fHeaderInvoiceMessage == null
                  ? null
                  : fbb.writeString(object.fHeaderInvoiceMessage!);
          final footerInvoiceMessageOffset = object.footerInvoiceMessage == null
              ? null
              : fbb.writeString(object.footerInvoiceMessage!);
          final fFooterInvoiceMessageOffset =
              object.fFooterInvoiceMessage == null
                  ? null
                  : fbb.writeString(object.fFooterInvoiceMessage!);
          final printLanguageOffset = object.printLanguage == null
              ? null
              : fbb.writeString(object.printLanguage!);
          final printerPaperSizeOffset = object.printerPaperSize == null
              ? null
              : fbb.writeString(object.printerPaperSize!);
          final printerPaperDirectionOffset =
              object.printerPaperDirection == null
                  ? null
                  : fbb.writeString(object.printerPaperDirection!);
          final invoiceCategoryOffset = object.invoiceCategory == null
              ? null
              : fbb.writeString(object.invoiceCategory!);
          final defaultLanguageOffset = object.defaultLanguage == null
              ? null
              : fbb.writeString(object.defaultLanguage!);
          final secondLanguageOffset = object.secondLanguage == null
              ? null
              : fbb.writeString(object.secondLanguage!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final usersOffset = object.users == null
              ? null
              : fbb.writeList(
                  object.users!.map(fbb.writeString).toList(growable: false));
          final defaultCodeOffset = object.defaultCode == null
              ? null
              : fbb.writeString(object.defaultCode!);
          final secondCodeOffset = object.secondCode == null
              ? null
              : fbb.writeString(object.secondCode!);
          final pointsMessageOffset = object.pointsMessage == null
              ? null
              : fbb.writeString(object.pointsMessage!);
          final fPointsMessageOffset = object.fPointsMessage == null
              ? null
              : fbb.writeString(object.fPointsMessage!);
          fbb.startTable(52);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, printedTitleOffset);
          fbb.addOffset(5, fPrintedTitleOffset);
          fbb.addOffset(6, headerInvoiceMessageOffset);
          fbb.addOffset(7, fHeaderInvoiceMessageOffset);
          fbb.addOffset(8, footerInvoiceMessageOffset);
          fbb.addOffset(9, fFooterInvoiceMessageOffset);
          fbb.addBool(10, object.printCompanyName);
          fbb.addBool(11, object.printBranchName);
          fbb.addBool(12, object.printCRNo);
          fbb.addBool(13, object.printBankAccount);
          fbb.addBool(14, object.printTaxNumber);
          fbb.addBool(15, object.printPaymentType);
          fbb.addBool(16, object.printOrderType);
          fbb.addBool(17, object.printOrderNumber);
          fbb.addBool(18, object.printUnitSize);
          fbb.addBool(19, object.printProductSecondaryName);
          fbb.addBool(20, object.printCalories);
          fbb.addBool(21, object.printSubTotal);
          fbb.addBool(22, object.printRoundDigit);
          fbb.addBool(23, object.printProductUnit);
          fbb.addBool(24, object.printProductUnitPrice);
          fbb.addBool(25, object.printProductTotalPrice);
          fbb.addBool(26, object.printProductDiscountPrice);
          fbb.addBool(27, object.printProductFreeQuantity);
          fbb.addBool(28, object.printProductTotalPriceBeforeTax);
          fbb.addBool(29, object.printProductTaxAmount);
          fbb.addBool(30, object.printProductTaxPercentage);
          fbb.addBool(31, object.printProductTotalPriceAfterDiscount);
          fbb.addBool(32, object.printProductTotalPriceIncludeTax);
          fbb.addBool(33, object.printOrderClosedUser);
          fbb.addBool(34, object.printOrderCreatedUser);
          fbb.addBool(35, object.printCheckNumber);
          fbb.addBool(36, object.hideFreeModifierOptions);
          fbb.addBool(37, object.autoPrintOnSave);
          fbb.addOffset(38, printLanguageOffset);
          fbb.addOffset(39, printerPaperSizeOffset);
          fbb.addOffset(40, printerPaperDirectionOffset);
          fbb.addOffset(41, invoiceCategoryOffset);
          fbb.addOffset(42, defaultLanguageOffset);
          fbb.addOffset(43, secondLanguageOffset);
          fbb.addOffset(44, orderTypesOffset);
          fbb.addOffset(45, usersOffset);
          fbb.addOffset(46, defaultCodeOffset);
          fbb.addOffset(47, secondCodeOffset);
          fbb.addOffset(48, pointsMessageOffset);
          fbb.addOffset(49, fPointsMessageOffset);
          fbb.addBool(50, object.printCustomerPoints);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final headerInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final fHeaderInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final footerInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final fFooterInvoiceMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final printCompanyNameParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final printBranchNameParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final printCRNoParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);
          final printBankAccountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30);
          final printTaxNumberParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final printPaymentTypeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final printOrderTypeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final printOrderNumberParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final printUnitSizeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final printProductSecondaryNameParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final printCaloriesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44);
          final printSubTotalParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 46);
          final printRoundDigitParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final printProductUnitParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 50);
          final printProductUnitPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 52);
          final printProductTotalPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 54);
          final printProductDiscountPriceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 56);
          final printProductFreeQuantityParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 58);
          final printProductTotalPriceBeforeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 60);
          final printProductTaxAmountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 62);
          final printProductTaxPercentageParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 64);
          final printProductTotalPriceAfterDiscountParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 66);
          final printProductTotalPriceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 68);
          final printOrderClosedUserParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 70);
          final printOrderCreatedUserParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 72);
          final printCheckNumberParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 74);
          final hideFreeModifierOptionsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 76);
          final autoPrintOnSaveParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 78);
          final printLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 80);
          final printerPaperSizeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 82);
          final printerPaperDirectionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 84);
          final invoiceCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 86);
          final defaultLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 88);
          final secondLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 90);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 92);
          final usersParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 94);
          final printedTitleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final fPrintedTitleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final defaultCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 96);
          final secondCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 98);
          final pointsMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 100);
          final fPointsMessageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 102);
          final printCustomerPointsParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 104);
          final object = SalesInvoiceTemplates(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              headerInvoiceMessage: headerInvoiceMessageParam,
              fHeaderInvoiceMessage: fHeaderInvoiceMessageParam,
              footerInvoiceMessage: footerInvoiceMessageParam,
              fFooterInvoiceMessage: fFooterInvoiceMessageParam,
              printCompanyName: printCompanyNameParam,
              printBranchName: printBranchNameParam,
              printCRNo: printCRNoParam,
              printBankAccount: printBankAccountParam,
              printTaxNumber: printTaxNumberParam,
              printPaymentType: printPaymentTypeParam,
              printOrderType: printOrderTypeParam,
              printOrderNumber: printOrderNumberParam,
              printUnitSize: printUnitSizeParam,
              printProductSecondaryName: printProductSecondaryNameParam,
              printCalories: printCaloriesParam,
              printSubTotal: printSubTotalParam,
              printRoundDigit: printRoundDigitParam,
              printProductUnit: printProductUnitParam,
              printProductUnitPrice: printProductUnitPriceParam,
              printProductTotalPrice: printProductTotalPriceParam,
              printProductDiscountPrice: printProductDiscountPriceParam,
              printProductFreeQuantity: printProductFreeQuantityParam,
              printProductTotalPriceBeforeTax:
                  printProductTotalPriceBeforeTaxParam,
              printProductTaxAmount: printProductTaxAmountParam,
              printProductTaxPercentage: printProductTaxPercentageParam,
              printProductTotalPriceAfterDiscount:
                  printProductTotalPriceAfterDiscountParam,
              printProductTotalPriceIncludeTax:
                  printProductTotalPriceIncludeTaxParam,
              printOrderClosedUser: printOrderClosedUserParam,
              printOrderCreatedUser: printOrderCreatedUserParam,
              printCheckNumber: printCheckNumberParam,
              hideFreeModifierOptions: hideFreeModifierOptionsParam,
              autoPrintOnSave: autoPrintOnSaveParam,
              printLanguage: printLanguageParam,
              printerPaperSize: printerPaperSizeParam,
              printerPaperDirection: printerPaperDirectionParam,
              invoiceCategory: invoiceCategoryParam,
              defaultLanguage: defaultLanguageParam,
              secondLanguage: secondLanguageParam,
              orderTypes: orderTypesParam,
              users: usersParam,
              printedTitle: printedTitleParam,
              fPrintedTitle: fPrintedTitleParam,
              defaultCode: defaultCodeParam,
              secondCode: secondCodeParam,
              pointsMessage: pointsMessageParam,
              fPointsMessage: fPointsMessageParam,
              printCustomerPoints: printCustomerPointsParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    SalesInvoiceTemplatesA4: obx_int.EntityDefinition<SalesInvoiceTemplatesA4>(
        model: _entities[60],
        toOneRelations: (SalesInvoiceTemplatesA4 object) => [],
        toManyRelations: (SalesInvoiceTemplatesA4 object) => {},
        getId: (SalesInvoiceTemplatesA4 object) => object.idSeq,
        setId: (SalesInvoiceTemplatesA4 object, int id) {
          object.idSeq = id;
        },
        objectToFB: (SalesInvoiceTemplatesA4 object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final menuNameOffset = object.menuName == null
              ? null
              : fbb.writeString(object.menuName!);
          final fMenuNameOffset = object.fMenuName == null
              ? null
              : fbb.writeString(object.fMenuName!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final fTitleOffset =
              object.fTitle == null ? null : fbb.writeString(object.fTitle!);
          final appsFormPathOffset = object.appsFormPath == null
              ? null
              : fbb.writeString(object.appsFormPath!);
          fbb.startTable(12);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, menuNameOffset);
          fbb.addOffset(5, fMenuNameOffset);
          fbb.addOffset(6, titleOffset);
          fbb.addOffset(7, fTitleOffset);
          fbb.addInt64(8, object.printLanguage);
          fbb.addInt64(9, object.invoiceCategory);
          fbb.addOffset(10, appsFormPathOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final menuNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final fMenuNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final fTitleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final printLanguageParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final invoiceCategoryParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final appsFormPathParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final object = SalesInvoiceTemplatesA4(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              menuName: menuNameParam,
              fMenuName: fMenuNameParam,
              title: titleParam,
              fTitle: fTitleParam,
              printLanguage: printLanguageParam,
              invoiceCategory: invoiceCategoryParam,
              appsFormPath: appsFormPathParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Shift: obx_int.EntityDefinition<Shift>(
        model: _entities[61],
        toOneRelations: (Shift object) => [],
        toManyRelations: (Shift object) => {},
        getId: (Shift object) => object.id,
        setId: (Shift object, int id) {
          object.id = id;
        },
        objectToFB: (Shift object, fb.Builder fbb) {
          final shiftIdOffset =
              object.shiftId == null ? null : fbb.writeString(object.shiftId!);
          final referenceOffset = object.reference == null
              ? null
              : fbb.writeString(object.reference!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final userNameOffset = object.userName == null
              ? null
              : fbb.writeString(object.userName!);
          final branchNameOffset = object.branchName == null
              ? null
              : fbb.writeString(object.branchName!);
          final clockedInDateAtOffset = object.clockedInDateAt == null
              ? null
              : fbb.writeString(object.clockedInDateAt!);
          final clockedInTimeAtOffset = object.clockedInTimeAt == null
              ? null
              : fbb.writeString(object.clockedInTimeAt!);
          final clockedOutDateAtOffset = object.clockedOutDateAt == null
              ? null
              : fbb.writeString(object.clockedOutDateAt!);
          final clockedOutTimeAtOffset = object.clockedOutTimeAt == null
              ? null
              : fbb.writeString(object.clockedOutTimeAt!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, shiftIdOffset);
          fbb.addOffset(2, referenceOffset);
          fbb.addOffset(3, userIdOffset);
          fbb.addOffset(4, userNameOffset);
          fbb.addOffset(5, branchNameOffset);
          fbb.addOffset(6, clockedInDateAtOffset);
          fbb.addOffset(7, clockedInTimeAtOffset);
          fbb.addOffset(8, clockedOutDateAtOffset);
          fbb.addOffset(9, clockedOutTimeAtOffset);
          fbb.addBool(10, object.isClockedOut);
          fbb.addBool(11, object.isSync);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final referenceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final shiftIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final branchNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final clockedInDateAtParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final clockedInTimeAtParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final clockedOutDateAtParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final clockedOutTimeAtParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final isClockedOutParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final isSyncParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final object = Shift(
              id: idParam,
              reference: referenceParam,
              shiftId: shiftIdParam,
              userId: userIdParam,
              userName: userNameParam,
              branchName: branchNameParam,
              clockedInDateAt: clockedInDateAtParam,
              clockedInTimeAt: clockedInTimeAtParam,
              clockedOutDateAt: clockedOutDateAtParam,
              clockedOutTimeAt: clockedOutTimeAtParam,
              isClockedOut: isClockedOutParam,
              isSync: isSyncParam);

          return object;
        }),
    Slaps: obx_int.EntityDefinition<Slaps>(
        model: _entities[62],
        toOneRelations: (Slaps object) => [],
        toManyRelations: (Slaps object) => {},
        getId: (Slaps object) => object.idSeq,
        setId: (Slaps object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Slaps object, fb.Builder fbb) {
          final timeEventIdOffset = object.timeEventId == null
              ? null
              : fbb.writeString(object.timeEventId!);
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addFloat64(1, object.from);
          fbb.addFloat64(2, object.to);
          fbb.addFloat64(3, object.price);
          fbb.addOffset(4, timeEventIdOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final fromParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final toParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Slaps(from: fromParam, to: toParam, price: priceParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..timeEventId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12);

          return object;
        }),
    Table: obx_int.EntityDefinition<Table>(
        model: _entities[63],
        toOneRelations: (Table object) => [],
        toManyRelations: (Table object) => {},
        getId: (Table object) => object.idSeq,
        setId: (Table object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Table object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final tableCodeOffset = object.tableCode == null
              ? null
              : fbb.writeString(object.tableCode!);
          fbb.startTable(11);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.tableNumber);
          fbb.addOffset(3, tableCodeOffset);
          fbb.addInt64(4, object.numberOfIndividuals);
          fbb.addFloat64(5, object.minumumReservationPrice);
          fbb.addInt64(6, object.status);
          fbb.addInt64(7, object.shape);
          fbb.addInt64(8, object.offsetX);
          fbb.addInt64(9, object.offsetY);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final tableNumberParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final tableCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final numberOfIndividualsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final minumumReservationPriceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final statusParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final shapeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final offsetXParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final offsetYParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final object = Table(
              id: idParam,
              tableNumber: tableNumberParam,
              tableCode: tableCodeParam,
              numberOfIndividuals: numberOfIndividualsParam,
              minumumReservationPrice: minumumReservationPriceParam,
              status: statusParam,
              shape: shapeParam,
              offsetX: offsetXParam,
              offsetY: offsetYParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    TaxC: obx_int.EntityDefinition<TaxC>(
        model: _entities[64],
        toOneRelations: (TaxC object) => [],
        toManyRelations: (TaxC object) =>
            {obx_int.RelInfo<TaxC>.toMany(28, object.idSeq!): object.periods},
        getId: (TaxC object) => object.idSeq,
        setId: (TaxC object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TaxC object, fb.Builder fbb) {
          final taxNameOffset =
              object.taxName == null ? null : fbb.writeString(object.taxName!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final taxCodeOffset =
              object.taxCode == null ? null : fbb.writeString(object.taxCode!);
          final taxAccountOffset = object.taxAccount == null
              ? null
              : fbb.writeString(object.taxAccount!);
          final exceptCustomersOffset = object.exceptCustomers == null
              ? null
              : fbb.writeList(object.exceptCustomers!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(14);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, taxNameOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, idOffset);
          fbb.addFloat64(5, object.taxPercentage);
          fbb.addBool(6, object.customerTaxable);
          fbb.addOffset(7, orderTypesOffset);
          fbb.addOffset(8, taxCodeOffset);
          fbb.addOffset(9, taxAccountOffset);
          fbb.addBool(10, object.isTaxExempt);
          fbb.addBool(11, object.zeroTax);
          fbb.addOffset(12, exceptCustomersOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final taxNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final taxPercentageParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final customerTaxableParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final exceptCustomersParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 28);
          final taxAccountParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final taxCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = TaxC(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              taxName: taxNameParam,
              taxPercentage: taxPercentageParam,
              orderTypes: orderTypesParam,
              customerTaxable: customerTaxableParam,
              exceptCustomers: exceptCustomersParam,
              taxAccount: taxAccountParam,
              taxCode: taxCodeParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..isTaxExempt =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24)
            ..zeroTax =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          obx_int.InternalToManyAccess.setRelInfo<TaxC>(object.periods, store,
              obx_int.RelInfo<TaxC>.toMany(28, object.idSeq!));
          return object;
        }),
    TaxGroup: obx_int.EntityDefinition<TaxGroup>(
        model: _entities[65],
        toOneRelations: (TaxGroup object) => [],
        toManyRelations: (TaxGroup object) => {},
        getId: (TaxGroup object) => object.idSeq,
        setId: (TaxGroup object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TaxGroup object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final typesOffset = object.types == null
              ? null
              : fbb.writeList(
                  object.types!.map(fbb.writeString).toList(growable: false));
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, typesOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final idSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final typesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = TaxGroup(
              id: idParam,
              idSeq: idSeqParam,
              types: typesParam,
              name: nameParam,
              fName: fNameParam);

          return object;
        }),
    TaxInfo: obx_int.EntityDefinition<TaxInfo>(
        model: _entities[66],
        toOneRelations: (TaxInfo object) => [],
        toManyRelations: (TaxInfo object) => {},
        getId: (TaxInfo object) => object.idSeq,
        setId: (TaxInfo object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TaxInfo object, fb.Builder fbb) {
          final taxGroupIdOffset = object.taxGroupId == null
              ? null
              : fbb.writeString(object.taxGroupId!);
          fbb.startTable(4);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, taxGroupIdOffset);
          fbb.addFloat64(2, object.value);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final taxGroupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final valueParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = TaxInfo(taxGroupId: taxGroupIdParam, value: valueParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    TaxPeriod: obx_int.EntityDefinition<TaxPeriod>(
        model: _entities[67],
        toOneRelations: (TaxPeriod object) => [],
        toManyRelations: (TaxPeriod object) => {},
        getId: (TaxPeriod object) => object.idSeq,
        setId: (TaxPeriod object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TaxPeriod object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          fbb.startTable(7);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, startDateOffset);
          fbb.addOffset(5, endDateOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = TaxPeriod(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              startDate: startDateParam,
              endDate: endDateParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    TaxSetting: obx_int.EntityDefinition<TaxSetting>(
        model: _entities[68],
        toOneRelations: (TaxSetting object) => [],
        toManyRelations: (TaxSetting object) => {},
        getId: (TaxSetting object) => object.idSeq,
        setId: (TaxSetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TaxSetting object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addBool(1, object.enableSalesTax);
          fbb.addBool(2, object.salesPriceIncludeTax);
          fbb.addBool(3, object.enableCustomerSupplierTax);
          fbb.addFloat64(4, object.taxRoundFactor);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final enableSalesTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final salesPriceIncludeTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8);
          final enableCustomerSupplierTaxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final taxRoundFactorParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = TaxSetting(
              enableSalesTax: enableSalesTaxParam,
              salesPriceIncludeTax: salesPriceIncludeTaxParam,
              enableCustomerSupplierTax: enableCustomerSupplierTaxParam,
              taxRoundFactor: taxRoundFactorParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    TenantSetting: obx_int.EntityDefinition<TenantSetting>(
        model: _entities[69],
        toOneRelations: (TenantSetting object) => [],
        toManyRelations: (TenantSetting object) => {},
        getId: (TenantSetting object) => object.idSeq,
        setId: (TenantSetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TenantSetting object, fb.Builder fbb) {
          final logoUrlOffset =
              object.logoUrl == null ? null : fbb.writeString(object.logoUrl!);
          final companyNameOffset = object.companyName == null
              ? null
              : fbb.writeString(object.companyName!);
          final fCompanyNameOffset = object.fCompanyName == null
              ? null
              : fbb.writeString(object.fCompanyName!);
          final activityOffset = object.activity == null
              ? null
              : fbb.writeString(object.activity!);
          final fActivityOffset = object.fActivity == null
              ? null
              : fbb.writeString(object.fActivity!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          final faxNumberOffset = object.faxNumber == null
              ? null
              : fbb.writeString(object.faxNumber!);
          final webSiteOffset =
              object.webSite == null ? null : fbb.writeString(object.webSite!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final taxRegistrationNameOffset = object.taxRegistrationName == null
              ? null
              : fbb.writeString(object.taxRegistrationName!);
          final crNoOffset =
              object.crNo == null ? null : fbb.writeString(object.crNo!);
          final taxNoOffset =
              object.taxNo == null ? null : fbb.writeString(object.taxNo!);
          final zakatRegistrationNumberOffset =
              object.zakatRegistrationNumber == null
                  ? null
                  : fbb.writeString(object.zakatRegistrationNumber!);
          final municipalLicenseNumberOffset =
              object.municipalLicenseNumber == null
                  ? null
                  : fbb.writeString(object.municipalLicenseNumber!);
          final gulfCouncilIdentificationNumberOffset =
              object.gulfCouncilIdentificationNumber == null
                  ? null
                  : fbb.writeString(object.gulfCouncilIdentificationNumber!);
          final sagiALicenseNumberOffset = object.sagiALicenseNumber == null
              ? null
              : fbb.writeString(object.sagiALicenseNumber!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          final postalCodeOffset = object.postalCode == null
              ? null
              : fbb.writeString(object.postalCode!);
          final provinceOffset = object.province == null
              ? null
              : fbb.writeString(object.province!);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final districtOffset = object.district == null
              ? null
              : fbb.writeString(object.district!);
          final streetOffset =
              object.street == null ? null : fbb.writeString(object.street!);
          final fProvinceOffset = object.fProvince == null
              ? null
              : fbb.writeString(object.fProvince!);
          final fCityOffset =
              object.fCity == null ? null : fbb.writeString(object.fCity!);
          final fDistrictOffset = object.fDistrict == null
              ? null
              : fbb.writeString(object.fDistrict!);
          final fStreetOffset =
              object.fStreet == null ? null : fbb.writeString(object.fStreet!);
          final buildingNoOffset = object.buildingNo == null
              ? null
              : fbb.writeString(object.buildingNo!);
          final floorNoOffset =
              object.floorNo == null ? null : fbb.writeString(object.floorNo!);
          final officeNoOffset = object.officeNo == null
              ? null
              : fbb.writeString(object.officeNo!);
          final additionalNoOffset = object.additionalNo == null
              ? null
              : fbb.writeString(object.additionalNo!);
          final localCurrencyIdOffset = object.localCurrencyId == null
              ? null
              : fbb.writeString(object.localCurrencyId!);
          final salesPriceCurrencyIdOffset = object.salesPriceCurrencyId == null
              ? null
              : fbb.writeString(object.salesPriceCurrencyId!);
          final inventoryCostCurrencyIdOffset =
              object.inventoryCostCurrencyId == null
                  ? null
                  : fbb.writeString(object.inventoryCostCurrencyId!);
          final payrollCurrencyIdOffset = object.payrollCurrencyId == null
              ? null
              : fbb.writeString(object.payrollCurrencyId!);
          final defaultLanguageOffset = object.defaultLanguage == null
              ? null
              : fbb.writeString(object.defaultLanguage!);
          final secondLanguageOffset = object.secondLanguage == null
              ? null
              : fbb.writeString(object.secondLanguage!);
          fbb.startTable(42);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, logoUrlOffset);
          fbb.addOffset(2, companyNameOffset);
          fbb.addOffset(3, fCompanyNameOffset);
          fbb.addOffset(4, activityOffset);
          fbb.addOffset(5, fActivityOffset);
          fbb.addOffset(6, phoneNumberOffset);
          fbb.addOffset(7, faxNumberOffset);
          fbb.addOffset(8, webSiteOffset);
          fbb.addOffset(9, emailOffset);
          fbb.addOffset(10, taxRegistrationNameOffset);
          fbb.addOffset(11, crNoOffset);
          fbb.addOffset(12, taxNoOffset);
          fbb.addOffset(13, zakatRegistrationNumberOffset);
          fbb.addOffset(14, municipalLicenseNumberOffset);
          fbb.addOffset(15, gulfCouncilIdentificationNumberOffset);
          fbb.addOffset(16, sagiALicenseNumberOffset);
          fbb.addOffset(17, countryOffset);
          fbb.addOffset(18, postalCodeOffset);
          fbb.addOffset(19, provinceOffset);
          fbb.addOffset(20, cityOffset);
          fbb.addOffset(21, districtOffset);
          fbb.addOffset(22, streetOffset);
          fbb.addOffset(23, fProvinceOffset);
          fbb.addOffset(24, fCityOffset);
          fbb.addOffset(25, fDistrictOffset);
          fbb.addOffset(26, fStreetOffset);
          fbb.addOffset(27, buildingNoOffset);
          fbb.addOffset(28, floorNoOffset);
          fbb.addOffset(29, officeNoOffset);
          fbb.addOffset(30, additionalNoOffset);
          fbb.addInt64(31, object.invoiceRoundFactor);
          fbb.addOffset(32, localCurrencyIdOffset);
          fbb.addOffset(33, salesPriceCurrencyIdOffset);
          fbb.addOffset(34, inventoryCostCurrencyIdOffset);
          fbb.addOffset(35, payrollCurrencyIdOffset);
          fbb.addInt64(36, object.inventoryCalculateCostMethod);
          fbb.addInt64(37, object.stockInventoryType);
          fbb.addInt64(38, object.printLanguage);
          fbb.addOffset(39, defaultLanguageOffset);
          fbb.addOffset(40, secondLanguageOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final logoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final companyNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final fCompanyNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final activityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final fActivityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final phoneNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final faxNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final webSiteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final taxRegistrationNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final crNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final taxNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final zakatRegistrationNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final municipalLicenseNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final gulfCouncilIdentificationNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34);
          final sagiALicenseNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final countryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final postalCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final provinceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 44);
          final districtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 46);
          final streetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 48);
          final fProvinceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 50);
          final fCityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 52);
          final fDistrictParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 54);
          final fStreetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 56);
          final buildingNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 58);
          final floorNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 60);
          final officeNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 62);
          final additionalNoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 64);
          final invoiceRoundFactorParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 66);
          final localCurrencyIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 68);
          final salesPriceCurrencyIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 70);
          final inventoryCostCurrencyIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 72);
          final payrollCurrencyIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 74);
          final inventoryCalculateCostMethodParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 76);
          final stockInventoryTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 78);
          final printLanguageParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 80);
          final defaultLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 82);
          final secondLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 84);
          final object = TenantSetting(
              logoUrl: logoUrlParam,
              companyName: companyNameParam,
              fCompanyName: fCompanyNameParam,
              activity: activityParam,
              fActivity: fActivityParam,
              phoneNumber: phoneNumberParam,
              faxNumber: faxNumberParam,
              webSite: webSiteParam,
              email: emailParam,
              taxRegistrationName: taxRegistrationNameParam,
              crNo: crNoParam,
              taxNo: taxNoParam,
              zakatRegistrationNumber: zakatRegistrationNumberParam,
              municipalLicenseNumber: municipalLicenseNumberParam,
              gulfCouncilIdentificationNumber:
                  gulfCouncilIdentificationNumberParam,
              sagiALicenseNumber: sagiALicenseNumberParam,
              country: countryParam,
              postalCode: postalCodeParam,
              province: provinceParam,
              city: cityParam,
              district: districtParam,
              street: streetParam,
              fProvince: fProvinceParam,
              fCity: fCityParam,
              fDistrict: fDistrictParam,
              fStreet: fStreetParam,
              buildingNo: buildingNoParam,
              floorNo: floorNoParam,
              officeNo: officeNoParam,
              additionalNo: additionalNoParam,
              invoiceRoundFactor: invoiceRoundFactorParam,
              localCurrencyId: localCurrencyIdParam,
              salesPriceCurrencyId: salesPriceCurrencyIdParam,
              inventoryCostCurrencyId: inventoryCostCurrencyIdParam,
              payrollCurrencyId: payrollCurrencyIdParam,
              inventoryCalculateCostMethod: inventoryCalculateCostMethodParam,
              stockInventoryType: stockInventoryTypeParam,
              printLanguage: printLanguageParam,
              defaultLanguage: defaultLanguageParam,
              secondLanguage: secondLanguageParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ThrowbackInfo: obx_int.EntityDefinition<ThrowbackInfo>(
        model: _entities[70],
        toOneRelations: (ThrowbackInfo object) => [],
        toManyRelations: (ThrowbackInfo object) => {},
        getId: (ThrowbackInfo object) => object.idSeq,
        setId: (ThrowbackInfo object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ThrowbackInfo object, fb.Builder fbb) {
          final productRefOffset = object.productRef == null
              ? null
              : fbb.writeString(object.productRef!);
          final refOffset =
              object.ref == null ? null : fbb.writeString(object.ref!);
          fbb.startTable(6);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, productRefOffset);
          fbb.addFloat64(2, object.quantity);
          fbb.addBool(3, object.isWaste);
          fbb.addOffset(4, refOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final refParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final productRefParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final isWasteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = ThrowbackInfo(
              ref: refParam,
              productRef: productRefParam,
              quantity: quantityParam,
              isWaste: isWasteParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    TimeEvent: obx_int.EntityDefinition<TimeEvent>(
        model: _entities[71],
        toOneRelations: (TimeEvent object) => [],
        toManyRelations: (TimeEvent object) => {},
        getId: (TimeEvent object) => object.idSeq,
        setId: (TimeEvent object, int id) {
          object.idSeq = id;
        },
        objectToFB: (TimeEvent object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final startTimeOffset = object.startTime == null
              ? null
              : fbb.writeString(object.startTime!);
          final endTimeOffset =
              object.endTime == null ? null : fbb.writeString(object.endTime!);
          final daysOffset =
              object.days == null ? null : fbb.writeListInt64(object.days!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final productsOffset = object.products == null
              ? null
              : fbb.writeList(object.products!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final customersOffset = object.customers == null
              ? null
              : fbb.writeList(object.customers!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final departmentsOffset = object.departments == null
              ? null
              : fbb.writeList(object.departments!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoriesOffset = object.categories == null
              ? null
              : fbb.writeList(object.categories!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(18);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addInt64(4, object.timeEventType);
          fbb.addFloat64(5, object.timeEventValue);
          fbb.addOffset(6, startDateOffset);
          fbb.addOffset(7, endDateOffset);
          fbb.addOffset(8, startTimeOffset);
          fbb.addOffset(9, endTimeOffset);
          fbb.addOffset(10, daysOffset);
          fbb.addOffset(11, orderTypesOffset);
          fbb.addOffset(12, productsOffset);
          fbb.addOffset(13, customersOffset);
          fbb.addOffset(14, departmentsOffset);
          fbb.addOffset(15, categoriesOffset);
          fbb.addInt64(16, object.priority);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final timeEventTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final timeEventValueParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final startTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final endTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final daysParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final productsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 28);
          final object = TimeEvent(
              id: idParam,
              name: nameParam,
              fName: fNameParam,
              timeEventType: timeEventTypeParam,
              timeEventValue: timeEventValueParam,
              startDate: startDateParam,
              endDate: endDateParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              days: daysParam,
              orderTypes: orderTypesParam,
              products: productsParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..customers = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..departments = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 32)
            ..categories = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 34)
            ..priority =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);

          return object;
        }),
    Transaction: obx_int.EntityDefinition<Transaction>(
        model: _entities[72],
        toOneRelations: (Transaction object) => [],
        toManyRelations: (Transaction object) => {},
        getId: (Transaction object) => object.idSeq,
        setId: (Transaction object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final refIdOffset =
              object.refId == null ? null : fbb.writeString(object.refId!);
          final toAcountOffset = object.toAcount == null
              ? null
              : fbb.writeString(object.toAcount!);
          final createByOffset = object.createBy == null
              ? null
              : fbb.writeString(object.createBy!);
          final dateOffset =
              object.date == null ? null : fbb.writeString(object.date!);
          fbb.startTable(8);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, refIdOffset);
          fbb.addOffset(3, toAcountOffset);
          fbb.addFloat64(4, object.amt);
          fbb.addOffset(5, createByOffset);
          fbb.addOffset(6, dateOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final refIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final toAcountParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final amtParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final createByParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = Transaction(
              id: idParam,
              refId: refIdParam,
              toAcount: toAcountParam,
              amt: amtParam,
              createBy: createByParam,
              date: dateParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Unit: obx_int.EntityDefinition<Unit>(
        model: _entities[73],
        toOneRelations: (Unit object) => [],
        toManyRelations: (Unit object) => {
              obx_int.RelInfo<Unit>.toMany(29, object.idSeq!): object.priceList,
              obx_int.RelInfo<Unit>.toMany(30, object.idSeq!): object.modifiers
            },
        getId: (Unit object) => object.idSeq,
        setId: (Unit object, int id) {
          object.idSeq = id;
        },
        objectToFB: (Unit object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          fbb.startTable(14);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, fNameOffset);
          fbb.addOffset(4, barcodeOffset);
          fbb.addFloat64(5, object.price);
          fbb.addFloat64(6, object.cost);
          fbb.addFloat64(7, object.factor);
          fbb.addBool(8, object.defaultForSales);
          fbb.addBool(9, object.defaultForPurchase);
          fbb.addBool(10, object.defaultForStore);
          fbb.addBool(11, object.showAlertPreparationTime);
          fbb.addInt64(12, object.priceType);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final barcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final priceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final costParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final factorParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final defaultForSalesParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final defaultForPurchaseParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          final defaultForStoreParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final showAlertPreparationTimeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final priceTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final object = Unit(
              id: idParam,
              barcode: barcodeParam,
              price: priceParam,
              cost: costParam,
              factor: factorParam,
              defaultForSales: defaultForSalesParam,
              defaultForPurchase: defaultForPurchaseParam,
              defaultForStore: defaultForStoreParam,
              name: nameParam,
              fName: fNameParam,
              showAlertPreparationTime: showAlertPreparationTimeParam,
              priceType: priceTypeParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          obx_int.InternalToManyAccess.setRelInfo<Unit>(object.priceList, store,
              obx_int.RelInfo<Unit>.toMany(29, object.idSeq!));
          obx_int.InternalToManyAccess.setRelInfo<Unit>(object.modifiers, store,
              obx_int.RelInfo<Unit>.toMany(30, object.idSeq!));
          return object;
        }),
    UnitModifer: obx_int.EntityDefinition<UnitModifer>(
        model: _entities[74],
        toOneRelations: (UnitModifer object) => [],
        toManyRelations: (UnitModifer object) => {
              obx_int.RelInfo<UnitModifer>.toMany(31, object.idSeq!):
                  object.freeOptions,
              obx_int.RelInfo<UnitModifer>.toMany(32, object.idSeq!):
                  object.options
            },
        getId: (UnitModifer object) => object.idSeq,
        setId: (UnitModifer object, int id) {
          object.idSeq = id;
        },
        objectToFB: (UnitModifer object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final defulatOptionsOffset = object.defulatOptions == null
              ? null
              : fbb.writeList(object.defulatOptions!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final exceptOptionsOffset = object.exceptOptions == null
              ? null
              : fbb.writeList(object.exceptOptions!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final fNameOffset =
              object.fName == null ? null : fbb.writeString(object.fName!);
          fbb.startTable(11);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.minimumOptions);
          fbb.addInt64(3, object.maximumOptions);
          fbb.addBool(4, object.isUnique);
          fbb.addBool(5, object.isRequired);
          fbb.addOffset(6, defulatOptionsOffset);
          fbb.addOffset(7, exceptOptionsOffset);
          fbb.addOffset(8, nameOffset);
          fbb.addOffset(9, fNameOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final minimumOptionsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final maximumOptionsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final isUniqueParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12);
          final isRequiredParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final defulatOptionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 16);
          final exceptOptionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 18);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final fNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final object = UnitModifer(
              id: idParam,
              minimumOptions: minimumOptionsParam,
              maximumOptions: maximumOptionsParam,
              isUnique: isUniqueParam,
              isRequired: isRequiredParam,
              defulatOptions: defulatOptionsParam,
              exceptOptions: exceptOptionsParam,
              name: nameParam,
              fName: fNameParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          obx_int.InternalToManyAccess.setRelInfo<UnitModifer>(
              object.freeOptions,
              store,
              obx_int.RelInfo<UnitModifer>.toMany(31, object.idSeq!));
          obx_int.InternalToManyAccess.setRelInfo<UnitModifer>(object.options,
              store, obx_int.RelInfo<UnitModifer>.toMany(32, object.idSeq!));
          return object;
        }),
    UserCashierSetting: obx_int.EntityDefinition<UserCashierSetting>(
        model: _entities[75],
        toOneRelations: (UserCashierSetting object) => [],
        toManyRelations: (UserCashierSetting object) => {},
        getId: (UserCashierSetting object) => object.idSeq,
        setId: (UserCashierSetting object, int id) {
          object.idSeq = id;
        },
        objectToFB: (UserCashierSetting object, fb.Builder fbb) {
          final shortNameOffset = object.shortName == null
              ? null
              : fbb.writeString(object.shortName!);
          final fShortNameOffset = object.fShortName == null
              ? null
              : fbb.writeString(object.fShortName!);
          final salesInvoiceTemplateIdOffset =
              object.salesInvoiceTemplateId == null
                  ? null
                  : fbb.writeString(object.salesInvoiceTemplateId!);
          final salesInvoiceTemplateA4IdOffset =
              object.salesInvoiceTemplateA4Id == null
                  ? null
                  : fbb.writeString(object.salesInvoiceTemplateA4Id!);
          final groupIdOffset =
              object.groupId == null ? null : fbb.writeString(object.groupId!);
          final priceListIdOffset = object.priceListId == null
              ? null
              : fbb.writeString(object.priceListId!);
          final warehouseIdOffset = object.warehouseId == null
              ? null
              : fbb.writeString(object.warehouseId!);
          final orderTypesOffset = object.orderTypes == null
              ? null
              : fbb.writeListInt64(object.orderTypes!);
          final paymentMethodsOffset = object.paymentMethods == null
              ? null
              : fbb.writeList(object.paymentMethods!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final restaurantSectionsOffset = object.restaurantSections == null
              ? null
              : fbb.writeList(object.restaurantSections!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final devicesOffset = object.devices == null
              ? null
              : fbb.writeList(
                  object.devices!.map(fbb.writeString).toList(growable: false));
          final groupsOffset = object.groups == null
              ? null
              : fbb.writeList(
                  object.groups!.map(fbb.writeString).toList(growable: false));
          final priceListsOffset = object.priceLists == null
              ? null
              : fbb.writeList(object.priceLists!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final salesInvoiceTemplatesOffset =
              object.salesInvoiceTemplates == null
                  ? null
                  : fbb.writeList(object.salesInvoiceTemplates!
                      .map(fbb.writeString)
                      .toList(growable: false));
          final salesInvoiceTemplatesA4Offset =
              object.salesInvoiceTemplatesA4 == null
                  ? null
                  : fbb.writeList(object.salesInvoiceTemplatesA4!
                      .map(fbb.writeString)
                      .toList(growable: false));
          fbb.startTable(18);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, shortNameOffset);
          fbb.addOffset(2, fShortNameOffset);
          fbb.addOffset(3, salesInvoiceTemplateIdOffset);
          fbb.addOffset(4, salesInvoiceTemplateA4IdOffset);
          fbb.addOffset(5, groupIdOffset);
          fbb.addOffset(6, priceListIdOffset);
          fbb.addOffset(7, warehouseIdOffset);
          fbb.addInt64(8, object.discountPercentageLimit);
          fbb.addOffset(9, orderTypesOffset);
          fbb.addOffset(10, paymentMethodsOffset);
          fbb.addOffset(11, restaurantSectionsOffset);
          fbb.addOffset(12, devicesOffset);
          fbb.addOffset(13, groupsOffset);
          fbb.addOffset(14, priceListsOffset);
          fbb.addOffset(15, salesInvoiceTemplatesOffset);
          fbb.addOffset(16, salesInvoiceTemplatesA4Offset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final fShortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final salesInvoiceTemplateIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final salesInvoiceTemplateA4IdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final groupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final priceListIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final warehouseIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final discountPercentageLimitParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final orderTypesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final paymentMethodsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 24);
          final restaurantSectionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 26);
          final devicesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 28);
          final groupsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 30);
          final priceListsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 32);
          final salesInvoiceTemplatesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 34);
          final salesInvoiceTemplatesA4Param = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 36);
          final object = UserCashierSetting(
              shortName: shortNameParam,
              fShortName: fShortNameParam,
              salesInvoiceTemplateId: salesInvoiceTemplateIdParam,
              salesInvoiceTemplateA4Id: salesInvoiceTemplateA4IdParam,
              groupId: groupIdParam,
              priceListId: priceListIdParam,
              warehouseId: warehouseIdParam,
              discountPercentageLimit: discountPercentageLimitParam,
              orderTypes: orderTypesParam,
              paymentMethods: paymentMethodsParam,
              restaurantSections: restaurantSectionsParam,
              devices: devicesParam,
              groups: groupsParam,
              priceLists: priceListsParam,
              salesInvoiceTemplates: salesInvoiceTemplatesParam,
              salesInvoiceTemplatesA4: salesInvoiceTemplatesA4Param)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ViewSettings: obx_int.EntityDefinition<ViewSettings>(
        model: _entities[76],
        toOneRelations: (ViewSettings object) => [],
        toManyRelations: (ViewSettings object) => {},
        getId: (ViewSettings object) => object.idSeq,
        setId: (ViewSettings object, int id) {
          object.idSeq = id;
        },
        objectToFB: (ViewSettings object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ViewSettings()
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    SendGiftCard: obx_int.EntityDefinition<SendGiftCard>(
        model: _entities[77],
        toOneRelations: (SendGiftCard object) => [],
        toManyRelations: (SendGiftCard object) => {},
        getId: (SendGiftCard object) => object.idSeq,
        setId: (SendGiftCard object, int id) {
          object.idSeq = id;
        },
        objectToFB: (SendGiftCard object, fb.Builder fbb) {
          final giftCardIdOffset = object.giftCardId == null
              ? null
              : fbb.writeString(object.giftCardId!);
          final deviceCreatedOnOffset = object.deviceCreatedOn == null
              ? null
              : fbb.writeString(object.deviceCreatedOn!);
          final deviceCreatedByOffset = object.deviceCreatedBy == null
              ? null
              : fbb.writeString(object.deviceCreatedBy!);
          fbb.startTable(9);
          fbb.addInt64(0, object.idSeq ?? 0);
          fbb.addOffset(1, giftCardIdOffset);
          fbb.addFloat64(2, object.baseAmount);
          fbb.addFloat64(3, object.percent);
          fbb.addFloat64(4, object.value);
          fbb.addFloat64(5, object.amount);
          fbb.addOffset(6, deviceCreatedOnOffset);
          fbb.addOffset(7, deviceCreatedByOffset);
          fbb.finish(fbb.endTable());
          return object.idSeq ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final giftCardIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final baseAmountParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final percentParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final valueParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final amountParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final deviceCreatedOnParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final deviceCreatedByParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final object = SendGiftCard(
              giftCardId: giftCardIdParam,
              baseAmount: baseAmountParam,
              percent: percentParam,
              value: valueParam,
              amount: amountParam,
              deviceCreatedOn: deviceCreatedOnParam,
              deviceCreatedBy: deviceCreatedByParam)
            ..idSeq =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ActivationInfo] entity fields to define ObjectBox queries.
class ActivationInfo_ {
  /// see [ActivationInfo.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<ActivationInfo>(_entities[0].properties[0]);

  /// see [ActivationInfo.id]
  static final id =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[1]);

  /// see [ActivationInfo.name]
  static final name =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[2]);

  /// see [ActivationInfo.fName]
  static final fName =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[3]);

  /// see [ActivationInfo.email]
  static final email =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[4]);

  /// see [ActivationInfo.phone]
  static final phone =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[5]);

  /// see [ActivationInfo.mobile]
  static final mobile =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[6]);

  /// see [ActivationInfo.taxRegName]
  static final taxRegName =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[7]);

  /// see [ActivationInfo.fTaxRegName]
  static final fTaxRegName =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[8]);

  /// see [ActivationInfo.taxCode]
  static final taxCode =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[9]);

  /// see [ActivationInfo.onlineOrderStartTime]
  static final onlineOrderStartTime =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[10]);

  /// see [ActivationInfo.onlineOrderEndTime]
  static final onlineOrderEndTime =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[11]);

  /// see [ActivationInfo.branchPrefix]
  static final branchPrefix =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[12]);

  /// see [ActivationInfo.customerService]
  static final customerService =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[13]);

  /// see [ActivationInfo.countryId]
  static final countryId =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[14]);

  /// see [ActivationInfo.cityId]
  static final cityId =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[15]);

  /// see [ActivationInfo.address]
  static final address =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[16]);

  /// see [ActivationInfo.latitude]
  static final latitude =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[17]);

  /// see [ActivationInfo.longitude]
  static final longitude =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[18]);

  /// see [ActivationInfo.headerInvoiceMsg]
  static final headerInvoiceMsg =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[19]);

  /// see [ActivationInfo.footerInvoiceMsg]
  static final footerInvoiceMsg =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[20]);

  /// see [ActivationInfo.code]
  static final code =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[21]);

  /// see [ActivationInfo.currentDeviceId]
  static final currentDeviceId =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[22]);

  /// see [ActivationInfo.receiveOnlineOrders]
  static final receiveOnlineOrders =
      obx.QueryBooleanProperty<ActivationInfo>(_entities[0].properties[23]);

  /// see [ActivationInfo.company]
  static final company =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[24]);

  /// see [ActivationInfo.fCompany]
  static final fCompany =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[25]);

  /// see [ActivationInfo.branch]
  static final branch =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[26]);

  /// see [ActivationInfo.fBranch]
  static final fBranch =
      obx.QueryStringProperty<ActivationInfo>(_entities[0].properties[27]);

  /// see [ActivationInfo.devices]
  static final devices =
      obx.QueryBacklinkToMany<Device, ActivationInfo>(Device_.info);
}

/// [Address] entity fields to define ObjectBox queries.
class Address_ {
  /// see [Address.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Address>(_entities[1].properties[0]);

  /// see [Address.id]
  static final id =
      obx.QueryStringProperty<Address>(_entities[1].properties[1]);

  /// see [Address.addressTypeId]
  static final addressTypeId =
      obx.QueryStringProperty<Address>(_entities[1].properties[2]);

  /// see [Address.name]
  static final name =
      obx.QueryStringProperty<Address>(_entities[1].properties[3]);

  /// see [Address.fName]
  static final fName =
      obx.QueryStringProperty<Address>(_entities[1].properties[4]);

  /// see [Address.latitude]
  static final latitude =
      obx.QueryDoubleProperty<Address>(_entities[1].properties[5]);

  /// see [Address.longitude]
  static final longitude =
      obx.QueryDoubleProperty<Address>(_entities[1].properties[6]);

  /// see [Address.deliveryZoneId]
  static final deliveryZoneId =
      obx.QueryStringProperty<Address>(_entities[1].properties[7]);

  /// see [Address.description]
  static final description =
      obx.QueryStringProperty<Address>(_entities[1].properties[8]);

  /// see [Address.mainStreet]
  static final mainStreet =
      obx.QueryStringProperty<Address>(_entities[1].properties[9]);

  /// see [Address.byStreet]
  static final byStreet =
      obx.QueryStringProperty<Address>(_entities[1].properties[10]);

  /// see [Address.buildingNo]
  static final buildingNo =
      obx.QueryStringProperty<Address>(_entities[1].properties[11]);

  /// see [Address.floor]
  static final floor =
      obx.QueryStringProperty<Address>(_entities[1].properties[12]);

  /// see [Address.apartmentNo]
  static final apartmentNo =
      obx.QueryStringProperty<Address>(_entities[1].properties[13]);

  /// see [Address.phone]
  static final phone =
      obx.QueryStringProperty<Address>(_entities[1].properties[14]);

  /// see [Address.popularPlace]
  static final popularPlace =
      obx.QueryStringProperty<Address>(_entities[1].properties[15]);

  /// see [Address.zipCode]
  static final zipCode =
      obx.QueryStringProperty<Address>(_entities[1].properties[16]);
}

/// [AppliedModifer] entity fields to define ObjectBox queries.
class AppliedModifer_ {
  /// see [AppliedModifer.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<AppliedModifer>(_entities[2].properties[0]);

  /// see [AppliedModifer.modifier]
  static final modifier = obx.QueryRelationToOne<AppliedModifer, UnitModifer>(
      _entities[2].properties[1]);

  /// see [AppliedModifer.options]
  static final options = obx.QueryRelationToMany<AppliedModifer, AppliedOption>(
      _entities[2].relations[0]);
}

/// [AppliedOption] entity fields to define ObjectBox queries.
class AppliedOption_ {
  /// see [AppliedOption.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<AppliedOption>(_entities[3].properties[0]);

  /// see [AppliedOption.quantity]
  static final quantity =
      obx.QueryDoubleProperty<AppliedOption>(_entities[3].properties[1]);

  /// see [AppliedOption.freeQuantity]
  static final freeQuantity =
      obx.QueryDoubleProperty<AppliedOption>(_entities[3].properties[2]);

  /// see [AppliedOption.taxableAmt]
  static final taxableAmt =
      obx.QueryDoubleProperty<AppliedOption>(_entities[3].properties[3]);

  /// see [AppliedOption.priceWithTax]
  static final priceWithTax =
      obx.QueryBooleanProperty<AppliedOption>(_entities[3].properties[4]);

  /// see [AppliedOption.option]
  static final option =
      obx.QueryRelationToOne<AppliedOption, Option>(_entities[3].properties[5]);

  /// see [AppliedOption.taxInfo]
  static final taxInfo = obx.QueryRelationToOne<AppliedOption, TaxInfo>(
      _entities[3].properties[6]);
}

/// [AppliedProduct] entity fields to define ObjectBox queries.
class AppliedProduct_ {
  /// see [AppliedProduct.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<AppliedProduct>(_entities[4].properties[0]);

  /// see [AppliedProduct.product]
  static final product = obx.QueryRelationToOne<AppliedProduct, ExtractProduct>(
      _entities[4].properties[1]);

  /// see [AppliedProduct.unit]
  static final unit =
      obx.QueryRelationToOne<AppliedProduct, Unit>(_entities[4].properties[2]);

  /// see [AppliedProduct.quantity]
  static final quantity =
      obx.QueryDoubleProperty<AppliedProduct>(_entities[4].properties[3]);

  /// see [AppliedProduct.prodRef]
  static final prodRef =
      obx.QueryStringProperty<AppliedProduct>(_entities[4].properties[4]);

  /// see [AppliedProduct.priceWithTax]
  static final priceWithTax =
      obx.QueryBooleanProperty<AppliedProduct>(_entities[4].properties[5]);

  /// see [AppliedProduct.isCansel]
  static final isCansel =
      obx.QueryBooleanProperty<AppliedProduct>(_entities[4].properties[6]);

  /// see [AppliedProduct.msgCansel]
  static final msgCansel =
      obx.QueryStringProperty<AppliedProduct>(_entities[4].properties[7]);

  /// see [AppliedProduct.priceLevel]
  static final priceLevel =
      obx.QueryIntegerProperty<AppliedProduct>(_entities[4].properties[8]);

  /// see [AppliedProduct.event]
  static final event = obx.QueryRelationToOne<AppliedProduct, TimeEvent>(
      _entities[4].properties[9]);

  /// see [AppliedProduct.discount]
  static final discount = obx.QueryRelationToOne<AppliedProduct, Discount>(
      _entities[4].properties[10]);

  /// see [AppliedProduct.promotion]
  static final promotion = obx.QueryRelationToOne<AppliedProduct, Promotion>(
      _entities[4].properties[11]);

  /// see [AppliedProduct.taxInfo]
  static final taxInfo = obx.QueryRelationToOne<AppliedProduct, TaxInfo>(
      _entities[4].properties[12]);

  /// see [AppliedProduct.throwbackInfo]
  static final throwbackInfo =
      obx.QueryRelationToOne<AppliedProduct, ThrowbackInfo>(
          _entities[4].properties[13]);

  /// see [AppliedProduct.giftCardCode]
  static final giftCardCode =
      obx.QueryStringProperty<AppliedProduct>(_entities[4].properties[14]);

  /// see [AppliedProduct.price]
  static final price =
      obx.QueryDoubleProperty<AppliedProduct>(_entities[4].properties[15]);

  /// see [AppliedProduct.optionPrice]
  static final optionPrice =
      obx.QueryDoubleProperty<AppliedProduct>(_entities[4].properties[16]);

  /// see [AppliedProduct.priceDiscount]
  static final priceDiscount =
      obx.QueryDoubleProperty<AppliedProduct>(_entities[4].properties[17]);

  /// see [AppliedProduct.pricePromotion]
  static final pricePromotion =
      obx.QueryDoubleProperty<AppliedProduct>(_entities[4].properties[18]);

  /// see [AppliedProduct.taxPrice]
  static final taxPrice =
      obx.QueryDoubleProperty<AppliedProduct>(_entities[4].properties[19]);

  /// see [AppliedProduct.taxableAmt]
  static final taxableAmt =
      obx.QueryDoubleProperty<AppliedProduct>(_entities[4].properties[20]);

  /// see [AppliedProduct.freeQuantity]
  static final freeQuantity =
      obx.QueryDoubleProperty<AppliedProduct>(_entities[4].properties[21]);

  /// see [AppliedProduct.isFixedPrice]
  static final isFixedPrice =
      obx.QueryBooleanProperty<AppliedProduct>(_entities[4].properties[22]);

  /// see [AppliedProduct.canEditQty]
  static final canEditQty =
      obx.QueryBooleanProperty<AppliedProduct>(_entities[4].properties[23]);

  /// see [AppliedProduct.barcodePrice]
  static final barcodePrice =
      obx.QueryDoubleProperty<AppliedProduct>(_entities[4].properties[24]);

  /// see [AppliedProduct.note]
  static final note =
      obx.QueryStringProperty<AppliedProduct>(_entities[4].properties[25]);

  /// see [AppliedProduct.appliedModifer]
  static final appliedModifer =
      obx.QueryRelationToMany<AppliedProduct, AppliedModifer>(
          _entities[4].relations[0]);
}

/// [BarcodeScale] entity fields to define ObjectBox queries.
class BarcodeScale_ {
  /// see [BarcodeScale.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<BarcodeScale>(_entities[5].properties[0]);

  /// see [BarcodeScale.id]
  static final id =
      obx.QueryStringProperty<BarcodeScale>(_entities[5].properties[1]);

  /// see [BarcodeScale.name]
  static final name =
      obx.QueryStringProperty<BarcodeScale>(_entities[5].properties[2]);

  /// see [BarcodeScale.fName]
  static final fName =
      obx.QueryStringProperty<BarcodeScale>(_entities[5].properties[3]);

  /// see [BarcodeScale.scanPriceFromScale]
  static final scanPriceFromScale =
      obx.QueryBooleanProperty<BarcodeScale>(_entities[5].properties[4]);

  /// see [BarcodeScale.scalePriceIncludeTax]
  static final scalePriceIncludeTax =
      obx.QueryBooleanProperty<BarcodeScale>(_entities[5].properties[5]);

  /// see [BarcodeScale.scaleBarcodeDigits]
  static final scaleBarcodeDigits =
      obx.QueryIntegerProperty<BarcodeScale>(_entities[5].properties[6]);

  /// see [BarcodeScale.scaleProductCodeDigits]
  static final scaleProductCodeDigits =
      obx.QueryIntegerProperty<BarcodeScale>(_entities[5].properties[7]);

  /// see [BarcodeScale.scaleIntDigits]
  static final scaleIntDigits =
      obx.QueryIntegerProperty<BarcodeScale>(_entities[5].properties[8]);

  /// see [BarcodeScale.scaleDecimalDigits]
  static final scaleDecimalDigits =
      obx.QueryIntegerProperty<BarcodeScale>(_entities[5].properties[9]);

  /// see [BarcodeScale.scaleProductCodeFirstInBarcode]
  static final scaleProductCodeFirstInBarcode =
      obx.QueryBooleanProperty<BarcodeScale>(_entities[5].properties[10]);

  /// see [BarcodeScale.departments]
  static final departments =
      obx.QueryStringVectorProperty<BarcodeScale>(_entities[5].properties[11]);

  /// see [BarcodeScale.categories]
  static final categories =
      obx.QueryStringVectorProperty<BarcodeScale>(_entities[5].properties[12]);

  /// see [BarcodeScale.products]
  static final products =
      obx.QueryStringVectorProperty<BarcodeScale>(_entities[5].properties[13]);
}

/// [BillCopyHistory] entity fields to define ObjectBox queries.
class BillCopyHistory_ {
  /// see [BillCopyHistory.id]
  static final id =
      obx.QueryIntegerProperty<BillCopyHistory>(_entities[6].properties[0]);

  /// see [BillCopyHistory.billRef]
  static final billRef =
      obx.QueryStringProperty<BillCopyHistory>(_entities[6].properties[1]);

  /// see [BillCopyHistory.billNo]
  static final billNo =
      obx.QueryStringProperty<BillCopyHistory>(_entities[6].properties[2]);

  /// see [BillCopyHistory.billeDate]
  static final billeDate =
      obx.QueryStringProperty<BillCopyHistory>(_entities[6].properties[3]);
}

/// [BillCounter] entity fields to define ObjectBox queries.
class BillCounter_ {
  /// see [BillCounter.id]
  static final id =
      obx.QueryIntegerProperty<BillCounter>(_entities[7].properties[0]);

  /// see [BillCounter.dateTimeOpenOn]
  static final dateTimeOpenOn =
      obx.QueryStringProperty<BillCounter>(_entities[7].properties[1]);

  /// see [BillCounter.dateTimeCloseOn]
  static final dateTimeCloseOn =
      obx.QueryStringProperty<BillCounter>(_entities[7].properties[2]);

  /// see [BillCounter.isClosed]
  static final isClosed =
      obx.QueryBooleanProperty<BillCounter>(_entities[7].properties[3]);

  /// see [BillCounter.curentCounter]
  static final curentCounter =
      obx.QueryIntegerProperty<BillCounter>(_entities[7].properties[4]);

  /// see [BillCounter.billPerfex]
  static final billPerfex =
      obx.QueryStringProperty<BillCounter>(_entities[7].properties[5]);

  /// see [BillCounter.billCopyHistory]
  static final billCopyHistory =
      obx.QueryRelationToMany<BillCounter, BillCopyHistory>(
          _entities[7].relations[0]);
}

/// [BillSetting] entity fields to define ObjectBox queries.
class BillSetting_ {
  /// see [BillSetting.id]
  static final id =
      obx.QueryIntegerProperty<BillSetting>(_entities[8].properties[0]);

  /// see [BillSetting.logoUrl]
  static final logoUrl =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[1]);

  /// see [BillSetting.companyName]
  static final companyName =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[2]);

  /// see [BillSetting.fCompanyName]
  static final fCompanyName =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[3]);

  /// see [BillSetting.taxNo]
  static final taxNo =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[4]);

  /// see [BillSetting.phoneNumber]
  static final phoneNumber =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[5]);

  /// see [BillSetting.address]
  static final address =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[6]);

  /// see [BillSetting.fAddress]
  static final fAddress =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[7]);

  /// see [BillSetting.headerInvoiceMessage]
  static final headerInvoiceMessage =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[8]);

  /// see [BillSetting.fHeaderInvoiceMessage]
  static final fHeaderInvoiceMessage =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[9]);

  /// see [BillSetting.footerInvoiceMessage]
  static final footerInvoiceMessage =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[10]);

  /// see [BillSetting.fFooterInvoiceMessage]
  static final fFooterInvoiceMessage =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[11]);

  /// see [BillSetting.invoiceRoundFactor]
  static final invoiceRoundFactor =
      obx.QueryIntegerProperty<BillSetting>(_entities[8].properties[12]);

  /// see [BillSetting.enablePrintBundleProductChildren]
  static final enablePrintBundleProductChildren =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[13]);

  /// see [BillSetting.printOrderNumber]
  static final printOrderNumber =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[14]);

  /// see [BillSetting.printCalories]
  static final printCalories =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[15]);

  /// see [BillSetting.printSubTotal]
  static final printSubTotal =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[16]);

  /// see [BillSetting.printRoundDigit]
  static final printRoundDigit =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[17]);

  /// see [BillSetting.printProductUnit]
  static final printProductUnit =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[18]);

  /// see [BillSetting.printProductUnitPrice]
  static final printProductUnitPrice =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[19]);

  /// see [BillSetting.printProductTotalPrice]
  static final printProductTotalPrice =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[20]);

  /// see [BillSetting.printProductDiscountPrice]
  static final printProductDiscountPrice =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[21]);

  /// see [BillSetting.printProductFreeQuantity]
  static final printProductFreeQuantity =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[22]);

  /// see [BillSetting.printProductTotalPriceBeforeTax]
  static final printProductTotalPriceBeforeTax =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[23]);

  /// see [BillSetting.printProductTaxAmount]
  static final printProductTaxAmount =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[24]);

  /// see [BillSetting.printProductTaxPercentage]
  static final printProductTaxPercentage =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[25]);

  /// see [BillSetting.printProductTotalPriceAfterDiscount]
  static final printProductTotalPriceAfterDiscount =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[26]);

  /// see [BillSetting.printProductTotalPriceIncludeTax]
  static final printProductTotalPriceIncludeTax =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[27]);

  /// see [BillSetting.printOrderClosedUser]
  static final printOrderClosedUser =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[28]);

  /// see [BillSetting.printOrderCreatedUser]
  static final printOrderCreatedUser =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[29]);

  /// see [BillSetting.printCheckNumber]
  static final printCheckNumber =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[30]);

  /// see [BillSetting.hideFreeModifierOptions]
  static final hideFreeModifierOptions =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[31]);

  /// see [BillSetting.invoiceTemplate]
  static final invoiceTemplate =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[32]);

  /// see [BillSetting.refundTemplate]
  static final refundTemplate =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[33]);

  /// see [BillSetting.autoPrintOnSave]
  static final autoPrintOnSave =
      obx.QueryBooleanProperty<BillSetting>(_entities[8].properties[34]);

  /// see [BillSetting.printlanguage]
  static final printlanguage =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[35]);

  /// see [BillSetting.defaultLanguage]
  static final defaultLanguage =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[36]);

  /// see [BillSetting.secondLanguage]
  static final secondLanguage =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[37]);

  /// see [BillSetting.invoiceTitle]
  static final invoiceTitle =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[38]);

  /// see [BillSetting.fInvoiceTitle]
  static final fInvoiceTitle =
      obx.QueryStringProperty<BillSetting>(_entities[8].properties[39]);

  /// see [BillSetting.logoData]
  static final logoData = obx.QueryRelationToOne<BillSetting, LogoData>(
      _entities[8].properties[40]);
}

/// [Branch] entity fields to define ObjectBox queries.
class Branch_ {
  /// see [Branch.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Branch>(_entities[9].properties[0]);

  /// see [Branch.id]
  static final id = obx.QueryStringProperty<Branch>(_entities[9].properties[1]);

  /// see [Branch.name]
  static final name =
      obx.QueryStringProperty<Branch>(_entities[9].properties[2]);

  /// see [Branch.fName]
  static final fName =
      obx.QueryStringProperty<Branch>(_entities[9].properties[3]);

  /// see [Branch.email]
  static final email =
      obx.QueryStringProperty<Branch>(_entities[9].properties[4]);

  /// see [Branch.phone]
  static final phone =
      obx.QueryStringProperty<Branch>(_entities[9].properties[5]);

  /// see [Branch.mobile]
  static final mobile =
      obx.QueryStringProperty<Branch>(_entities[9].properties[6]);

  /// see [Branch.taxRegName]
  static final taxRegName =
      obx.QueryStringProperty<Branch>(_entities[9].properties[7]);

  /// see [Branch.taxCode]
  static final taxCode =
      obx.QueryStringProperty<Branch>(_entities[9].properties[8]);

  /// see [Branch.onlineOrderStartTime]
  static final onlineOrderStartTime =
      obx.QueryStringProperty<Branch>(_entities[9].properties[9]);

  /// see [Branch.onlineOrderEndTime]
  static final onlineOrderEndTime =
      obx.QueryStringProperty<Branch>(_entities[9].properties[10]);

  /// see [Branch.branchPrefix]
  static final branchPrefix =
      obx.QueryStringProperty<Branch>(_entities[9].properties[11]);

  /// see [Branch.customerService]
  static final customerService =
      obx.QueryStringProperty<Branch>(_entities[9].properties[12]);

  /// see [Branch.address]
  static final address =
      obx.QueryStringProperty<Branch>(_entities[9].properties[13]);

  /// see [Branch.headerInvoiceMsg]
  static final headerInvoiceMsg =
      obx.QueryStringProperty<Branch>(_entities[9].properties[14]);

  /// see [Branch.footerInvoiceMsg]
  static final footerInvoiceMsg =
      obx.QueryStringProperty<Branch>(_entities[9].properties[15]);

  /// see [Branch.receiveOnlineOrders]
  static final receiveOnlineOrders =
      obx.QueryBooleanProperty<Branch>(_entities[9].properties[16]);
}

/// [CashierSetting] entity fields to define ObjectBox queries.
class CashierSetting_ {
  /// see [CashierSetting.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<CashierSetting>(_entities[10].properties[0]);

  /// see [CashierSetting.enableCashSales]
  static final enableCashSales =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[1]);

  /// see [CashierSetting.enableCreditCardSales]
  static final enableCreditCardSales =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[2]);

  /// see [CashierSetting.enableCustomerSales]
  static final enableCustomerSales =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[3]);

  /// see [CashierSetting.enableFreeQuantity]
  static final enableFreeQuantity =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[4]);

  /// see [CashierSetting.enableEditItemName]
  static final enableEditItemName =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[5]);

  /// see [CashierSetting.enableSalesDiscount]
  static final enableSalesDiscount =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[6]);

  /// see [CashierSetting.enableChangePrice]
  static final enableChangePrice =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[7]);

  /// see [CashierSetting.enableProductPackages]
  static final enableProductPackages =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[8]);

  /// see [CashierSetting.enableTablesSystem]
  static final enableTablesSystem =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[9]);

  /// see [CashierSetting.tableGuestCountRequired]
  static final tableGuestCountRequired =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[10]);

  /// see [CashierSetting.tableRequired]
  static final tableRequired =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[11]);

  /// see [CashierSetting.discountPercentageLimit]
  static final discountPercentageLimit =
      obx.QueryDoubleProperty<CashierSetting>(_entities[10].properties[12]);

  /// see [CashierSetting.defaultCustomerId]
  static final defaultCustomerId =
      obx.QueryStringProperty<CashierSetting>(_entities[10].properties[13]);

  /// see [CashierSetting.priceListId]
  static final priceListId =
      obx.QueryStringProperty<CashierSetting>(_entities[10].properties[14]);

  /// see [CashierSetting.daily]
  static final daily =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[15]);

  /// see [CashierSetting.submittingRequestsDelayMinutes]
  static final submittingRequestsDelayMinutes =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[16]);

  /// see [CashierSetting.inactiveUsersLogoutMinutes]
  static final inactiveUsersLogoutMinutes =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[17]);

  /// see [CashierSetting.maximumReturnPeriodMinutes]
  static final maximumReturnPeriodMinutes =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[18]);

  /// see [CashierSetting.requireOrderTypesForOrders]
  static final requireOrderTypesForOrders =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[19]);

  /// see [CashierSetting.roundingType]
  static final roundingType =
      obx.QueryStringProperty<CashierSetting>(_entities[10].properties[20]);

  /// see [CashierSetting.roundDigits]
  static final roundDigits =
      obx.QueryDoubleProperty<CashierSetting>(_entities[10].properties[21]);

  /// see [CashierSetting.kitchenSortingType]
  static final kitchenSortingType =
      obx.QueryStringProperty<CashierSetting>(_entities[10].properties[22]);

  /// see [CashierSetting.printSortingType]
  static final printSortingType =
      obx.QueryStringProperty<CashierSetting>(_entities[10].properties[23]);

  /// see [CashierSetting.activeTips]
  static final activeTips =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[24]);

  /// see [CashierSetting.discountRequireCustomerInfo]
  static final discountRequireCustomerInfo =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[25]);

  /// see [CashierSetting.returnRequireCustomerInfo]
  static final returnRequireCustomerInfo =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[26]);

  /// see [CashierSetting.requireCancelReason]
  static final requireCancelReason =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[27]);

  /// see [CashierSetting.autoSentOrderToKitchenAfterPaid]
  static final autoSentOrderToKitchenAfterPaid =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[28]);

  /// see [CashierSetting.autoSyncDataAtStartOfDay]
  static final autoSyncDataAtStartOfDay =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[29]);

  /// see [CashierSetting.autoPrintProductsReport]
  static final autoPrintProductsReport =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[30]);

  /// see [CashierSetting.autoPrintTillsReport]
  static final autoPrintTillsReport =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[31]);

  /// see [CashierSetting.preventEndingDayBeforeInventoryCount]
  static final preventEndingDayBeforeInventoryCount =
      obx.QueryBooleanProperty<CashierSetting>(_entities[10].properties[32]);

  /// see [CashierSetting.imei]
  static final imei =
      obx.QueryStringProperty<CashierSetting>(_entities[10].properties[33]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Category>(_entities[11].properties[0]);

  /// see [Category.id]
  static final id =
      obx.QueryStringProperty<Category>(_entities[11].properties[1]);

  /// see [Category.name]
  static final name =
      obx.QueryStringProperty<Category>(_entities[11].properties[2]);

  /// see [Category.fName]
  static final fName =
      obx.QueryStringProperty<Category>(_entities[11].properties[3]);

  /// see [Category.displayOrder]
  static final displayOrder =
      obx.QueryIntegerProperty<Category>(_entities[11].properties[4]);

  /// see [Category.imageUrl]
  static final imageUrl =
      obx.QueryStringProperty<Category>(_entities[11].properties[5]);
}

/// [Claims] entity fields to define ObjectBox queries.
class Claims_ {
  /// see [Claims.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Claims>(_entities[12].properties[0]);

  /// see [Claims.id]
  static final id =
      obx.QueryStringProperty<Claims>(_entities[12].properties[1]);

  /// see [Claims.name]
  static final name =
      obx.QueryStringProperty<Claims>(_entities[12].properties[2]);
}

/// [Coupon] entity fields to define ObjectBox queries.
class Coupon_ {
  /// see [Coupon.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Coupon>(_entities[13].properties[0]);

  /// see [Coupon.id]
  static final id =
      obx.QueryStringProperty<Coupon>(_entities[13].properties[1]);

  /// see [Coupon.couponCode]
  static final couponCode =
      obx.QueryStringProperty<Coupon>(_entities[13].properties[2]);

  /// see [Coupon.useCountForAll]
  static final useCountForAll =
      obx.QueryIntegerProperty<Coupon>(_entities[13].properties[3]);

  /// see [Coupon.useCountForOne]
  static final useCountForOne =
      obx.QueryIntegerProperty<Coupon>(_entities[13].properties[4]);

  /// see [Coupon.maximumUses]
  static final maximumUses =
      obx.QueryIntegerProperty<Coupon>(_entities[13].properties[5]);

  /// see [Coupon.startDate]
  static final startDate =
      obx.QueryStringProperty<Coupon>(_entities[13].properties[6]);

  /// see [Coupon.endDate]
  static final endDate =
      obx.QueryStringProperty<Coupon>(_entities[13].properties[7]);

  /// see [Coupon.startTime]
  static final startTime =
      obx.QueryStringProperty<Coupon>(_entities[13].properties[8]);

  /// see [Coupon.endTime]
  static final endTime =
      obx.QueryStringProperty<Coupon>(_entities[13].properties[9]);

  /// see [Coupon.discountId]
  static final discountId =
      obx.QueryStringProperty<Coupon>(_entities[13].properties[10]);

  /// see [Coupon.days]
  static final days =
      obx.QueryIntegerVectorProperty<Coupon>(_entities[13].properties[11]);

  /// see [Coupon.couponLevel]
  static final couponLevel =
      obx.QueryIntegerProperty<Coupon>(_entities[13].properties[12]);

  /// see [Coupon.numberOFProducts]
  static final numberOFProducts =
      obx.QueryIntegerProperty<Coupon>(_entities[13].properties[13]);
}

/// [Currencies] entity fields to define ObjectBox queries.
class Currencies_ {
  /// see [Currencies.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Currencies>(_entities[14].properties[0]);

  /// see [Currencies.id]
  static final id =
      obx.QueryStringProperty<Currencies>(_entities[14].properties[1]);

  /// see [Currencies.name]
  static final name =
      obx.QueryStringProperty<Currencies>(_entities[14].properties[2]);

  /// see [Currencies.fName]
  static final fName =
      obx.QueryStringProperty<Currencies>(_entities[14].properties[3]);

  /// see [Currencies.currencyCode]
  static final currencyCode =
      obx.QueryStringProperty<Currencies>(_entities[14].properties[4]);

  /// see [Currencies.displayLocale]
  static final displayLocale =
      obx.QueryStringProperty<Currencies>(_entities[14].properties[5]);

  /// see [Currencies.isDefault]
  static final isDefault =
      obx.QueryBooleanProperty<Currencies>(_entities[14].properties[6]);

  /// see [Currencies.customFormatting]
  static final customFormatting =
      obx.QueryStringProperty<Currencies>(_entities[14].properties[7]);

  /// see [Currencies.exchangeRate]
  static final exchangeRate =
      obx.QueryDoubleProperty<Currencies>(_entities[14].properties[8]);

  /// see [Currencies.minExchangeRate]
  static final minExchangeRate =
      obx.QueryDoubleProperty<Currencies>(_entities[14].properties[9]);

  /// see [Currencies.maxExchangeRate]
  static final maxExchangeRate =
      obx.QueryDoubleProperty<Currencies>(_entities[14].properties[10]);

  /// see [Currencies.dens]
  static final dens =
      obx.QueryIntegerVectorProperty<Currencies>(_entities[14].properties[11]);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Customer>(_entities[15].properties[0]);

  /// see [Customer.id]
  static final id =
      obx.QueryStringProperty<Customer>(_entities[15].properties[1]);

  /// see [Customer.name]
  static final name =
      obx.QueryStringProperty<Customer>(_entities[15].properties[2]);

  /// see [Customer.fName]
  static final fName =
      obx.QueryStringProperty<Customer>(_entities[15].properties[3]);

  /// see [Customer.mobile]
  static final mobile =
      obx.QueryStringProperty<Customer>(_entities[15].properties[4]);

  /// see [Customer.email]
  static final email =
      obx.QueryStringProperty<Customer>(_entities[15].properties[5]);

  /// see [Customer.debitLimit]
  static final debitLimit =
      obx.QueryDoubleProperty<Customer>(_entities[15].properties[6]);

  /// see [Customer.balance]
  static final balance =
      obx.QueryDoubleProperty<Customer>(_entities[15].properties[7]);

  /// see [Customer.paymentMethodId]
  static final paymentMethodId =
      obx.QueryStringProperty<Customer>(_entities[15].properties[8]);

  /// see [Customer.currencyId]
  static final currencyId =
      obx.QueryStringProperty<Customer>(_entities[15].properties[9]);

  /// see [Customer.taxNumber]
  static final taxNumber =
      obx.QueryStringProperty<Customer>(_entities[15].properties[10]);

  /// see [Customer.taxRegisterationName]
  static final taxRegisterationName =
      obx.QueryStringProperty<Customer>(_entities[15].properties[11]);

  /// see [Customer.inBlackList]
  static final inBlackList =
      obx.QueryBooleanProperty<Customer>(_entities[15].properties[12]);

  /// see [Customer.blackListNote]
  static final blackListNote =
      obx.QueryStringProperty<Customer>(_entities[15].properties[13]);

  /// see [Customer.priceListId]
  static final priceListId =
      obx.QueryStringProperty<Customer>(_entities[15].properties[14]);

  /// see [Customer.enableHouseAccount]
  static final enableHouseAccount =
      obx.QueryBooleanProperty<Customer>(_entities[15].properties[15]);

  /// see [Customer.taxable]
  static final taxable =
      obx.QueryBooleanProperty<Customer>(_entities[15].properties[16]);

  /// see [Customer.addersses]
  static final addersses =
      obx.QueryRelationToMany<Customer, Address>(_entities[15].relations[0]);

  /// see [Customer.houseAccountTranscations]
  static final houseAccountTranscations =
      obx.QueryRelationToMany<Customer, Transaction>(
          _entities[15].relations[1]);
}

/// [DeliveryCompany] entity fields to define ObjectBox queries.
class DeliveryCompany_ {
  /// see [DeliveryCompany.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<DeliveryCompany>(_entities[16].properties[0]);

  /// see [DeliveryCompany.id]
  static final id =
      obx.QueryStringProperty<DeliveryCompany>(_entities[16].properties[1]);

  /// see [DeliveryCompany.name]
  static final name =
      obx.QueryStringProperty<DeliveryCompany>(_entities[16].properties[2]);

  /// see [DeliveryCompany.fName]
  static final fName =
      obx.QueryStringProperty<DeliveryCompany>(_entities[16].properties[3]);

  /// see [DeliveryCompany.mobile]
  static final mobile =
      obx.QueryStringProperty<DeliveryCompany>(_entities[16].properties[4]);

  /// see [DeliveryCompany.email]
  static final email =
      obx.QueryStringProperty<DeliveryCompany>(_entities[16].properties[5]);

  /// see [DeliveryCompany.countryId]
  static final countryId =
      obx.QueryStringProperty<DeliveryCompany>(_entities[16].properties[6]);

  /// see [DeliveryCompany.imageUrl]
  static final imageUrl =
      obx.QueryStringProperty<DeliveryCompany>(_entities[16].properties[7]);

  /// see [DeliveryCompany.commissionRate]
  static final commissionRate =
      obx.QueryDoubleProperty<DeliveryCompany>(_entities[16].properties[8]);
}

/// [DeliveryCompanyInfo] entity fields to define ObjectBox queries.
class DeliveryCompanyInfo_ {
  /// see [DeliveryCompanyInfo.idSeq]
  static final idSeq = obx.QueryIntegerProperty<DeliveryCompanyInfo>(
      _entities[17].properties[0]);

  /// see [DeliveryCompanyInfo.company]
  static final company =
      obx.QueryRelationToOne<DeliveryCompanyInfo, DeliveryCompany>(
          _entities[17].properties[1]);

  /// see [DeliveryCompanyInfo.orderNumber]
  static final orderNumber =
      obx.QueryStringProperty<DeliveryCompanyInfo>(_entities[17].properties[2]);
}

/// [DeliveryZone] entity fields to define ObjectBox queries.
class DeliveryZone_ {
  /// see [DeliveryZone.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<DeliveryZone>(_entities[18].properties[0]);

  /// see [DeliveryZone.id]
  static final id =
      obx.QueryStringProperty<DeliveryZone>(_entities[18].properties[1]);

  /// see [DeliveryZone.name]
  static final name =
      obx.QueryStringProperty<DeliveryZone>(_entities[18].properties[2]);

  /// see [DeliveryZone.fName]
  static final fName =
      obx.QueryStringProperty<DeliveryZone>(_entities[18].properties[3]);

  /// see [DeliveryZone.deliveryZoneCoordinate]
  static final deliveryZoneCoordinate =
      obx.QueryStringProperty<DeliveryZone>(_entities[18].properties[4]);

  /// see [DeliveryZone.minimumDeliveryCharge]
  static final minimumDeliveryCharge =
      obx.QueryDoubleProperty<DeliveryZone>(_entities[18].properties[5]);

  /// see [DeliveryZone.deliveryChargePerKM]
  static final deliveryChargePerKM =
      obx.QueryDoubleProperty<DeliveryZone>(_entities[18].properties[6]);
}

/// [Department1] entity fields to define ObjectBox queries.
class Department1_ {
  /// see [Department1.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Department1>(_entities[19].properties[0]);

  /// see [Department1.id]
  static final id =
      obx.QueryStringProperty<Department1>(_entities[19].properties[1]);

  /// see [Department1.name]
  static final name =
      obx.QueryStringProperty<Department1>(_entities[19].properties[2]);

  /// see [Department1.fName]
  static final fName =
      obx.QueryStringProperty<Department1>(_entities[19].properties[3]);

  /// see [Department1.displayOrder]
  static final displayOrder =
      obx.QueryIntegerProperty<Department1>(_entities[19].properties[4]);

  /// see [Department1.imageUrl]
  static final imageUrl =
      obx.QueryStringProperty<Department1>(_entities[19].properties[5]);

  /// see [Department1.categories]
  static final categories = obx.QueryRelationToMany<Department1, Category>(
      _entities[19].relations[0]);
}

/// [Device] entity fields to define ObjectBox queries.
class Device_ {
  /// see [Device.id]
  static final id =
      obx.QueryIntegerProperty<Device>(_entities[20].properties[0]);

  /// see [Device.deviceId]
  static final deviceId =
      obx.QueryStringProperty<Device>(_entities[20].properties[1]);

  /// see [Device.deviceTypeId]
  static final deviceTypeId =
      obx.QueryStringProperty<Device>(_entities[20].properties[2]);

  /// see [Device.deviceModelId]
  static final deviceModelId =
      obx.QueryStringProperty<Device>(_entities[20].properties[3]);

  /// see [Device.deviceTypeCode]
  static final deviceTypeCode =
      obx.QueryIntegerProperty<Device>(_entities[20].properties[4]);

  /// see [Device.masterDeviceNo]
  static final masterDeviceNo =
      obx.QueryIntegerProperty<Device>(_entities[20].properties[5]);

  /// see [Device.reference]
  static final reference =
      obx.QueryStringProperty<Device>(_entities[20].properties[6]);

  /// see [Device.name]
  static final name =
      obx.QueryStringProperty<Device>(_entities[20].properties[7]);

  /// see [Device.fName]
  static final fName =
      obx.QueryStringProperty<Device>(_entities[20].properties[8]);

  /// see [Device.enableOnlineOrderReceiver]
  static final enableOnlineOrderReceiver =
      obx.QueryBooleanProperty<Device>(_entities[20].properties[9]);

  /// see [Device.model]
  static final model =
      obx.QueryStringProperty<Device>(_entities[20].properties[10]);

  /// see [Device.systemVersion]
  static final systemVersion =
      obx.QueryStringProperty<Device>(_entities[20].properties[11]);

  /// see [Device.appVersion]
  static final appVersion =
      obx.QueryStringProperty<Device>(_entities[20].properties[12]);

  /// see [Device.build]
  static final build =
      obx.QueryStringProperty<Device>(_entities[20].properties[13]);

  /// see [Device.latitude]
  static final latitude =
      obx.QueryStringProperty<Device>(_entities[20].properties[14]);

  /// see [Device.longitude]
  static final longitude =
      obx.QueryStringProperty<Device>(_entities[20].properties[15]);

  /// see [Device.connectionIPAddress]
  static final connectionIPAddress =
      obx.QueryStringProperty<Device>(_entities[20].properties[16]);

  /// see [Device.connectionPort]
  static final connectionPort =
      obx.QueryIntegerProperty<Device>(_entities[20].properties[17]);

  /// see [Device.connectionType]
  static final connectionType =
      obx.QueryIntegerProperty<Device>(_entities[20].properties[18]);

  /// see [Device.imei]
  static final imei =
      obx.QueryStringProperty<Device>(_entities[20].properties[19]);

  /// see [Device.orderTypes]
  static final orderTypes =
      obx.QueryIntegerVectorProperty<Device>(_entities[20].properties[20]);

  /// see [Device.refrencePrefix]
  static final refrencePrefix =
      obx.QueryStringProperty<Device>(_entities[20].properties[21]);

  /// see [Device.ip]
  static final ip =
      obx.QueryStringProperty<Device>(_entities[20].properties[22]);

  /// see [Device.info]
  static final info = obx.QueryRelationToOne<Device, ActivationInfo>(
      _entities[20].properties[23]);

  /// see [Device.setting]
  static final setting = obx.QueryRelationToOne<Device, DeviceSetting>(
      _entities[20].properties[24]);

  /// see [Device.products]
  static final products =
      obx.QueryStringVectorProperty<Device>(_entities[20].properties[25]);

  /// see [Device.categories]
  static final categories =
      obx.QueryStringVectorProperty<Device>(_entities[20].properties[26]);

  /// see [Device.departments]
  static final departments =
      obx.QueryStringVectorProperty<Device>(_entities[20].properties[27]);

  /// see [Device.users]
  static final users =
      obx.QueryStringVectorProperty<Device>(_entities[20].properties[28]);

  /// see [Device.resturnatSections]
  static final resturnatSections =
      obx.QueryStringVectorProperty<Device>(_entities[20].properties[29]);
}

/// [DeviceSetting] entity fields to define ObjectBox queries.
class DeviceSetting_ {
  /// see [DeviceSetting.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<DeviceSetting>(_entities[21].properties[0]);

  /// see [DeviceSetting.dailyStartCallNumber]
  static final dailyStartCallNumber =
      obx.QueryIntegerProperty<DeviceSetting>(_entities[21].properties[1]);

  /// see [DeviceSetting.dailyReCallNumber]
  static final dailyReCallNumber =
      obx.QueryIntegerProperty<DeviceSetting>(_entities[21].properties[2]);

  /// see [DeviceSetting.newOrderDefaultType]
  static final newOrderDefaultType =
      obx.QueryStringProperty<DeviceSetting>(_entities[21].properties[3]);

  /// see [DeviceSetting.printLanguage]
  static final printLanguage =
      obx.QueryStringProperty<DeviceSetting>(_entities[21].properties[4]);

  /// see [DeviceSetting.defaultTag]
  static final defaultTag =
      obx.QueryStringProperty<DeviceSetting>(_entities[21].properties[5]);

  /// see [DeviceSetting.emailForDailyReport]
  static final emailForDailyReport =
      obx.QueryStringProperty<DeviceSetting>(_entities[21].properties[6]);

  /// see [DeviceSetting.emailForShiftReport]
  static final emailForShiftReport =
      obx.QueryStringProperty<DeviceSetting>(_entities[21].properties[7]);

  /// see [DeviceSetting.emailForTillReport]
  static final emailForTillReport =
      obx.QueryStringProperty<DeviceSetting>(_entities[21].properties[8]);

  /// see [DeviceSetting.autoConnectToDevices]
  static final autoConnectToDevices =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[9]);

  /// see [DeviceSetting.enableBarcodeScanner]
  static final enableBarcodeScanner =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[10]);

  /// see [DeviceSetting.acceptOnlineOrders]
  static final acceptOnlineOrders =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[11]);

  /// see [DeviceSetting.sentOnlineOrdersToKitchen]
  static final sentOnlineOrdersToKitchen =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[12]);

  /// see [DeviceSetting.printOnlineOrdersUponReceipt]
  static final printOnlineOrdersUponReceipt =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[13]);

  /// see [DeviceSetting.disableAutoPrintInvoice]
  static final disableAutoPrintInvoice =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[14]);

  /// see [DeviceSetting.readCallNumberFromMasterCasher]
  static final readCallNumberFromMasterCasher =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[15]);

  /// see [DeviceSetting.printReceiptVoucherTransactions]
  static final printReceiptVoucherTransactions =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[16]);

  /// see [DeviceSetting.forceSelectPriceList]
  static final forceSelectPriceList =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[17]);

  /// see [DeviceSetting.forceSelectChareOnProductSale]
  static final forceSelectChareOnProductSale =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[18]);

  /// see [DeviceSetting.forceRestCallNumberEveryDay]
  static final forceRestCallNumberEveryDay =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[19]);

  /// see [DeviceSetting.invoiceNumberPerfixSymoble]
  static final invoiceNumberPerfixSymoble =
      obx.QueryStringProperty<DeviceSetting>(_entities[21].properties[20]);

  /// see [DeviceSetting.invoiceNumberPerfix]
  static final invoiceNumberPerfix =
      obx.QueryStringProperty<DeviceSetting>(_entities[21].properties[21]);

  /// see [DeviceSetting.refrencePerfix]
  static final refrencePerfix =
      obx.QueryBooleanProperty<DeviceSetting>(_entities[21].properties[22]);
}

/// [Discount] entity fields to define ObjectBox queries.
class Discount_ {
  /// see [Discount.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Discount>(_entities[22].properties[0]);

  /// see [Discount.id]
  static final id =
      obx.QueryStringProperty<Discount>(_entities[22].properties[1]);

  /// see [Discount.name]
  static final name =
      obx.QueryStringProperty<Discount>(_entities[22].properties[2]);

  /// see [Discount.fName]
  static final fName =
      obx.QueryStringProperty<Discount>(_entities[22].properties[3]);

  /// see [Discount.startDate]
  static final startDate =
      obx.QueryStringProperty<Discount>(_entities[22].properties[4]);

  /// see [Discount.endDate]
  static final endDate =
      obx.QueryStringProperty<Discount>(_entities[22].properties[5]);

  /// see [Discount.startTime]
  static final startTime =
      obx.QueryStringProperty<Discount>(_entities[22].properties[6]);

  /// see [Discount.endTime]
  static final endTime =
      obx.QueryStringProperty<Discount>(_entities[22].properties[7]);

  /// see [Discount.discountAppliedTo]
  static final discountAppliedTo =
      obx.QueryIntegerProperty<Discount>(_entities[22].properties[8]);

  /// see [Discount.discountType]
  static final discountType =
      obx.QueryIntegerProperty<Discount>(_entities[22].properties[9]);

  /// see [Discount.discountPercentage]
  static final discountPercentage =
      obx.QueryDoubleProperty<Discount>(_entities[22].properties[10]);

  /// see [Discount.discountAmount]
  static final discountAmount =
      obx.QueryDoubleProperty<Discount>(_entities[22].properties[11]);

  /// see [Discount.maximumDiscountAmount]
  static final maximumDiscountAmount =
      obx.QueryDoubleProperty<Discount>(_entities[22].properties[12]);

  /// see [Discount.minimalOrderAmount]
  static final minimalOrderAmount =
      obx.QueryDoubleProperty<Discount>(_entities[22].properties[13]);

  /// see [Discount.taxable]
  static final taxable =
      obx.QueryBooleanProperty<Discount>(_entities[22].properties[14]);

  /// see [Discount.productIDs]
  static final productIDs =
      obx.QueryStringVectorProperty<Discount>(_entities[22].properties[15]);

  /// see [Discount.days]
  static final days =
      obx.QueryIntegerVectorProperty<Discount>(_entities[22].properties[16]);

  /// see [Discount.orderTypes]
  static final orderTypes =
      obx.QueryIntegerVectorProperty<Discount>(_entities[22].properties[17]);

  /// see [Discount.priceList]
  static final priceList =
      obx.QueryStringVectorProperty<Discount>(_entities[22].properties[18]);

  /// see [Discount.customers]
  static final customers =
      obx.QueryStringVectorProperty<Discount>(_entities[22].properties[19]);

  /// see [Discount.departments]
  static final departments =
      obx.QueryStringVectorProperty<Discount>(_entities[22].properties[20]);

  /// see [Discount.categories]
  static final categories =
      obx.QueryStringVectorProperty<Discount>(_entities[22].properties[21]);
}

/// [DiscountSetting] entity fields to define ObjectBox queries.
class DiscountSetting_ {
  /// see [DiscountSetting.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<DiscountSetting>(_entities[23].properties[0]);

  /// see [DiscountSetting.enableDiscount]
  static final enableDiscount =
      obx.QueryBooleanProperty<DiscountSetting>(_entities[23].properties[1]);

  /// see [DiscountSetting.enablePromotion]
  static final enablePromotion =
      obx.QueryBooleanProperty<DiscountSetting>(_entities[23].properties[2]);

  /// see [DiscountSetting.enableCoupon]
  static final enableCoupon =
      obx.QueryBooleanProperty<DiscountSetting>(_entities[23].properties[3]);

  /// see [DiscountSetting.enableTimeEvent]
  static final enableTimeEvent =
      obx.QueryBooleanProperty<DiscountSetting>(_entities[23].properties[4]);

  /// see [DiscountSetting.enableDiscountInSalesInvoice]
  static final enableDiscountInSalesInvoice =
      obx.QueryBooleanProperty<DiscountSetting>(_entities[23].properties[5]);

  /// see [DiscountSetting.enableDiscountInPurchaseInvoice]
  static final enableDiscountInPurchaseInvoice =
      obx.QueryBooleanProperty<DiscountSetting>(_entities[23].properties[6]);

  /// see [DiscountSetting.enableDiscountInSalesInvoiceProducts]
  static final enableDiscountInSalesInvoiceProducts =
      obx.QueryBooleanProperty<DiscountSetting>(_entities[23].properties[7]);

  /// see [DiscountSetting.enableDiscountInPurchaseInvoiceItems]
  static final enableDiscountInPurchaseInvoiceItems =
      obx.QueryBooleanProperty<DiscountSetting>(_entities[23].properties[8]);

  /// see [DiscountSetting.enableFreeQuantityInSalesInvoiceItems]
  static final enableFreeQuantityInSalesInvoiceItems =
      obx.QueryBooleanProperty<DiscountSetting>(_entities[23].properties[9]);

  /// see [DiscountSetting.enableFreeQuantityInPurchaseInvoiceItems]
  static final enableFreeQuantityInPurchaseInvoiceItems =
      obx.QueryBooleanProperty<DiscountSetting>(_entities[23].properties[10]);
}

/// [ExtractCategory] entity fields to define ObjectBox queries.
class ExtractCategory_ {
  /// see [ExtractCategory.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<ExtractCategory>(_entities[24].properties[0]);

  /// see [ExtractCategory.id]
  static final id =
      obx.QueryStringProperty<ExtractCategory>(_entities[24].properties[1]);

  /// see [ExtractCategory.order]
  static final order =
      obx.QueryIntegerProperty<ExtractCategory>(_entities[24].properties[2]);

  /// see [ExtractCategory.image]
  static final image =
      obx.QueryStringProperty<ExtractCategory>(_entities[24].properties[3]);

  /// see [ExtractCategory.name]
  static final name =
      obx.QueryStringProperty<ExtractCategory>(_entities[24].properties[4]);

  /// see [ExtractCategory.fName]
  static final fName =
      obx.QueryStringProperty<ExtractCategory>(_entities[24].properties[5]);
}

/// [ExtractDepartment] entity fields to define ObjectBox queries.
class ExtractDepartment_ {
  /// see [ExtractDepartment.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<ExtractDepartment>(_entities[25].properties[0]);

  /// see [ExtractDepartment.id]
  static final id =
      obx.QueryStringProperty<ExtractDepartment>(_entities[25].properties[1]);

  /// see [ExtractDepartment.order]
  static final order =
      obx.QueryIntegerProperty<ExtractDepartment>(_entities[25].properties[2]);

  /// see [ExtractDepartment.image]
  static final image =
      obx.QueryStringProperty<ExtractDepartment>(_entities[25].properties[3]);

  /// see [ExtractDepartment.name]
  static final name =
      obx.QueryStringProperty<ExtractDepartment>(_entities[25].properties[4]);

  /// see [ExtractDepartment.fName]
  static final fName =
      obx.QueryStringProperty<ExtractDepartment>(_entities[25].properties[5]);

  /// see [ExtractDepartment.categories]
  static final categories =
      obx.QueryRelationToMany<ExtractDepartment, ExtractCategory>(
          _entities[25].relations[0]);
}

/// [ExtractProduct] entity fields to define ObjectBox queries.
class ExtractProduct_ {
  /// see [ExtractProduct.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<ExtractProduct>(_entities[26].properties[0]);

  /// see [ExtractProduct.id]
  static final id =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[1]);

  /// see [ExtractProduct.name]
  static final name =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[2]);

  /// see [ExtractProduct.fName]
  static final fName =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[3]);

  /// see [ExtractProduct.sku]
  static final sku =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[4]);

  /// see [ExtractProduct.barcode]
  static final barcode =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[5]);

  /// see [ExtractProduct.productTypeId]
  static final productTypeId =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[6]);

  /// see [ExtractProduct.costType]
  static final costType =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[7]);

  /// see [ExtractProduct.priceType]
  static final priceType =
      obx.QueryIntegerProperty<ExtractProduct>(_entities[26].properties[8]);

  /// see [ExtractProduct.salesMethod]
  static final salesMethod =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[9]);

  /// see [ExtractProduct.price]
  static final price =
      obx.QueryDoubleProperty<ExtractProduct>(_entities[26].properties[10]);

  /// see [ExtractProduct.cost]
  static final cost =
      obx.QueryDoubleProperty<ExtractProduct>(_entities[26].properties[11]);

  /// see [ExtractProduct.preparationTime]
  static final preparationTime =
      obx.QueryIntegerProperty<ExtractProduct>(_entities[26].properties[12]);

  /// see [ExtractProduct.activeQRScan]
  static final activeQRScan =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[13]);

  /// see [ExtractProduct.qrScanOnSameDate]
  static final qrScanOnSameDate =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[14]);

  /// see [ExtractProduct.enableSalesDiscount]
  static final enableSalesDiscount =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[15]);

  /// see [ExtractProduct.discountPercentageLimit]
  static final discountPercentageLimit =
      obx.QueryDoubleProperty<ExtractProduct>(_entities[26].properties[16]);

  /// see [ExtractProduct.enableFreeQuantity]
  static final enableFreeQuantity =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[17]);

  /// see [ExtractProduct.enableDateExpire]
  static final enableDateExpire =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[18]);

  /// see [ExtractProduct.enableIMEISerial]
  static final enableIMEISerial =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[19]);

  /// see [ExtractProduct.enableWeights]
  static final enableWeights =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[20]);

  /// see [ExtractProduct.scanPriceFromScale]
  static final scanPriceFromScale =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[21]);

  /// see [ExtractProduct.scalePriceIncludeTax]
  static final scalePriceIncludeTax =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[22]);

  /// see [ExtractProduct.independentPrinting]
  static final independentPrinting =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[23]);

  /// see [ExtractProduct.calculateQuantityFromTotalPrice]
  static final calculateQuantityFromTotalPrice =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[24]);

  /// see [ExtractProduct.reservationRequired]
  static final reservationRequired =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[25]);

  /// see [ExtractProduct.scaleBarcodeDigits]
  static final scaleBarcodeDigits =
      obx.QueryIntegerProperty<ExtractProduct>(_entities[26].properties[26]);

  /// see [ExtractProduct.scaleProductCodeDigits]
  static final scaleProductCodeDigits =
      obx.QueryIntegerProperty<ExtractProduct>(_entities[26].properties[27]);

  /// see [ExtractProduct.scaleIntDigits]
  static final scaleIntDigits =
      obx.QueryIntegerProperty<ExtractProduct>(_entities[26].properties[28]);

  /// see [ExtractProduct.scaledecimalDigits]
  static final scaledecimalDigits =
      obx.QueryIntegerProperty<ExtractProduct>(_entities[26].properties[29]);

  /// see [ExtractProduct.scaleProductCodeFirstInBracode]
  static final scaleProductCodeFirstInBracode =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[30]);

  /// see [ExtractProduct.availableStartDateTime]
  static final availableStartDateTime =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[31]);

  /// see [ExtractProduct.availableEndDateTime]
  static final availableEndDateTime =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[32]);

  /// see [ExtractProduct.description]
  static final description =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[33]);

  /// see [ExtractProduct.fDescription]
  static final fDescription =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[34]);

  /// see [ExtractProduct.imageUrl]
  static final imageUrl =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[35]);

  /// see [ExtractProduct.calories]
  static final calories =
      obx.QueryIntegerProperty<ExtractProduct>(_entities[26].properties[36]);

  /// see [ExtractProduct.minimumLevel]
  static final minimumLevel =
      obx.QueryIntegerProperty<ExtractProduct>(_entities[26].properties[37]);

  /// see [ExtractProduct.maximumLevel]
  static final maximumLevel =
      obx.QueryIntegerProperty<ExtractProduct>(_entities[26].properties[38]);

  /// see [ExtractProduct.categoryId]
  static final categoryId =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[39]);

  /// see [ExtractProduct.departmentId]
  static final departmentId =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[40]);

  /// see [ExtractProduct.productNature]
  static final productNature =
      obx.QueryIntegerProperty<ExtractProduct>(_entities[26].properties[41]);

  /// see [ExtractProduct.active]
  static final active =
      obx.QueryBooleanProperty<ExtractProduct>(_entities[26].properties[42]);

  /// see [ExtractProduct.taxGroupId]
  static final taxGroupId =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[43]);

  /// see [ExtractProduct.subName]
  static final subName =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[44]);

  /// see [ExtractProduct.fSubName]
  static final fSubName =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[45]);

  /// see [ExtractProduct.promotionalName]
  static final promotionalName =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[46]);

  /// see [ExtractProduct.fPromotionalName]
  static final fPromotionalName =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[47]);

  /// see [ExtractProduct.tags]
  static final tags =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[48]);

  /// see [ExtractProduct.fTags]
  static final fTags =
      obx.QueryStringProperty<ExtractProduct>(_entities[26].properties[49]);

  /// see [ExtractProduct.units]
  static final units =
      obx.QueryRelationToMany<ExtractProduct, Unit>(_entities[26].relations[0]);

  /// see [ExtractProduct.groups]
  static final groups = obx.QueryRelationToMany<ExtractProduct, Group>(
      _entities[26].relations[1]);
}

/// [Fee] entity fields to define ObjectBox queries.
class Fee_ {
  /// see [Fee.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Fee>(_entities[27].properties[0]);

  /// see [Fee.id]
  static final id = obx.QueryStringProperty<Fee>(_entities[27].properties[1]);

  /// see [Fee.name]
  static final name = obx.QueryStringProperty<Fee>(_entities[27].properties[2]);

  /// see [Fee.fName]
  static final fName =
      obx.QueryStringProperty<Fee>(_entities[27].properties[3]);

  /// see [Fee.type]
  static final type =
      obx.QueryIntegerProperty<Fee>(_entities[27].properties[4]);

  /// see [Fee.valueType]
  static final valueType =
      obx.QueryIntegerProperty<Fee>(_entities[27].properties[5]);

  /// see [Fee.value]
  static final value =
      obx.QueryDoubleProperty<Fee>(_entities[27].properties[6]);

  /// see [Fee.percentage]
  static final percentage =
      obx.QueryDoubleProperty<Fee>(_entities[27].properties[7]);

  /// see [Fee.orderTypes]
  static final orderTypes =
      obx.QueryIntegerVectorProperty<Fee>(_entities[27].properties[8]);

  /// see [Fee.days]
  static final days =
      obx.QueryIntegerVectorProperty<Fee>(_entities[27].properties[9]);

  /// see [Fee.products]
  static final products =
      obx.QueryStringVectorProperty<Fee>(_entities[27].properties[10]);

  /// see [Fee.taxGroupId]
  static final taxGroupId =
      obx.QueryStringProperty<Fee>(_entities[27].properties[11]);

  /// see [Fee.applyAuto]
  static final applyAuto =
      obx.QueryBooleanProperty<Fee>(_entities[27].properties[12]);

  /// see [Fee.applyToSubtotal]
  static final applyToSubtotal =
      obx.QueryBooleanProperty<Fee>(_entities[27].properties[13]);

  /// see [Fee.applyForProducts]
  static final applyForProducts =
      obx.QueryBooleanProperty<Fee>(_entities[27].properties[14]);

  /// see [Fee.printSeparatelyInTotalInvoice]
  static final printSeparatelyInTotalInvoice =
      obx.QueryBooleanProperty<Fee>(_entities[27].properties[15]);

  /// see [Fee.amountIncludeInProductPrice]
  static final amountIncludeInProductPrice =
      obx.QueryBooleanProperty<Fee>(_entities[27].properties[16]);

  /// see [Fee.minAmountPerProduct]
  static final minAmountPerProduct =
      obx.QueryDoubleProperty<Fee>(_entities[27].properties[17]);

  /// see [Fee.maxAmountPerProduct]
  static final maxAmountPerProduct =
      obx.QueryDoubleProperty<Fee>(_entities[27].properties[18]);
}

/// [FeeValue] entity fields to define ObjectBox queries.
class FeeValue_ {
  /// see [FeeValue.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<FeeValue>(_entities[28].properties[0]);

  /// see [FeeValue.feeId]
  static final feeId =
      obx.QueryStringProperty<FeeValue>(_entities[28].properties[1]);

  /// see [FeeValue.value]
  static final value =
      obx.QueryDoubleProperty<FeeValue>(_entities[28].properties[2]);

  /// see [FeeValue.applyAuto]
  static final applyAuto =
      obx.QueryBooleanProperty<FeeValue>(_entities[28].properties[3]);

  /// see [FeeValue.taxInfo]
  static final taxInfo =
      obx.QueryRelationToOne<FeeValue, TaxInfo>(_entities[28].properties[4]);
}

/// [FreeOption] entity fields to define ObjectBox queries.
class FreeOption_ {
  /// see [FreeOption.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<FreeOption>(_entities[29].properties[0]);

  /// see [FreeOption.optionId]
  static final optionId =
      obx.QueryStringProperty<FreeOption>(_entities[29].properties[1]);

  /// see [FreeOption.freeQuantity]
  static final freeQuantity =
      obx.QueryDoubleProperty<FreeOption>(_entities[29].properties[2]);
}

/// [Group] entity fields to define ObjectBox queries.
class Group_ {
  /// see [Group.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Group>(_entities[30].properties[0]);

  /// see [Group.id]
  static final id = obx.QueryStringProperty<Group>(_entities[30].properties[1]);

  /// see [Group.groupId]
  static final groupId =
      obx.QueryStringProperty<Group>(_entities[30].properties[2]);

  /// see [Group.groupName]
  static final groupName =
      obx.QueryStringProperty<Group>(_entities[30].properties[3]);

  /// see [Group.reference]
  static final reference =
      obx.QueryStringProperty<Group>(_entities[30].properties[4]);
}

/// [Ingredient] entity fields to define ObjectBox queries.
class Ingredient_ {
  /// see [Ingredient.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Ingredient>(_entities[31].properties[0]);

  /// see [Ingredient.isActive]
  static final isActive =
      obx.QueryBooleanProperty<Ingredient>(_entities[31].properties[1]);

  /// see [Ingredient.displayOrder]
  static final displayOrder =
      obx.QueryIntegerProperty<Ingredient>(_entities[31].properties[2]);

  /// see [Ingredient.id]
  static final id =
      obx.QueryStringProperty<Ingredient>(_entities[31].properties[3]);

  /// see [Ingredient.ingredientItemId]
  static final ingredientItemId =
      obx.QueryStringProperty<Ingredient>(_entities[31].properties[4]);

  /// see [Ingredient.ingredientItemName]
  static final ingredientItemName =
      obx.QueryStringProperty<Ingredient>(_entities[31].properties[5]);

  /// see [Ingredient.barcode]
  static final barcode =
      obx.QueryStringProperty<Ingredient>(_entities[31].properties[6]);

  /// see [Ingredient.unitOfMeasureName]
  static final unitOfMeasureName =
      obx.QueryStringProperty<Ingredient>(_entities[31].properties[7]);

  /// see [Ingredient.warehouseToIngredientFactor]
  static final warehouseToIngredientFactor =
      obx.QueryDoubleProperty<Ingredient>(_entities[31].properties[8]);

  /// see [Ingredient.quantity]
  static final quantity =
      obx.QueryDoubleProperty<Ingredient>(_entities[31].properties[9]);

  /// see [Ingredient.wasteQuantity]
  static final wasteQuantity =
      obx.QueryDoubleProperty<Ingredient>(_entities[31].properties[10]);

  /// see [Ingredient.unitCost]
  static final unitCost =
      obx.QueryDoubleProperty<Ingredient>(_entities[31].properties[11]);

  /// see [Ingredient.estimatedUnitCost]
  static final estimatedUnitCost =
      obx.QueryDoubleProperty<Ingredient>(_entities[31].properties[12]);

  /// see [Ingredient.yieldPercentage]
  static final yieldPercentage =
      obx.QueryDoubleProperty<Ingredient>(_entities[31].properties[13]);

  /// see [Ingredient.orderTypes]
  static final orderTypes =
      obx.QueryStringVectorProperty<Ingredient>(_entities[31].properties[14]);
}

/// [Language] entity fields to define ObjectBox queries.
class Language_ {
  /// see [Language.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Language>(_entities[32].properties[0]);

  /// see [Language.name]
  static final name =
      obx.QueryStringProperty<Language>(_entities[32].properties[1]);

  /// see [Language.fName]
  static final fName =
      obx.QueryStringProperty<Language>(_entities[32].properties[2]);

  /// see [Language.languageCulture]
  static final languageCulture =
      obx.QueryStringProperty<Language>(_entities[32].properties[3]);

  /// see [Language.uniqueSeoCode]
  static final uniqueSeoCode =
      obx.QueryStringProperty<Language>(_entities[32].properties[4]);

  /// see [Language.rtl]
  static final rtl =
      obx.QueryBooleanProperty<Language>(_entities[32].properties[5]);
}

/// [LoginHistory] entity fields to define ObjectBox queries.
class LoginHistory_ {
  /// see [LoginHistory.id]
  static final id =
      obx.QueryIntegerProperty<LoginHistory>(_entities[33].properties[0]);

  /// see [LoginHistory.idIdentity]
  static final idIdentity =
      obx.QueryIntegerProperty<LoginHistory>(_entities[33].properties[1]);

  /// see [LoginHistory.loginTime]
  static final loginTime =
      obx.QueryStringProperty<LoginHistory>(_entities[33].properties[2]);

  /// see [LoginHistory.logoutTime]
  static final logoutTime =
      obx.QueryStringProperty<LoginHistory>(_entities[33].properties[3]);

  /// see [LoginHistory.usertId]
  static final usertId =
      obx.QueryStringProperty<LoginHistory>(_entities[33].properties[4]);

  /// see [LoginHistory.deviceNo]
  static final deviceNo =
      obx.QueryStringProperty<LoginHistory>(_entities[33].properties[5]);

  /// see [LoginHistory.deviceRef]
  static final deviceRef =
      obx.QueryStringProperty<LoginHistory>(_entities[33].properties[6]);
}

/// [LogoData] entity fields to define ObjectBox queries.
class LogoData_ {
  /// see [LogoData.id]
  static final id =
      obx.QueryIntegerProperty<LogoData>(_entities[34].properties[0]);

  /// see [LogoData.logoUrl]
  static final logoUrl =
      obx.QueryStringProperty<LogoData>(_entities[34].properties[1]);

  /// see [LogoData.logoData]
  static final logoData =
      obx.QueryByteVectorProperty<LogoData>(_entities[34].properties[2]);
}

/// [LoyaltySetting] entity fields to define ObjectBox queries.
class LoyaltySetting_ {
  /// see [LoyaltySetting.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<LoyaltySetting>(_entities[35].properties[0]);

  /// see [LoyaltySetting.enableSystem]
  static final enableSystem =
      obx.QueryBooleanProperty<LoyaltySetting>(_entities[35].properties[1]);

  /// see [LoyaltySetting.loyaltyMethod]
  static final loyaltyMethod =
      obx.QueryStringProperty<LoyaltySetting>(_entities[35].properties[2]);

  /// see [LoyaltySetting.lowestOrderPrice]
  static final lowestOrderPrice =
      obx.QueryDoubleProperty<LoyaltySetting>(_entities[35].properties[3]);

  /// see [LoyaltySetting.delayInEarningPointsMinutes]
  static final delayInEarningPointsMinutes =
      obx.QueryDoubleProperty<LoyaltySetting>(_entities[35].properties[4]);

  /// see [LoyaltySetting.bonusType]
  static final bonusType =
      obx.QueryStringProperty<LoyaltySetting>(_entities[35].properties[5]);

  /// see [LoyaltySetting.bonusValue]
  static final bonusValue =
      obx.QueryDoubleProperty<LoyaltySetting>(_entities[35].properties[6]);

  /// see [LoyaltySetting.maximumBonusLimit]
  static final maximumBonusLimit =
      obx.QueryDoubleProperty<LoyaltySetting>(_entities[35].properties[7]);

  /// see [LoyaltySetting.requiredBonusPoint]
  static final requiredBonusPoint =
      obx.QueryDoubleProperty<LoyaltySetting>(_entities[35].properties[8]);

  /// see [LoyaltySetting.bonusValidityDays]
  static final bonusValidityDays =
      obx.QueryDoubleProperty<LoyaltySetting>(_entities[35].properties[9]);

  /// see [LoyaltySetting.enableSMSNotifications]
  static final enableSMSNotifications =
      obx.QueryBooleanProperty<LoyaltySetting>(_entities[35].properties[10]);

  /// see [LoyaltySetting.displayBonusOnNewOrder]
  static final displayBonusOnNewOrder =
      obx.QueryBooleanProperty<LoyaltySetting>(_entities[35].properties[11]);

  /// see [LoyaltySetting.printBonusBalanceOnNewOrder]
  static final printBonusBalanceOnNewOrder =
      obx.QueryBooleanProperty<LoyaltySetting>(_entities[35].properties[12]);
}

/// [Menu] entity fields to define ObjectBox queries.
class Menu_ {
  /// see [Menu.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Menu>(_entities[36].properties[0]);

  /// see [Menu.id]
  static final id = obx.QueryStringProperty<Menu>(_entities[36].properties[1]);

  /// see [Menu.name]
  static final name =
      obx.QueryStringProperty<Menu>(_entities[36].properties[2]);

  /// see [Menu.fName]
  static final fName =
      obx.QueryStringProperty<Menu>(_entities[36].properties[3]);

  /// see [Menu.departments]
  static final departments =
      obx.QueryRelationToMany<Menu, MenuDepartment>(_entities[36].relations[0]);

  /// see [Menu.categories]
  static final categories =
      obx.QueryRelationToMany<Menu, MenuCategory>(_entities[36].relations[1]);

  /// see [Menu.products]
  static final products =
      obx.QueryRelationToMany<Menu, MenuProduct>(_entities[36].relations[2]);

  /// see [Menu.giftCards]
  static final giftCards =
      obx.QueryRelationToMany<Menu, MenuGiftCard>(_entities[36].relations[3]);
}

/// [MenuCategory] entity fields to define ObjectBox queries.
class MenuCategory_ {
  /// see [MenuCategory.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<MenuCategory>(_entities[37].properties[0]);

  /// see [MenuCategory.id]
  static final id =
      obx.QueryStringProperty<MenuCategory>(_entities[37].properties[1]);

  /// see [MenuCategory.order]
  static final order =
      obx.QueryIntegerProperty<MenuCategory>(_entities[37].properties[2]);
}

/// [MenuDepartment] entity fields to define ObjectBox queries.
class MenuDepartment_ {
  /// see [MenuDepartment.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<MenuDepartment>(_entities[38].properties[0]);

  /// see [MenuDepartment.id]
  static final id =
      obx.QueryStringProperty<MenuDepartment>(_entities[38].properties[1]);

  /// see [MenuDepartment.order]
  static final order =
      obx.QueryIntegerProperty<MenuDepartment>(_entities[38].properties[2]);
}

/// [MenuGiftCard] entity fields to define ObjectBox queries.
class MenuGiftCard_ {
  /// see [MenuGiftCard.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<MenuGiftCard>(_entities[39].properties[0]);

  /// see [MenuGiftCard.id]
  static final id =
      obx.QueryStringProperty<MenuGiftCard>(_entities[39].properties[1]);

  /// see [MenuGiftCard.order]
  static final order =
      obx.QueryIntegerProperty<MenuGiftCard>(_entities[39].properties[2]);
}

/// [MenuProduct] entity fields to define ObjectBox queries.
class MenuProduct_ {
  /// see [MenuProduct.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<MenuProduct>(_entities[40].properties[0]);

  /// see [MenuProduct.id]
  static final id =
      obx.QueryStringProperty<MenuProduct>(_entities[40].properties[1]);

  /// see [MenuProduct.order]
  static final order =
      obx.QueryIntegerProperty<MenuProduct>(_entities[40].properties[2]);
}

/// [Modifier] entity fields to define ObjectBox queries.
class Modifier_ {
  /// see [Modifier.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Modifier>(_entities[41].properties[0]);

  /// see [Modifier.id]
  static final id =
      obx.QueryStringProperty<Modifier>(_entities[41].properties[1]);

  /// see [Modifier.minimumOptions]
  static final minimumOptions =
      obx.QueryIntegerProperty<Modifier>(_entities[41].properties[2]);

  /// see [Modifier.maximumOptions]
  static final maximumOptions =
      obx.QueryIntegerProperty<Modifier>(_entities[41].properties[3]);

  /// see [Modifier.name]
  static final name =
      obx.QueryStringProperty<Modifier>(_entities[41].properties[4]);

  /// see [Modifier.fname]
  static final fname =
      obx.QueryStringProperty<Modifier>(_entities[41].properties[5]);

  /// see [Modifier.isUnique]
  static final isUnique =
      obx.QueryBooleanProperty<Modifier>(_entities[41].properties[6]);

  /// see [Modifier.options]
  static final options =
      obx.QueryRelationToMany<Modifier, Option>(_entities[41].relations[0]);
}

/// [Option] entity fields to define ObjectBox queries.
class Option_ {
  /// see [Option.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Option>(_entities[42].properties[0]);

  /// see [Option.id]
  static final id =
      obx.QueryStringProperty<Option>(_entities[42].properties[1]);

  /// see [Option.costType]
  static final costType =
      obx.QueryStringProperty<Option>(_entities[42].properties[2]);

  /// see [Option.modifierType]
  static final modifierType =
      obx.QueryStringProperty<Option>(_entities[42].properties[3]);

  /// see [Option.instructionType]
  static final instructionType =
      obx.QueryIntegerProperty<Option>(_entities[42].properties[4]);

  /// see [Option.price]
  static final price =
      obx.QueryDoubleProperty<Option>(_entities[42].properties[5]);

  /// see [Option.cost]
  static final cost =
      obx.QueryDoubleProperty<Option>(_entities[42].properties[6]);

  /// see [Option.calories]
  static final calories =
      obx.QueryDoubleProperty<Option>(_entities[42].properties[7]);

  /// see [Option.inStock]
  static final inStock =
      obx.QueryBooleanProperty<Option>(_entities[42].properties[8]);

  /// see [Option.isDefault]
  static final isDefault =
      obx.QueryBooleanProperty<Option>(_entities[42].properties[9]);

  /// see [Option.displayOrder]
  static final displayOrder =
      obx.QueryIntegerProperty<Option>(_entities[42].properties[10]);

  /// see [Option.name]
  static final name =
      obx.QueryStringProperty<Option>(_entities[42].properties[11]);

  /// see [Option.fname]
  static final fname =
      obx.QueryStringProperty<Option>(_entities[42].properties[12]);

  /// see [Option.taxGroupId]
  static final taxGroupId =
      obx.QueryStringProperty<Option>(_entities[42].properties[13]);
}

/// [OrderC] entity fields to define ObjectBox queries.
class OrderC_ {
  /// see [OrderC.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<OrderC>(_entities[43].properties[0]);

  /// see [OrderC.invoiceNumber]
  static final invoiceNumber =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[1]);

  /// see [OrderC.deviceId]
  static final deviceId =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[2]);

  /// see [OrderC.startDate]
  static final startDate =
      obx.QueryDateProperty<OrderC>(_entities[43].properties[3]);

  /// see [OrderC.timeOfReceipt]
  static final timeOfReceipt =
      obx.QueryDateProperty<OrderC>(_entities[43].properties[4]);

  /// see [OrderC.parentOrderId]
  static final parentOrderId =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[5]);

  /// see [OrderC.splitIndex]
  static final splitIndex =
      obx.QueryIntegerProperty<OrderC>(_entities[43].properties[6]);

  /// see [OrderC.orderRef]
  static final orderRef =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[7]);

  /// see [OrderC.callName]
  static final callName =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[8]);

  /// see [OrderC.orderType]
  static final orderType =
      obx.QueryIntegerProperty<OrderC>(_entities[43].properties[9]);

  /// see [OrderC.status]
  static final status =
      obx.QueryIntegerProperty<OrderC>(_entities[43].properties[10]);

  /// see [OrderC.orderSource]
  static final orderSource =
      obx.QueryIntegerProperty<OrderC>(_entities[43].properties[11]);

  /// see [OrderC.endTime]
  static final endTime =
      obx.QueryDateProperty<OrderC>(_entities[43].properties[12]);

  /// see [OrderC.deliveryCompanyInfo]
  static final deliveryCompanyInfo =
      obx.QueryRelationToOne<OrderC, DeliveryCompanyInfo>(
          _entities[43].properties[13]);

  /// see [OrderC.tableId]
  static final tableId =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[14]);

  /// see [OrderC.tableCaption]
  static final tableCaption =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[15]);

  /// see [OrderC.numberVistor]
  static final numberVistor =
      obx.QueryIntegerProperty<OrderC>(_entities[43].properties[16]);

  /// see [OrderC.minimumReservationPrice]
  static final minimumReservationPrice =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[17]);

  /// see [OrderC.customer]
  static final customer =
      obx.QueryRelationToOne<OrderC, Customer>(_entities[43].properties[18]);

  /// see [OrderC.address]
  static final address =
      obx.QueryRelationToOne<OrderC, Address>(_entities[43].properties[19]);

  /// see [OrderC.promotion]
  static final promotion =
      obx.QueryRelationToOne<OrderC, Promotion>(_entities[43].properties[20]);

  /// see [OrderC.discount]
  static final discount =
      obx.QueryRelationToOne<OrderC, Discount>(_entities[43].properties[21]);

  /// see [OrderC.priceDiscount]
  static final priceDiscount =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[22]);

  /// see [OrderC.pricePromotion]
  static final pricePromotion =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[23]);

  /// see [OrderC.note]
  static final note =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[24]);

  /// see [OrderC.kitchenNote]
  static final kitchenNote =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[25]);

  /// see [OrderC.msgCansel]
  static final msgCansel =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[26]);

  /// see [OrderC.subTotal]
  static final subTotal =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[27]);

  /// see [OrderC.checksum]
  static final checksum =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[28]);

  /// see [OrderC.masterChecksum]
  static final masterChecksum =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[29]);

  /// see [OrderC.serverChecksum]
  static final serverChecksum =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[30]);

  /// see [OrderC.totalFee]
  static final totalFee =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[31]);

  /// see [OrderC.taxPrice]
  static final taxPrice =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[32]);

  /// see [OrderC.totalPaid]
  static final totalPaid =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[33]);

  /// see [OrderC.shiftId]
  static final shiftId =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[34]);

  /// see [OrderC.tillId]
  static final tillId =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[35]);

  /// see [OrderC.totalCalories]
  static final totalCalories =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[36]);

  /// see [OrderC.totalDiscountForOrderAndProduct]
  static final totalDiscountForOrderAndProduct =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[37]);

  /// see [OrderC.priceListId]
  static final priceListId =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[38]);

  /// see [OrderC.posTransactionType]
  static final posTransactionType =
      obx.QueryIntegerProperty<OrderC>(_entities[43].properties[39]);

  /// see [OrderC.callNumber]
  static final callNumber =
      obx.QueryIntegerProperty<OrderC>(_entities[43].properties[40]);

  /// see [OrderC.giftCard]
  static final giftCard = obx.QueryRelationToOne<OrderC, SendGiftCard>(
      _entities[43].properties[41]);

  /// see [OrderC.paymentStatus]
  static final paymentStatus =
      obx.QueryIntegerProperty<OrderC>(_entities[43].properties[42]);

  /// see [OrderC.refundStatus]
  static final refundStatus =
      obx.QueryIntegerProperty<OrderC>(_entities[43].properties[43]);

  /// see [OrderC.deliveryStatus]
  static final deliveryStatus =
      obx.QueryIntegerProperty<OrderC>(_entities[43].properties[44]);

  /// see [OrderC.roundingAmount]
  static final roundingAmount =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[45]);

  /// see [OrderC.tipAmount]
  static final tipAmount =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[46]);

  /// see [OrderC.donationAmount]
  static final donationAmount =
      obx.QueryDoubleProperty<OrderC>(_entities[43].properties[47]);

  /// see [OrderC.donationForId]
  static final donationForId =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[48]);

  /// see [OrderC.supervisorId]
  static final supervisorId =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[49]);

  /// see [OrderC.reference]
  static final reference =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[50]);

  /// see [OrderC.casherNote]
  static final casherNote =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[51]);

  /// see [OrderC.trackingStatusId]
  static final trackingStatusId =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[52]);

  /// see [OrderC.couponId]
  static final couponId =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[53]);

  /// see [OrderC.createdOn]
  static final createdOn =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[54]);

  /// see [OrderC.createdBy]
  static final createdBy =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[55]);

  /// see [OrderC.lastModifiedBy]
  static final lastModifiedBy =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[56]);

  /// see [OrderC.lastModifiedOn]
  static final lastModifiedOn =
      obx.QueryStringProperty<OrderC>(_entities[43].properties[57]);

  /// see [OrderC.products]
  static final products = obx.QueryRelationToMany<OrderC, AppliedProduct>(
      _entities[43].relations[0]);

  /// see [OrderC.fees]
  static final fees =
      obx.QueryRelationToMany<OrderC, Fee>(_entities[43].relations[1]);

  /// see [OrderC.feeValues]
  static final feeValues =
      obx.QueryRelationToMany<OrderC, FeeValue>(_entities[43].relations[2]);

  /// see [OrderC.payments]
  static final payments =
      obx.QueryRelationToMany<OrderC, PaymentValue>(_entities[43].relations[3]);
}

/// [PaymentMethod] entity fields to define ObjectBox queries.
class PaymentMethod_ {
  /// see [PaymentMethod.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<PaymentMethod>(_entities[44].properties[0]);

  /// see [PaymentMethod.id]
  static final id =
      obx.QueryStringProperty<PaymentMethod>(_entities[44].properties[1]);

  /// see [PaymentMethod.name]
  static final name =
      obx.QueryStringProperty<PaymentMethod>(_entities[44].properties[2]);

  /// see [PaymentMethod.fName]
  static final fName =
      obx.QueryStringProperty<PaymentMethod>(_entities[44].properties[3]);

  /// see [PaymentMethod.paymentType]
  static final paymentType =
      obx.QueryIntegerProperty<PaymentMethod>(_entities[44].properties[4]);

  /// see [PaymentMethod.displayOrder]
  static final displayOrder =
      obx.QueryIntegerProperty<PaymentMethod>(_entities[44].properties[5]);

  /// see [PaymentMethod.isActive]
  static final isActive =
      obx.QueryBooleanProperty<PaymentMethod>(_entities[44].properties[6]);

  /// see [PaymentMethod.isDeleted]
  static final isDeleted =
      obx.QueryBooleanProperty<PaymentMethod>(_entities[44].properties[7]);

  /// see [PaymentMethod.autoOpenCashDrawer]
  static final autoOpenCashDrawer =
      obx.QueryBooleanProperty<PaymentMethod>(_entities[44].properties[8]);

  /// see [PaymentMethod.imageUrl]
  static final imageUrl =
      obx.QueryStringProperty<PaymentMethod>(_entities[44].properties[9]);
}

/// [PaymentValue] entity fields to define ObjectBox queries.
class PaymentValue_ {
  /// see [PaymentValue.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<PaymentValue>(_entities[45].properties[0]);

  /// see [PaymentValue.refreance]
  static final refreance =
      obx.QueryStringProperty<PaymentValue>(_entities[45].properties[1]);

  /// see [PaymentValue.method]
  static final method = obx.QueryRelationToOne<PaymentValue, PaymentMethod>(
      _entities[45].properties[2]);

  /// see [PaymentValue.amt]
  static final amt =
      obx.QueryDoubleProperty<PaymentValue>(_entities[45].properties[3]);

  /// see [PaymentValue.remainAmt]
  static final remainAmt =
      obx.QueryDoubleProperty<PaymentValue>(_entities[45].properties[4]);

  /// see [PaymentValue.exchangeRate]
  static final exchangeRate =
      obx.QueryDoubleProperty<PaymentValue>(_entities[45].properties[5]);

  /// see [PaymentValue.amountCurecny]
  static final amountCurecny =
      obx.QueryDoubleProperty<PaymentValue>(_entities[45].properties[6]);

  /// see [PaymentValue.currencyCode]
  static final currencyCode =
      obx.QueryStringProperty<PaymentValue>(_entities[45].properties[7]);

  /// see [PaymentValue.defaultCurrencyId]
  static final defaultCurrencyId =
      obx.QueryStringProperty<PaymentValue>(_entities[45].properties[8]);
}

/// [PolicySetting] entity fields to define ObjectBox queries.
class PolicySetting_ {
  /// see [PolicySetting.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<PolicySetting>(_entities[46].properties[0]);

  /// see [PolicySetting.enableOrderCancelation]
  static final enableOrderCancelation =
      obx.QueryBooleanProperty<PolicySetting>(_entities[46].properties[1]);

  /// see [PolicySetting.enablePosRefund]
  static final enablePosRefund =
      obx.QueryBooleanProperty<PolicySetting>(_entities[46].properties[2]);

  /// see [PolicySetting.enableUsingExpiredTicket]
  static final enableUsingExpiredTicket =
      obx.QueryBooleanProperty<PolicySetting>(_entities[46].properties[3]);

  /// see [PolicySetting.orderPolicyAR]
  static final orderPolicyAR =
      obx.QueryStringProperty<PolicySetting>(_entities[46].properties[4]);

  /// see [PolicySetting.orderPolicyEN]
  static final orderPolicyEN =
      obx.QueryStringProperty<PolicySetting>(_entities[46].properties[5]);
}

/// [PosUser] entity fields to define ObjectBox queries.
class PosUser_ {
  /// see [PosUser.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<PosUser>(_entities[47].properties[0]);

  /// see [PosUser.id]
  static final id =
      obx.QueryStringProperty<PosUser>(_entities[47].properties[1]);

  /// see [PosUser.name]
  static final name =
      obx.QueryStringProperty<PosUser>(_entities[47].properties[2]);

  /// see [PosUser.phoneNumber]
  static final phoneNumber =
      obx.QueryStringProperty<PosUser>(_entities[47].properties[3]);

  /// see [PosUser.passwordHash]
  static final passwordHash =
      obx.QueryStringProperty<PosUser>(_entities[47].properties[4]);

  /// see [PosUser.pin]
  static final pin =
      obx.QueryIntegerProperty<PosUser>(_entities[47].properties[5]);

  /// see [PosUser.pinMD5]
  static final pinMD5 =
      obx.QueryStringProperty<PosUser>(_entities[47].properties[6]);

  /// see [PosUser.imageUrl]
  static final imageUrl =
      obx.QueryStringProperty<PosUser>(_entities[47].properties[7]);

  /// see [PosUser.orderTypes]
  static final orderTypes =
      obx.QueryIntegerVectorProperty<PosUser>(_entities[47].properties[8]);

  /// see [PosUser.appslanguageCode]
  static final appslanguageCode =
      obx.QueryStringProperty<PosUser>(_entities[47].properties[9]);

  /// see [PosUser.appsDataLanguageCode]
  static final appsDataLanguageCode =
      obx.QueryStringProperty<PosUser>(_entities[47].properties[10]);

  /// see [PosUser.dashboardlanguageCode]
  static final dashboardlanguageCode =
      obx.QueryStringProperty<PosUser>(_entities[47].properties[11]);

  /// see [PosUser.cashierSetting]
  static final cashierSetting =
      obx.QueryRelationToOne<PosUser, UserCashierSetting>(
          _entities[47].properties[12]);

  /// see [PosUser.roles]
  static final roles =
      obx.QueryRelationToMany<PosUser, Roles>(_entities[47].relations[0]);
}

/// [PriceList] entity fields to define ObjectBox queries.
class PriceList_ {
  /// see [PriceList.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<PriceList>(_entities[48].properties[0]);

  /// see [PriceList.id]
  static final id =
      obx.QueryStringProperty<PriceList>(_entities[48].properties[1]);

  /// see [PriceList.name]
  static final name =
      obx.QueryStringProperty<PriceList>(_entities[48].properties[2]);

  /// see [PriceList.fName]
  static final fName =
      obx.QueryStringProperty<PriceList>(_entities[48].properties[3]);

  /// see [PriceList.priceIncludeTax]
  static final priceIncludeTax =
      obx.QueryBooleanProperty<PriceList>(_entities[48].properties[4]);
}

/// [PriceListValue] entity fields to define ObjectBox queries.
class PriceListValue_ {
  /// see [PriceListValue.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<PriceListValue>(_entities[49].properties[0]);

  /// see [PriceListValue.id]
  static final id =
      obx.QueryStringProperty<PriceListValue>(_entities[49].properties[1]);

  /// see [PriceListValue.price]
  static final price =
      obx.QueryDoubleProperty<PriceListValue>(_entities[49].properties[2]);

  /// see [PriceListValue.slaps]
  static final slaps = obx.QueryRelationToMany<PriceListValue, Slaps>(
      _entities[49].relations[0]);
}

/// [Printer] entity fields to define ObjectBox queries.
class Printer_ {
  /// see [Printer.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Printer>(_entities[50].properties[0]);

  /// see [Printer.id]
  static final id =
      obx.QueryStringProperty<Printer>(_entities[50].properties[1]);

  /// see [Printer.name]
  static final name =
      obx.QueryStringProperty<Printer>(_entities[50].properties[2]);

  /// see [Printer.fName]
  static final fName =
      obx.QueryStringProperty<Printer>(_entities[50].properties[3]);

  /// see [Printer.deviceId]
  static final deviceId =
      obx.QueryStringProperty<Printer>(_entities[50].properties[4]);

  /// see [Printer.printerModelId]
  static final printerModelId =
      obx.QueryStringProperty<Printer>(_entities[50].properties[5]);

  /// see [Printer.connectionType]
  static final connectionType =
      obx.QueryIntegerProperty<Printer>(_entities[50].properties[6]);

  /// see [Printer.ipAddress]
  static final ipAddress =
      obx.QueryStringProperty<Printer>(_entities[50].properties[7]);

  /// see [Printer.printerType]
  static final printerType =
      obx.QueryIntegerProperty<Printer>(_entities[50].properties[8]);

  /// see [Printer.printTo]
  static final printTo =
      obx.QueryIntegerProperty<Printer>(_entities[50].properties[9]);

  /// see [Printer.port]
  static final port =
      obx.QueryIntegerProperty<Printer>(_entities[50].properties[10]);

  /// see [Printer.products]
  static final products =
      obx.QueryStringVectorProperty<Printer>(_entities[50].properties[11]);

  /// see [Printer.departments]
  static final departments =
      obx.QueryStringVectorProperty<Printer>(_entities[50].properties[12]);

  /// see [Printer.categories]
  static final categories =
      obx.QueryStringVectorProperty<Printer>(_entities[50].properties[13]);

  /// see [Printer.orderTypes]
  static final orderTypes =
      obx.QueryIntegerVectorProperty<Printer>(_entities[50].properties[14]);

  /// see [Printer.settings]
  static final settings = obx.QueryRelationToMany<Printer, PrinterSetting>(
      _entities[50].relations[0]);
}

/// [PrinterSetting] entity fields to define ObjectBox queries.
class PrinterSetting_ {
  /// see [PrinterSetting.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<PrinterSetting>(_entities[51].properties[0]);

  /// see [PrinterSetting.id]
  static final id =
      obx.QueryStringProperty<PrinterSetting>(_entities[51].properties[1]);

  /// see [PrinterSetting.printerId]
  static final printerId =
      obx.QueryStringProperty<PrinterSetting>(_entities[51].properties[2]);

  /// see [PrinterSetting.paperSize]
  static final paperSize =
      obx.QueryStringProperty<PrinterSetting>(_entities[51].properties[3]);

  /// see [PrinterSetting.scale]
  static final scale =
      obx.QueryIntegerProperty<PrinterSetting>(_entities[51].properties[4]);

  /// see [PrinterSetting.imageCutterFactor]
  static final imageCutterFactor =
      obx.QueryIntegerProperty<PrinterSetting>(_entities[51].properties[5]);

  /// see [PrinterSetting.cutterCommandCode]
  static final cutterCommandCode =
      obx.QueryStringProperty<PrinterSetting>(_entities[51].properties[6]);

  /// see [PrinterSetting.autoPrint]
  static final autoPrint =
      obx.QueryBooleanProperty<PrinterSetting>(_entities[51].properties[7]);

  /// see [PrinterSetting.numberOfCopy]
  static final numberOfCopy =
      obx.QueryIntegerProperty<PrinterSetting>(_entities[51].properties[8]);
}

/// [Product1] entity fields to define ObjectBox queries.
class Product1_ {
  /// see [Product1.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Product1>(_entities[52].properties[0]);

  /// see [Product1.id]
  static final id =
      obx.QueryStringProperty<Product1>(_entities[52].properties[1]);

  /// see [Product1.name]
  static final name =
      obx.QueryStringProperty<Product1>(_entities[52].properties[2]);

  /// see [Product1.fName]
  static final fName =
      obx.QueryStringProperty<Product1>(_entities[52].properties[3]);

  /// see [Product1.sku]
  static final sku =
      obx.QueryStringProperty<Product1>(_entities[52].properties[4]);

  /// see [Product1.barcode]
  static final barcode =
      obx.QueryStringProperty<Product1>(_entities[52].properties[5]);

  /// see [Product1.productTypeId]
  static final productTypeId =
      obx.QueryStringProperty<Product1>(_entities[52].properties[6]);

  /// see [Product1.costType]
  static final costType =
      obx.QueryStringProperty<Product1>(_entities[52].properties[7]);

  /// see [Product1.priceType]
  static final priceType =
      obx.QueryIntegerProperty<Product1>(_entities[52].properties[8]);

  /// see [Product1.salesMethod]
  static final salesMethod =
      obx.QueryStringProperty<Product1>(_entities[52].properties[9]);

  /// see [Product1.price]
  static final price =
      obx.QueryDoubleProperty<Product1>(_entities[52].properties[10]);

  /// see [Product1.cost]
  static final cost =
      obx.QueryDoubleProperty<Product1>(_entities[52].properties[11]);

  /// see [Product1.preparationTime]
  static final preparationTime =
      obx.QueryIntegerProperty<Product1>(_entities[52].properties[12]);

  /// see [Product1.activeQRScan]
  static final activeQRScan =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[13]);

  /// see [Product1.qrScanOnSameDate]
  static final qrScanOnSameDate =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[14]);

  /// see [Product1.enableSalesDiscount]
  static final enableSalesDiscount =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[15]);

  /// see [Product1.discountPercentageLimit]
  static final discountPercentageLimit =
      obx.QueryDoubleProperty<Product1>(_entities[52].properties[16]);

  /// see [Product1.enableFreeQuantity]
  static final enableFreeQuantity =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[17]);

  /// see [Product1.enableDateExpire]
  static final enableDateExpire =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[18]);

  /// see [Product1.enableIMEISerial]
  static final enableIMEISerial =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[19]);

  /// see [Product1.enableWeights]
  static final enableWeights =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[20]);

  /// see [Product1.scanPriceFromScale]
  static final scanPriceFromScale =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[21]);

  /// see [Product1.scalePriceIncludeTax]
  static final scalePriceIncludeTax =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[22]);

  /// see [Product1.independentPrinting]
  static final independentPrinting =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[23]);

  /// see [Product1.calculateQuantityFromTotalPrice]
  static final calculateQuantityFromTotalPrice =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[24]);

  /// see [Product1.reservationRequired]
  static final reservationRequired =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[25]);

  /// see [Product1.scaleBarcodeDigits]
  static final scaleBarcodeDigits =
      obx.QueryIntegerProperty<Product1>(_entities[52].properties[26]);

  /// see [Product1.scaleProductCodeDigits]
  static final scaleProductCodeDigits =
      obx.QueryIntegerProperty<Product1>(_entities[52].properties[27]);

  /// see [Product1.scaleIntDigits]
  static final scaleIntDigits =
      obx.QueryIntegerProperty<Product1>(_entities[52].properties[28]);

  /// see [Product1.scaledecimalDigits]
  static final scaledecimalDigits =
      obx.QueryIntegerProperty<Product1>(_entities[52].properties[29]);

  /// see [Product1.scaleProductCodeFirstInBracode]
  static final scaleProductCodeFirstInBracode =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[30]);

  /// see [Product1.availableStartDateTime]
  static final availableStartDateTime =
      obx.QueryStringProperty<Product1>(_entities[52].properties[31]);

  /// see [Product1.availableEndDateTime]
  static final availableEndDateTime =
      obx.QueryStringProperty<Product1>(_entities[52].properties[32]);

  /// see [Product1.description]
  static final description =
      obx.QueryStringProperty<Product1>(_entities[52].properties[33]);

  /// see [Product1.fDescription]
  static final fDescription =
      obx.QueryStringProperty<Product1>(_entities[52].properties[34]);

  /// see [Product1.imageUrl]
  static final imageUrl =
      obx.QueryStringProperty<Product1>(_entities[52].properties[35]);

  /// see [Product1.calories]
  static final calories =
      obx.QueryIntegerProperty<Product1>(_entities[52].properties[36]);

  /// see [Product1.minimumLevel]
  static final minimumLevel =
      obx.QueryIntegerProperty<Product1>(_entities[52].properties[37]);

  /// see [Product1.maximumLevel]
  static final maximumLevel =
      obx.QueryIntegerProperty<Product1>(_entities[52].properties[38]);

  /// see [Product1.categoryId]
  static final categoryId =
      obx.QueryStringProperty<Product1>(_entities[52].properties[39]);

  /// see [Product1.departmentId]
  static final departmentId =
      obx.QueryStringProperty<Product1>(_entities[52].properties[40]);

  /// see [Product1.productNature]
  static final productNature =
      obx.QueryIntegerProperty<Product1>(_entities[52].properties[41]);

  /// see [Product1.active]
  static final active =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[42]);

  /// see [Product1.taxGroupId]
  static final taxGroupId =
      obx.QueryStringProperty<Product1>(_entities[52].properties[43]);

  /// see [Product1.subName]
  static final subName =
      obx.QueryStringProperty<Product1>(_entities[52].properties[44]);

  /// see [Product1.fSubName]
  static final fSubName =
      obx.QueryStringProperty<Product1>(_entities[52].properties[45]);

  /// see [Product1.promotionalName]
  static final promotionalName =
      obx.QueryStringProperty<Product1>(_entities[52].properties[46]);

  /// see [Product1.fPromotionalName]
  static final fPromotionalName =
      obx.QueryStringProperty<Product1>(_entities[52].properties[47]);

  /// see [Product1.tags]
  static final tags =
      obx.QueryStringProperty<Product1>(_entities[52].properties[48]);

  /// see [Product1.fTags]
  static final fTags =
      obx.QueryStringProperty<Product1>(_entities[52].properties[49]);

  /// see [Product1.showAlertPreparationTime]
  static final showAlertPreparationTime =
      obx.QueryBooleanProperty<Product1>(_entities[52].properties[50]);

  /// see [Product1.units]
  static final units =
      obx.QueryRelationToMany<Product1, Unit>(_entities[52].relations[0]);

  /// see [Product1.modifiers]
  static final modifiers =
      obx.QueryRelationToMany<Product1, Modifier>(_entities[52].relations[1]);

  /// see [Product1.ingredients]
  static final ingredients =
      obx.QueryRelationToMany<Product1, Ingredient>(_entities[52].relations[2]);

  /// see [Product1.groups]
  static final groups =
      obx.QueryRelationToMany<Product1, Group>(_entities[52].relations[3]);
}

/// [ProductPriceList] entity fields to define ObjectBox queries.
class ProductPriceList_ {
  /// see [ProductPriceList.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<ProductPriceList>(_entities[53].properties[0]);

  /// see [ProductPriceList.id]
  static final id =
      obx.QueryStringProperty<ProductPriceList>(_entities[53].properties[1]);

  /// see [ProductPriceList.price]
  static final price =
      obx.QueryDoubleProperty<ProductPriceList>(_entities[53].properties[2]);
}

/// [Promotion] entity fields to define ObjectBox queries.
class Promotion_ {
  /// see [Promotion.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Promotion>(_entities[54].properties[0]);

  /// see [Promotion.id]
  static final id =
      obx.QueryStringProperty<Promotion>(_entities[54].properties[1]);

  /// see [Promotion.name]
  static final name =
      obx.QueryStringProperty<Promotion>(_entities[54].properties[2]);

  /// see [Promotion.fName]
  static final fName =
      obx.QueryStringProperty<Promotion>(_entities[54].properties[3]);

  /// see [Promotion.startDate]
  static final startDate =
      obx.QueryStringProperty<Promotion>(_entities[54].properties[4]);

  /// see [Promotion.endDate]
  static final endDate =
      obx.QueryStringProperty<Promotion>(_entities[54].properties[5]);

  /// see [Promotion.startTime]
  static final startTime =
      obx.QueryStringProperty<Promotion>(_entities[54].properties[6]);

  /// see [Promotion.endTime]
  static final endTime =
      obx.QueryStringProperty<Promotion>(_entities[54].properties[7]);

  /// see [Promotion.promotionType]
  static final promotionType =
      obx.QueryIntegerProperty<Promotion>(_entities[54].properties[8]);

  /// see [Promotion.discountType]
  static final discountType =
      obx.QueryIntegerProperty<Promotion>(_entities[54].properties[9]);

  /// see [Promotion.discountPercentage]
  static final discountPercentage =
      obx.QueryDoubleProperty<Promotion>(_entities[54].properties[10]);

  /// see [Promotion.discountAmount]
  static final discountAmount =
      obx.QueryDoubleProperty<Promotion>(_entities[54].properties[11]);

  /// see [Promotion.maximumDiscountAmount]
  static final maximumDiscountAmount =
      obx.QueryDoubleProperty<Promotion>(_entities[54].properties[12]);

  /// see [Promotion.promotionApplyType]
  static final promotionApplyType =
      obx.QueryIntegerProperty<Promotion>(_entities[54].properties[13]);

  /// see [Promotion.customerQuantity]
  static final customerQuantity =
      obx.QueryDoubleProperty<Promotion>(_entities[54].properties[14]);

  /// see [Promotion.customerAmount]
  static final customerAmount =
      obx.QueryDoubleProperty<Promotion>(_entities[54].properties[15]);

  /// see [Promotion.promotionApplyToType]
  static final promotionApplyToType =
      obx.QueryIntegerProperty<Promotion>(_entities[54].properties[16]);

  /// see [Promotion.days]
  static final days =
      obx.QueryIntegerVectorProperty<Promotion>(_entities[54].properties[17]);

  /// see [Promotion.orderTypes]
  static final orderTypes =
      obx.QueryIntegerVectorProperty<Promotion>(_entities[54].properties[18]);

  /// see [Promotion.purchaseProducts]
  static final purchaseProducts =
      obx.QueryStringVectorProperty<Promotion>(_entities[54].properties[19]);

  /// see [Promotion.discountProducts]
  static final discountProducts =
      obx.QueryStringVectorProperty<Promotion>(_entities[54].properties[20]);

  /// see [Promotion.priority]
  static final priority =
      obx.QueryIntegerProperty<Promotion>(_entities[54].properties[21]);
}

/// [ReasonsCanceling] entity fields to define ObjectBox queries.
class ReasonsCanceling_ {
  /// see [ReasonsCanceling.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<ReasonsCanceling>(_entities[55].properties[0]);

  /// see [ReasonsCanceling.id]
  static final id =
      obx.QueryStringProperty<ReasonsCanceling>(_entities[55].properties[1]);

  /// see [ReasonsCanceling.name]
  static final name =
      obx.QueryStringProperty<ReasonsCanceling>(_entities[55].properties[2]);

  /// see [ReasonsCanceling.fName]
  static final fName =
      obx.QueryStringProperty<ReasonsCanceling>(_entities[55].properties[3]);
}

/// [ReasonsDrawerOpen] entity fields to define ObjectBox queries.
class ReasonsDrawerOpen_ {
  /// see [ReasonsDrawerOpen.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<ReasonsDrawerOpen>(_entities[56].properties[0]);

  /// see [ReasonsDrawerOpen.id]
  static final id =
      obx.QueryStringProperty<ReasonsDrawerOpen>(_entities[56].properties[1]);

  /// see [ReasonsDrawerOpen.name]
  static final name =
      obx.QueryStringProperty<ReasonsDrawerOpen>(_entities[56].properties[2]);

  /// see [ReasonsDrawerOpen.fName]
  static final fName =
      obx.QueryStringProperty<ReasonsDrawerOpen>(_entities[56].properties[3]);
}

/// [ResturantSection] entity fields to define ObjectBox queries.
class ResturantSection_ {
  /// see [ResturantSection.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<ResturantSection>(_entities[57].properties[0]);

  /// see [ResturantSection.id]
  static final id =
      obx.QueryStringProperty<ResturantSection>(_entities[57].properties[1]);

  /// see [ResturantSection.name]
  static final name =
      obx.QueryStringProperty<ResturantSection>(_entities[57].properties[2]);

  /// see [ResturantSection.fName]
  static final fName =
      obx.QueryStringProperty<ResturantSection>(_entities[57].properties[3]);

  /// see [ResturantSection.tables]
  static final tables = obx.QueryRelationToMany<ResturantSection, Table>(
      _entities[57].relations[0]);
}

/// [Roles] entity fields to define ObjectBox queries.
class Roles_ {
  /// see [Roles.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Roles>(_entities[58].properties[0]);

  /// see [Roles.id]
  static final id = obx.QueryStringProperty<Roles>(_entities[58].properties[1]);

  /// see [Roles.name]
  static final name =
      obx.QueryStringProperty<Roles>(_entities[58].properties[2]);

  /// see [Roles.claims]
  static final claims =
      obx.QueryRelationToMany<Roles, Claims>(_entities[58].relations[0]);
}

/// [SalesInvoiceTemplates] entity fields to define ObjectBox queries.
class SalesInvoiceTemplates_ {
  /// see [SalesInvoiceTemplates.idSeq]
  static final idSeq = obx.QueryIntegerProperty<SalesInvoiceTemplates>(
      _entities[59].properties[0]);

  /// see [SalesInvoiceTemplates.id]
  static final id = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[1]);

  /// see [SalesInvoiceTemplates.name]
  static final name = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[2]);

  /// see [SalesInvoiceTemplates.fName]
  static final fName = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[3]);

  /// see [SalesInvoiceTemplates.printedTitle]
  static final printedTitle = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[4]);

  /// see [SalesInvoiceTemplates.fPrintedTitle]
  static final fPrintedTitle = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[5]);

  /// see [SalesInvoiceTemplates.headerInvoiceMessage]
  static final headerInvoiceMessage =
      obx.QueryStringProperty<SalesInvoiceTemplates>(
          _entities[59].properties[6]);

  /// see [SalesInvoiceTemplates.fHeaderInvoiceMessage]
  static final fHeaderInvoiceMessage =
      obx.QueryStringProperty<SalesInvoiceTemplates>(
          _entities[59].properties[7]);

  /// see [SalesInvoiceTemplates.footerInvoiceMessage]
  static final footerInvoiceMessage =
      obx.QueryStringProperty<SalesInvoiceTemplates>(
          _entities[59].properties[8]);

  /// see [SalesInvoiceTemplates.fFooterInvoiceMessage]
  static final fFooterInvoiceMessage =
      obx.QueryStringProperty<SalesInvoiceTemplates>(
          _entities[59].properties[9]);

  /// see [SalesInvoiceTemplates.printCompanyName]
  static final printCompanyName =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[10]);

  /// see [SalesInvoiceTemplates.printBranchName]
  static final printBranchName =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[11]);

  /// see [SalesInvoiceTemplates.printCRNo]
  static final printCRNo = obx.QueryBooleanProperty<SalesInvoiceTemplates>(
      _entities[59].properties[12]);

  /// see [SalesInvoiceTemplates.printBankAccount]
  static final printBankAccount =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[13]);

  /// see [SalesInvoiceTemplates.printTaxNumber]
  static final printTaxNumber = obx.QueryBooleanProperty<SalesInvoiceTemplates>(
      _entities[59].properties[14]);

  /// see [SalesInvoiceTemplates.printPaymentType]
  static final printPaymentType =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[15]);

  /// see [SalesInvoiceTemplates.printOrderType]
  static final printOrderType = obx.QueryBooleanProperty<SalesInvoiceTemplates>(
      _entities[59].properties[16]);

  /// see [SalesInvoiceTemplates.printOrderNumber]
  static final printOrderNumber =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[17]);

  /// see [SalesInvoiceTemplates.printUnitSize]
  static final printUnitSize = obx.QueryBooleanProperty<SalesInvoiceTemplates>(
      _entities[59].properties[18]);

  /// see [SalesInvoiceTemplates.printProductSecondaryName]
  static final printProductSecondaryName =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[19]);

  /// see [SalesInvoiceTemplates.printCalories]
  static final printCalories = obx.QueryBooleanProperty<SalesInvoiceTemplates>(
      _entities[59].properties[20]);

  /// see [SalesInvoiceTemplates.printSubTotal]
  static final printSubTotal = obx.QueryBooleanProperty<SalesInvoiceTemplates>(
      _entities[59].properties[21]);

  /// see [SalesInvoiceTemplates.printRoundDigit]
  static final printRoundDigit =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[22]);

  /// see [SalesInvoiceTemplates.printProductUnit]
  static final printProductUnit =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[23]);

  /// see [SalesInvoiceTemplates.printProductUnitPrice]
  static final printProductUnitPrice =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[24]);

  /// see [SalesInvoiceTemplates.printProductTotalPrice]
  static final printProductTotalPrice =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[25]);

  /// see [SalesInvoiceTemplates.printProductDiscountPrice]
  static final printProductDiscountPrice =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[26]);

  /// see [SalesInvoiceTemplates.printProductFreeQuantity]
  static final printProductFreeQuantity =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[27]);

  /// see [SalesInvoiceTemplates.printProductTotalPriceBeforeTax]
  static final printProductTotalPriceBeforeTax =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[28]);

  /// see [SalesInvoiceTemplates.printProductTaxAmount]
  static final printProductTaxAmount =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[29]);

  /// see [SalesInvoiceTemplates.printProductTaxPercentage]
  static final printProductTaxPercentage =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[30]);

  /// see [SalesInvoiceTemplates.printProductTotalPriceAfterDiscount]
  static final printProductTotalPriceAfterDiscount =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[31]);

  /// see [SalesInvoiceTemplates.printProductTotalPriceIncludeTax]
  static final printProductTotalPriceIncludeTax =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[32]);

  /// see [SalesInvoiceTemplates.printOrderClosedUser]
  static final printOrderClosedUser =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[33]);

  /// see [SalesInvoiceTemplates.printOrderCreatedUser]
  static final printOrderCreatedUser =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[34]);

  /// see [SalesInvoiceTemplates.printCheckNumber]
  static final printCheckNumber =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[35]);

  /// see [SalesInvoiceTemplates.hideFreeModifierOptions]
  static final hideFreeModifierOptions =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[36]);

  /// see [SalesInvoiceTemplates.autoPrintOnSave]
  static final autoPrintOnSave =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[37]);

  /// see [SalesInvoiceTemplates.printLanguage]
  static final printLanguage = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[38]);

  /// see [SalesInvoiceTemplates.printerPaperSize]
  static final printerPaperSize =
      obx.QueryStringProperty<SalesInvoiceTemplates>(
          _entities[59].properties[39]);

  /// see [SalesInvoiceTemplates.printerPaperDirection]
  static final printerPaperDirection =
      obx.QueryStringProperty<SalesInvoiceTemplates>(
          _entities[59].properties[40]);

  /// see [SalesInvoiceTemplates.invoiceCategory]
  static final invoiceCategory = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[41]);

  /// see [SalesInvoiceTemplates.defaultLanguage]
  static final defaultLanguage = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[42]);

  /// see [SalesInvoiceTemplates.secondLanguage]
  static final secondLanguage = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[43]);

  /// see [SalesInvoiceTemplates.orderTypes]
  static final orderTypes =
      obx.QueryIntegerVectorProperty<SalesInvoiceTemplates>(
          _entities[59].properties[44]);

  /// see [SalesInvoiceTemplates.users]
  static final users = obx.QueryStringVectorProperty<SalesInvoiceTemplates>(
      _entities[59].properties[45]);

  /// see [SalesInvoiceTemplates.defaultCode]
  static final defaultCode = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[46]);

  /// see [SalesInvoiceTemplates.secondCode]
  static final secondCode = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[47]);

  /// see [SalesInvoiceTemplates.pointsMessage]
  static final pointsMessage = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[48]);

  /// see [SalesInvoiceTemplates.fPointsMessage]
  static final fPointsMessage = obx.QueryStringProperty<SalesInvoiceTemplates>(
      _entities[59].properties[49]);

  /// see [SalesInvoiceTemplates.printCustomerPoints]
  static final printCustomerPoints =
      obx.QueryBooleanProperty<SalesInvoiceTemplates>(
          _entities[59].properties[50]);
}

/// [SalesInvoiceTemplatesA4] entity fields to define ObjectBox queries.
class SalesInvoiceTemplatesA4_ {
  /// see [SalesInvoiceTemplatesA4.idSeq]
  static final idSeq = obx.QueryIntegerProperty<SalesInvoiceTemplatesA4>(
      _entities[60].properties[0]);

  /// see [SalesInvoiceTemplatesA4.id]
  static final id = obx.QueryStringProperty<SalesInvoiceTemplatesA4>(
      _entities[60].properties[1]);

  /// see [SalesInvoiceTemplatesA4.name]
  static final name = obx.QueryStringProperty<SalesInvoiceTemplatesA4>(
      _entities[60].properties[2]);

  /// see [SalesInvoiceTemplatesA4.fName]
  static final fName = obx.QueryStringProperty<SalesInvoiceTemplatesA4>(
      _entities[60].properties[3]);

  /// see [SalesInvoiceTemplatesA4.menuName]
  static final menuName = obx.QueryStringProperty<SalesInvoiceTemplatesA4>(
      _entities[60].properties[4]);

  /// see [SalesInvoiceTemplatesA4.fMenuName]
  static final fMenuName = obx.QueryStringProperty<SalesInvoiceTemplatesA4>(
      _entities[60].properties[5]);

  /// see [SalesInvoiceTemplatesA4.title]
  static final title = obx.QueryStringProperty<SalesInvoiceTemplatesA4>(
      _entities[60].properties[6]);

  /// see [SalesInvoiceTemplatesA4.fTitle]
  static final fTitle = obx.QueryStringProperty<SalesInvoiceTemplatesA4>(
      _entities[60].properties[7]);

  /// see [SalesInvoiceTemplatesA4.printLanguage]
  static final printLanguage =
      obx.QueryIntegerProperty<SalesInvoiceTemplatesA4>(
          _entities[60].properties[8]);

  /// see [SalesInvoiceTemplatesA4.invoiceCategory]
  static final invoiceCategory =
      obx.QueryIntegerProperty<SalesInvoiceTemplatesA4>(
          _entities[60].properties[9]);

  /// see [SalesInvoiceTemplatesA4.appsFormPath]
  static final appsFormPath = obx.QueryStringProperty<SalesInvoiceTemplatesA4>(
      _entities[60].properties[10]);
}

/// [Shift] entity fields to define ObjectBox queries.
class Shift_ {
  /// see [Shift.id]
  static final id =
      obx.QueryIntegerProperty<Shift>(_entities[61].properties[0]);

  /// see [Shift.shiftId]
  static final shiftId =
      obx.QueryStringProperty<Shift>(_entities[61].properties[1]);

  /// see [Shift.reference]
  static final reference =
      obx.QueryStringProperty<Shift>(_entities[61].properties[2]);

  /// see [Shift.userId]
  static final userId =
      obx.QueryStringProperty<Shift>(_entities[61].properties[3]);

  /// see [Shift.userName]
  static final userName =
      obx.QueryStringProperty<Shift>(_entities[61].properties[4]);

  /// see [Shift.branchName]
  static final branchName =
      obx.QueryStringProperty<Shift>(_entities[61].properties[5]);

  /// see [Shift.clockedInDateAt]
  static final clockedInDateAt =
      obx.QueryStringProperty<Shift>(_entities[61].properties[6]);

  /// see [Shift.clockedInTimeAt]
  static final clockedInTimeAt =
      obx.QueryStringProperty<Shift>(_entities[61].properties[7]);

  /// see [Shift.clockedOutDateAt]
  static final clockedOutDateAt =
      obx.QueryStringProperty<Shift>(_entities[61].properties[8]);

  /// see [Shift.clockedOutTimeAt]
  static final clockedOutTimeAt =
      obx.QueryStringProperty<Shift>(_entities[61].properties[9]);

  /// see [Shift.isClockedOut]
  static final isClockedOut =
      obx.QueryBooleanProperty<Shift>(_entities[61].properties[10]);

  /// see [Shift.isSync]
  static final isSync =
      obx.QueryBooleanProperty<Shift>(_entities[61].properties[11]);
}

/// [Slaps] entity fields to define ObjectBox queries.
class Slaps_ {
  /// see [Slaps.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Slaps>(_entities[62].properties[0]);

  /// see [Slaps.from]
  static final from =
      obx.QueryDoubleProperty<Slaps>(_entities[62].properties[1]);

  /// see [Slaps.to]
  static final to = obx.QueryDoubleProperty<Slaps>(_entities[62].properties[2]);

  /// see [Slaps.price]
  static final price =
      obx.QueryDoubleProperty<Slaps>(_entities[62].properties[3]);

  /// see [Slaps.timeEventId]
  static final timeEventId =
      obx.QueryStringProperty<Slaps>(_entities[62].properties[4]);
}

/// [Table] entity fields to define ObjectBox queries.
class Table_ {
  /// see [Table.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Table>(_entities[63].properties[0]);

  /// see [Table.id]
  static final id = obx.QueryStringProperty<Table>(_entities[63].properties[1]);

  /// see [Table.tableNumber]
  static final tableNumber =
      obx.QueryIntegerProperty<Table>(_entities[63].properties[2]);

  /// see [Table.tableCode]
  static final tableCode =
      obx.QueryStringProperty<Table>(_entities[63].properties[3]);

  /// see [Table.numberOfIndividuals]
  static final numberOfIndividuals =
      obx.QueryIntegerProperty<Table>(_entities[63].properties[4]);

  /// see [Table.minumumReservationPrice]
  static final minumumReservationPrice =
      obx.QueryDoubleProperty<Table>(_entities[63].properties[5]);

  /// see [Table.status]
  static final status =
      obx.QueryIntegerProperty<Table>(_entities[63].properties[6]);

  /// see [Table.shape]
  static final shape =
      obx.QueryIntegerProperty<Table>(_entities[63].properties[7]);

  /// see [Table.offsetX]
  static final offsetX =
      obx.QueryIntegerProperty<Table>(_entities[63].properties[8]);

  /// see [Table.offsetY]
  static final offsetY =
      obx.QueryIntegerProperty<Table>(_entities[63].properties[9]);
}

/// [TaxC] entity fields to define ObjectBox queries.
class TaxC_ {
  /// see [TaxC.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<TaxC>(_entities[64].properties[0]);

  /// see [TaxC.taxName]
  static final taxName =
      obx.QueryStringProperty<TaxC>(_entities[64].properties[1]);

  /// see [TaxC.name]
  static final name =
      obx.QueryStringProperty<TaxC>(_entities[64].properties[2]);

  /// see [TaxC.fName]
  static final fName =
      obx.QueryStringProperty<TaxC>(_entities[64].properties[3]);

  /// see [TaxC.id]
  static final id = obx.QueryStringProperty<TaxC>(_entities[64].properties[4]);

  /// see [TaxC.taxPercentage]
  static final taxPercentage =
      obx.QueryDoubleProperty<TaxC>(_entities[64].properties[5]);

  /// see [TaxC.customerTaxable]
  static final customerTaxable =
      obx.QueryBooleanProperty<TaxC>(_entities[64].properties[6]);

  /// see [TaxC.orderTypes]
  static final orderTypes =
      obx.QueryIntegerVectorProperty<TaxC>(_entities[64].properties[7]);

  /// see [TaxC.taxCode]
  static final taxCode =
      obx.QueryStringProperty<TaxC>(_entities[64].properties[8]);

  /// see [TaxC.taxAccount]
  static final taxAccount =
      obx.QueryStringProperty<TaxC>(_entities[64].properties[9]);

  /// see [TaxC.isTaxExempt]
  static final isTaxExempt =
      obx.QueryBooleanProperty<TaxC>(_entities[64].properties[10]);

  /// see [TaxC.zeroTax]
  static final zeroTax =
      obx.QueryBooleanProperty<TaxC>(_entities[64].properties[11]);

  /// see [TaxC.exceptCustomers]
  static final exceptCustomers =
      obx.QueryStringVectorProperty<TaxC>(_entities[64].properties[12]);

  /// see [TaxC.periods]
  static final periods =
      obx.QueryRelationToMany<TaxC, TaxPeriod>(_entities[64].relations[0]);
}

/// [TaxGroup] entity fields to define ObjectBox queries.
class TaxGroup_ {
  /// see [TaxGroup.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<TaxGroup>(_entities[65].properties[0]);

  /// see [TaxGroup.id]
  static final id =
      obx.QueryStringProperty<TaxGroup>(_entities[65].properties[1]);

  /// see [TaxGroup.types]
  static final types =
      obx.QueryStringVectorProperty<TaxGroup>(_entities[65].properties[2]);

  /// see [TaxGroup.name]
  static final name =
      obx.QueryStringProperty<TaxGroup>(_entities[65].properties[3]);

  /// see [TaxGroup.fName]
  static final fName =
      obx.QueryStringProperty<TaxGroup>(_entities[65].properties[4]);
}

/// [TaxInfo] entity fields to define ObjectBox queries.
class TaxInfo_ {
  /// see [TaxInfo.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<TaxInfo>(_entities[66].properties[0]);

  /// see [TaxInfo.taxGroupId]
  static final taxGroupId =
      obx.QueryStringProperty<TaxInfo>(_entities[66].properties[1]);

  /// see [TaxInfo.value]
  static final value =
      obx.QueryDoubleProperty<TaxInfo>(_entities[66].properties[2]);
}

/// [TaxPeriod] entity fields to define ObjectBox queries.
class TaxPeriod_ {
  /// see [TaxPeriod.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<TaxPeriod>(_entities[67].properties[0]);

  /// see [TaxPeriod.id]
  static final id =
      obx.QueryStringProperty<TaxPeriod>(_entities[67].properties[1]);

  /// see [TaxPeriod.name]
  static final name =
      obx.QueryStringProperty<TaxPeriod>(_entities[67].properties[2]);

  /// see [TaxPeriod.fName]
  static final fName =
      obx.QueryStringProperty<TaxPeriod>(_entities[67].properties[3]);

  /// see [TaxPeriod.startDate]
  static final startDate =
      obx.QueryStringProperty<TaxPeriod>(_entities[67].properties[4]);

  /// see [TaxPeriod.endDate]
  static final endDate =
      obx.QueryStringProperty<TaxPeriod>(_entities[67].properties[5]);
}

/// [TaxSetting] entity fields to define ObjectBox queries.
class TaxSetting_ {
  /// see [TaxSetting.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<TaxSetting>(_entities[68].properties[0]);

  /// see [TaxSetting.enableSalesTax]
  static final enableSalesTax =
      obx.QueryBooleanProperty<TaxSetting>(_entities[68].properties[1]);

  /// see [TaxSetting.salesPriceIncludeTax]
  static final salesPriceIncludeTax =
      obx.QueryBooleanProperty<TaxSetting>(_entities[68].properties[2]);

  /// see [TaxSetting.enableCustomerSupplierTax]
  static final enableCustomerSupplierTax =
      obx.QueryBooleanProperty<TaxSetting>(_entities[68].properties[3]);

  /// see [TaxSetting.taxRoundFactor]
  static final taxRoundFactor =
      obx.QueryDoubleProperty<TaxSetting>(_entities[68].properties[4]);
}

/// [TenantSetting] entity fields to define ObjectBox queries.
class TenantSetting_ {
  /// see [TenantSetting.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<TenantSetting>(_entities[69].properties[0]);

  /// see [TenantSetting.logoUrl]
  static final logoUrl =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[1]);

  /// see [TenantSetting.companyName]
  static final companyName =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[2]);

  /// see [TenantSetting.fCompanyName]
  static final fCompanyName =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[3]);

  /// see [TenantSetting.activity]
  static final activity =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[4]);

  /// see [TenantSetting.fActivity]
  static final fActivity =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[5]);

  /// see [TenantSetting.phoneNumber]
  static final phoneNumber =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[6]);

  /// see [TenantSetting.faxNumber]
  static final faxNumber =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[7]);

  /// see [TenantSetting.webSite]
  static final webSite =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[8]);

  /// see [TenantSetting.email]
  static final email =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[9]);

  /// see [TenantSetting.taxRegistrationName]
  static final taxRegistrationName =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[10]);

  /// see [TenantSetting.crNo]
  static final crNo =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[11]);

  /// see [TenantSetting.taxNo]
  static final taxNo =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[12]);

  /// see [TenantSetting.zakatRegistrationNumber]
  static final zakatRegistrationNumber =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[13]);

  /// see [TenantSetting.municipalLicenseNumber]
  static final municipalLicenseNumber =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[14]);

  /// see [TenantSetting.gulfCouncilIdentificationNumber]
  static final gulfCouncilIdentificationNumber =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[15]);

  /// see [TenantSetting.sagiALicenseNumber]
  static final sagiALicenseNumber =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[16]);

  /// see [TenantSetting.country]
  static final country =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[17]);

  /// see [TenantSetting.postalCode]
  static final postalCode =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[18]);

  /// see [TenantSetting.province]
  static final province =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[19]);

  /// see [TenantSetting.city]
  static final city =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[20]);

  /// see [TenantSetting.district]
  static final district =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[21]);

  /// see [TenantSetting.street]
  static final street =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[22]);

  /// see [TenantSetting.fProvince]
  static final fProvince =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[23]);

  /// see [TenantSetting.fCity]
  static final fCity =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[24]);

  /// see [TenantSetting.fDistrict]
  static final fDistrict =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[25]);

  /// see [TenantSetting.fStreet]
  static final fStreet =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[26]);

  /// see [TenantSetting.buildingNo]
  static final buildingNo =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[27]);

  /// see [TenantSetting.floorNo]
  static final floorNo =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[28]);

  /// see [TenantSetting.officeNo]
  static final officeNo =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[29]);

  /// see [TenantSetting.additionalNo]
  static final additionalNo =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[30]);

  /// see [TenantSetting.invoiceRoundFactor]
  static final invoiceRoundFactor =
      obx.QueryIntegerProperty<TenantSetting>(_entities[69].properties[31]);

  /// see [TenantSetting.localCurrencyId]
  static final localCurrencyId =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[32]);

  /// see [TenantSetting.salesPriceCurrencyId]
  static final salesPriceCurrencyId =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[33]);

  /// see [TenantSetting.inventoryCostCurrencyId]
  static final inventoryCostCurrencyId =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[34]);

  /// see [TenantSetting.payrollCurrencyId]
  static final payrollCurrencyId =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[35]);

  /// see [TenantSetting.inventoryCalculateCostMethod]
  static final inventoryCalculateCostMethod =
      obx.QueryIntegerProperty<TenantSetting>(_entities[69].properties[36]);

  /// see [TenantSetting.stockInventoryType]
  static final stockInventoryType =
      obx.QueryIntegerProperty<TenantSetting>(_entities[69].properties[37]);

  /// see [TenantSetting.printLanguage]
  static final printLanguage =
      obx.QueryIntegerProperty<TenantSetting>(_entities[69].properties[38]);

  /// see [TenantSetting.defaultLanguage]
  static final defaultLanguage =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[39]);

  /// see [TenantSetting.secondLanguage]
  static final secondLanguage =
      obx.QueryStringProperty<TenantSetting>(_entities[69].properties[40]);
}

/// [ThrowbackInfo] entity fields to define ObjectBox queries.
class ThrowbackInfo_ {
  /// see [ThrowbackInfo.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<ThrowbackInfo>(_entities[70].properties[0]);

  /// see [ThrowbackInfo.productRef]
  static final productRef =
      obx.QueryStringProperty<ThrowbackInfo>(_entities[70].properties[1]);

  /// see [ThrowbackInfo.quantity]
  static final quantity =
      obx.QueryDoubleProperty<ThrowbackInfo>(_entities[70].properties[2]);

  /// see [ThrowbackInfo.isWaste]
  static final isWaste =
      obx.QueryBooleanProperty<ThrowbackInfo>(_entities[70].properties[3]);

  /// see [ThrowbackInfo.ref]
  static final ref =
      obx.QueryStringProperty<ThrowbackInfo>(_entities[70].properties[4]);
}

/// [TimeEvent] entity fields to define ObjectBox queries.
class TimeEvent_ {
  /// see [TimeEvent.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<TimeEvent>(_entities[71].properties[0]);

  /// see [TimeEvent.id]
  static final id =
      obx.QueryStringProperty<TimeEvent>(_entities[71].properties[1]);

  /// see [TimeEvent.name]
  static final name =
      obx.QueryStringProperty<TimeEvent>(_entities[71].properties[2]);

  /// see [TimeEvent.fName]
  static final fName =
      obx.QueryStringProperty<TimeEvent>(_entities[71].properties[3]);

  /// see [TimeEvent.timeEventType]
  static final timeEventType =
      obx.QueryIntegerProperty<TimeEvent>(_entities[71].properties[4]);

  /// see [TimeEvent.timeEventValue]
  static final timeEventValue =
      obx.QueryDoubleProperty<TimeEvent>(_entities[71].properties[5]);

  /// see [TimeEvent.startDate]
  static final startDate =
      obx.QueryStringProperty<TimeEvent>(_entities[71].properties[6]);

  /// see [TimeEvent.endDate]
  static final endDate =
      obx.QueryStringProperty<TimeEvent>(_entities[71].properties[7]);

  /// see [TimeEvent.startTime]
  static final startTime =
      obx.QueryStringProperty<TimeEvent>(_entities[71].properties[8]);

  /// see [TimeEvent.endTime]
  static final endTime =
      obx.QueryStringProperty<TimeEvent>(_entities[71].properties[9]);

  /// see [TimeEvent.days]
  static final days =
      obx.QueryIntegerVectorProperty<TimeEvent>(_entities[71].properties[10]);

  /// see [TimeEvent.orderTypes]
  static final orderTypes =
      obx.QueryIntegerVectorProperty<TimeEvent>(_entities[71].properties[11]);

  /// see [TimeEvent.products]
  static final products =
      obx.QueryStringVectorProperty<TimeEvent>(_entities[71].properties[12]);

  /// see [TimeEvent.customers]
  static final customers =
      obx.QueryStringVectorProperty<TimeEvent>(_entities[71].properties[13]);

  /// see [TimeEvent.departments]
  static final departments =
      obx.QueryStringVectorProperty<TimeEvent>(_entities[71].properties[14]);

  /// see [TimeEvent.categories]
  static final categories =
      obx.QueryStringVectorProperty<TimeEvent>(_entities[71].properties[15]);

  /// see [TimeEvent.priority]
  static final priority =
      obx.QueryIntegerProperty<TimeEvent>(_entities[71].properties[16]);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// see [Transaction.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Transaction>(_entities[72].properties[0]);

  /// see [Transaction.id]
  static final id =
      obx.QueryStringProperty<Transaction>(_entities[72].properties[1]);

  /// see [Transaction.refId]
  static final refId =
      obx.QueryStringProperty<Transaction>(_entities[72].properties[2]);

  /// see [Transaction.toAcount]
  static final toAcount =
      obx.QueryStringProperty<Transaction>(_entities[72].properties[3]);

  /// see [Transaction.amt]
  static final amt =
      obx.QueryDoubleProperty<Transaction>(_entities[72].properties[4]);

  /// see [Transaction.createBy]
  static final createBy =
      obx.QueryStringProperty<Transaction>(_entities[72].properties[5]);

  /// see [Transaction.date]
  static final date =
      obx.QueryStringProperty<Transaction>(_entities[72].properties[6]);
}

/// [Unit] entity fields to define ObjectBox queries.
class Unit_ {
  /// see [Unit.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<Unit>(_entities[73].properties[0]);

  /// see [Unit.id]
  static final id = obx.QueryStringProperty<Unit>(_entities[73].properties[1]);

  /// see [Unit.name]
  static final name =
      obx.QueryStringProperty<Unit>(_entities[73].properties[2]);

  /// see [Unit.fName]
  static final fName =
      obx.QueryStringProperty<Unit>(_entities[73].properties[3]);

  /// see [Unit.barcode]
  static final barcode =
      obx.QueryStringProperty<Unit>(_entities[73].properties[4]);

  /// see [Unit.price]
  static final price =
      obx.QueryDoubleProperty<Unit>(_entities[73].properties[5]);

  /// see [Unit.cost]
  static final cost =
      obx.QueryDoubleProperty<Unit>(_entities[73].properties[6]);

  /// see [Unit.factor]
  static final factor =
      obx.QueryDoubleProperty<Unit>(_entities[73].properties[7]);

  /// see [Unit.defaultForSales]
  static final defaultForSales =
      obx.QueryBooleanProperty<Unit>(_entities[73].properties[8]);

  /// see [Unit.defaultForPurchase]
  static final defaultForPurchase =
      obx.QueryBooleanProperty<Unit>(_entities[73].properties[9]);

  /// see [Unit.defaultForStore]
  static final defaultForStore =
      obx.QueryBooleanProperty<Unit>(_entities[73].properties[10]);

  /// see [Unit.showAlertPreparationTime]
  static final showAlertPreparationTime =
      obx.QueryBooleanProperty<Unit>(_entities[73].properties[11]);

  /// see [Unit.priceType]
  static final priceType =
      obx.QueryIntegerProperty<Unit>(_entities[73].properties[12]);

  /// see [Unit.priceList]
  static final priceList =
      obx.QueryRelationToMany<Unit, PriceListValue>(_entities[73].relations[0]);

  /// see [Unit.modifiers]
  static final modifiers =
      obx.QueryRelationToMany<Unit, UnitModifer>(_entities[73].relations[1]);
}

/// [UnitModifer] entity fields to define ObjectBox queries.
class UnitModifer_ {
  /// see [UnitModifer.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<UnitModifer>(_entities[74].properties[0]);

  /// see [UnitModifer.id]
  static final id =
      obx.QueryStringProperty<UnitModifer>(_entities[74].properties[1]);

  /// see [UnitModifer.minimumOptions]
  static final minimumOptions =
      obx.QueryIntegerProperty<UnitModifer>(_entities[74].properties[2]);

  /// see [UnitModifer.maximumOptions]
  static final maximumOptions =
      obx.QueryIntegerProperty<UnitModifer>(_entities[74].properties[3]);

  /// see [UnitModifer.isUnique]
  static final isUnique =
      obx.QueryBooleanProperty<UnitModifer>(_entities[74].properties[4]);

  /// see [UnitModifer.isRequired]
  static final isRequired =
      obx.QueryBooleanProperty<UnitModifer>(_entities[74].properties[5]);

  /// see [UnitModifer.defulatOptions]
  static final defulatOptions =
      obx.QueryStringVectorProperty<UnitModifer>(_entities[74].properties[6]);

  /// see [UnitModifer.exceptOptions]
  static final exceptOptions =
      obx.QueryStringVectorProperty<UnitModifer>(_entities[74].properties[7]);

  /// see [UnitModifer.name]
  static final name =
      obx.QueryStringProperty<UnitModifer>(_entities[74].properties[8]);

  /// see [UnitModifer.fName]
  static final fName =
      obx.QueryStringProperty<UnitModifer>(_entities[74].properties[9]);

  /// see [UnitModifer.freeOptions]
  static final freeOptions = obx.QueryRelationToMany<UnitModifer, FreeOption>(
      _entities[74].relations[0]);

  /// see [UnitModifer.options]
  static final options =
      obx.QueryRelationToMany<UnitModifer, Option>(_entities[74].relations[1]);
}

/// [UserCashierSetting] entity fields to define ObjectBox queries.
class UserCashierSetting_ {
  /// see [UserCashierSetting.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<UserCashierSetting>(_entities[75].properties[0]);

  /// see [UserCashierSetting.shortName]
  static final shortName =
      obx.QueryStringProperty<UserCashierSetting>(_entities[75].properties[1]);

  /// see [UserCashierSetting.fShortName]
  static final fShortName =
      obx.QueryStringProperty<UserCashierSetting>(_entities[75].properties[2]);

  /// see [UserCashierSetting.salesInvoiceTemplateId]
  static final salesInvoiceTemplateId =
      obx.QueryStringProperty<UserCashierSetting>(_entities[75].properties[3]);

  /// see [UserCashierSetting.salesInvoiceTemplateA4Id]
  static final salesInvoiceTemplateA4Id =
      obx.QueryStringProperty<UserCashierSetting>(_entities[75].properties[4]);

  /// see [UserCashierSetting.groupId]
  static final groupId =
      obx.QueryStringProperty<UserCashierSetting>(_entities[75].properties[5]);

  /// see [UserCashierSetting.priceListId]
  static final priceListId =
      obx.QueryStringProperty<UserCashierSetting>(_entities[75].properties[6]);

  /// see [UserCashierSetting.warehouseId]
  static final warehouseId =
      obx.QueryStringProperty<UserCashierSetting>(_entities[75].properties[7]);

  /// see [UserCashierSetting.discountPercentageLimit]
  static final discountPercentageLimit =
      obx.QueryIntegerProperty<UserCashierSetting>(_entities[75].properties[8]);

  /// see [UserCashierSetting.orderTypes]
  static final orderTypes = obx.QueryIntegerVectorProperty<UserCashierSetting>(
      _entities[75].properties[9]);

  /// see [UserCashierSetting.paymentMethods]
  static final paymentMethods =
      obx.QueryStringVectorProperty<UserCashierSetting>(
          _entities[75].properties[10]);

  /// see [UserCashierSetting.restaurantSections]
  static final restaurantSections =
      obx.QueryStringVectorProperty<UserCashierSetting>(
          _entities[75].properties[11]);

  /// see [UserCashierSetting.devices]
  static final devices = obx.QueryStringVectorProperty<UserCashierSetting>(
      _entities[75].properties[12]);

  /// see [UserCashierSetting.groups]
  static final groups = obx.QueryStringVectorProperty<UserCashierSetting>(
      _entities[75].properties[13]);

  /// see [UserCashierSetting.priceLists]
  static final priceLists = obx.QueryStringVectorProperty<UserCashierSetting>(
      _entities[75].properties[14]);

  /// see [UserCashierSetting.salesInvoiceTemplates]
  static final salesInvoiceTemplates =
      obx.QueryStringVectorProperty<UserCashierSetting>(
          _entities[75].properties[15]);

  /// see [UserCashierSetting.salesInvoiceTemplatesA4]
  static final salesInvoiceTemplatesA4 =
      obx.QueryStringVectorProperty<UserCashierSetting>(
          _entities[75].properties[16]);
}

/// [ViewSettings] entity fields to define ObjectBox queries.
class ViewSettings_ {
  /// see [ViewSettings.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<ViewSettings>(_entities[76].properties[0]);
}

/// [SendGiftCard] entity fields to define ObjectBox queries.
class SendGiftCard_ {
  /// see [SendGiftCard.idSeq]
  static final idSeq =
      obx.QueryIntegerProperty<SendGiftCard>(_entities[77].properties[0]);

  /// see [SendGiftCard.giftCardId]
  static final giftCardId =
      obx.QueryStringProperty<SendGiftCard>(_entities[77].properties[1]);

  /// see [SendGiftCard.baseAmount]
  static final baseAmount =
      obx.QueryDoubleProperty<SendGiftCard>(_entities[77].properties[2]);

  /// see [SendGiftCard.percent]
  static final percent =
      obx.QueryDoubleProperty<SendGiftCard>(_entities[77].properties[3]);

  /// see [SendGiftCard.value]
  static final value =
      obx.QueryDoubleProperty<SendGiftCard>(_entities[77].properties[4]);

  /// see [SendGiftCard.amount]
  static final amount =
      obx.QueryDoubleProperty<SendGiftCard>(_entities[77].properties[5]);

  /// see [SendGiftCard.deviceCreatedOn]
  static final deviceCreatedOn =
      obx.QueryStringProperty<SendGiftCard>(_entities[77].properties[6]);

  /// see [SendGiftCard.deviceCreatedBy]
  static final deviceCreatedBy =
      obx.QueryStringProperty<SendGiftCard>(_entities[77].properties[7]);
}
